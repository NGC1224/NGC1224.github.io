<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c语言的预处理、动态库、静态库</title>
      <link href="/posts/34865240.html"/>
      <url>/posts/34865240.html</url>
      
        <content type="html"><![CDATA[<h2 id="c-语言编译过程"><a href="#c-语言编译过程" class="headerlink" title="c 语言编译过程"></a>c 语言编译过程</h2><p>1：预编译<br>    将.c 中的头文件展开、宏展开，生成的文件是.i 文件<br>2：编译<br>    将预处理之后的.i 文件生成 .s 汇编文件<br>3、汇编<br>    将.s 汇编文件生成.o 目标文件<br>4、链接<br>    将.o 文件链接成目标文件</p><p><strong>Linux 下 GCC 编译器编译过</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i 1、预处理</span><br><span class="line">gcc -S hello.i –o hello.s 2、编译</span><br><span class="line">gcc -c hello.s -o hello.o 3、汇编</span><br><span class="line">gcc hello.o -o hello_elf  4、链接</span><br></pre></td></tr></table></figure><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><h1 id="include-lt-gt-用尖括号包含头文件，在系统指定的路径下找头文件"><a href="#include-lt-gt-用尖括号包含头文件，在系统指定的路径下找头文件" class="headerlink" title="include&lt;&gt;//用尖括号包含头文件，在系统指定的路径下找头文件"></a>include&lt;&gt;//用尖括号包含头文件，在系统指定的路径下找头文件</h1><h1 id="include-“”-用双引号包含头文件，先在当前目录下找头文件，找不到，"><a href="#include-“”-用双引号包含头文件，先在当前目录下找头文件，找不到，" class="headerlink" title="include “” //用双引号包含头文件，先在当前目录下找头文件，找不到，"></a>include “” //用双引号包含头文件，先在当前目录下找头文件，找不到，</h1><p>再到系统指定的路径下找。<br>注意：include 经常用来包含头文件，可以包含 .c 文件，但是大家不要包含.c<br>因为 include 包含的文件会在预编译被展开，如果一个.c 被包含多次，展开多次，会导致函数重复定义。<br>所以不要包含.c 文件。<br>注意：预处理只是对 include 等预处理操作进行处理并不会进行语法检查<br>这个阶段有语法错误也不会报错，第二个阶段即编译阶段才进行语法检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">max.h</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line">main.c：</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;max.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">num=max(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：gcc –E main.c –o main.i</p><h3 id="define"><a href="#define" class="headerlink" title="define"></a>define</h3><p>定义宏用 define 去定义<br>宏是在预编译的时候进行替换。<br>1、不带参宏</p><pre><code>#define PI 3.14在预编译的时候如果代码中出现了 PI 就用 3.14 去替换。宏的好处：只要修改宏定义，其他地方在预编译的时候就会重新替换。</code></pre><blockquote><p>注意：宏定义后边不要加分号</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">double</span> f;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,PI);<span class="comment">//3.141593</span></span><br><span class="line">    f=PI;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宏定义的作用范围，从定义的地方到本文件末尾。<br>如果想在中间终止宏的定义范围</p><h1 id="undef-PI-终止-PI-的作"><a href="#undef-PI-终止-PI-的作" class="headerlink" title="undef PI //终止 PI 的作"></a>undef PI //终止 PI 的作</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">double</span> f;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,PI);<span class="comment">//3.141593</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line">f=PI;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, PI);<span class="comment">//3.140000</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、带参宏</p><h1 id="define-S-a-b-a-b"><a href="#define-S-a-b-a-b" class="headerlink" title="define S(a,b) a*b"></a>define S(a,b) a*b</h1><p>注意带参宏的形参 a 和 b 没有类型名，<br>S(2,4) 将来在预处理的时候替换成 实参替代字符串的形参，其他字符保留，2 * 4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> S(a,b) a*b</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">num=S(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//num = 8</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>S(2+4,3)被替换成 2+4 * 3</p><blockquote><p>注意：带参宏，是在预处理的时候进行替换解决歧义方法</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> S(a,b) (a)*(b)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">num=S(<span class="number">2</span>+<span class="number">3</span>,<span class="number">5</span>);<span class="comment">//(2+3）*(5)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、带参宏和带参函数的区别<br>    带参宏被调用多少次就会展开多少次，执行代码的时候没有函数调用的过程，不需要压栈弹栈。所以<br>    带参宏，是浪费了空间，因为被展开多次，节省时间。<br>    带参函数，代码只有一份，存在代码段，调用的时候去代码段取指令，调用的时候要，压栈弹栈。有<br>个调用的过程。<br>    所以说，带参函数是浪费了时间，节省了空间。<br>带参函数的形参是有类型的，带参宏的形参没有类型名。</p><h2 id="选择性编译"><a href="#选择性编译" class="headerlink" title="选择性编译"></a>选择性编译</h2><p>1、</p><h1 id="ifdef-AAA"><a href="#ifdef-AAA" class="headerlink" title="ifdef AAA"></a>ifdef AAA</h1><pre><code>代码段一</code></pre><h1 id="else"><a href="#else" class="headerlink" title="else"></a>else</h1><pre><code>代码段二</code></pre><p>#endif</p><p>如果在当前.c ifdef 上边定义过 AAA ，就编译代码段一，否则编译代码段二<br>注意和 if else 语句的区别，if else 语句都会被编译，通过条件选择性执行代码<br>而 选择性编译，只有一块代码被编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AAA</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AAA</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world!!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello China\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、</p><h1 id="ifndef-AAA"><a href="#ifndef-AAA" class="headerlink" title="ifndef AAA"></a>ifndef AAA</h1><pre><code>代码段一</code></pre><h1 id="else-1"><a href="#else-1" class="headerlink" title="else"></a>else</h1><pre><code>代码段二</code></pre><h1 id="endif"><a href="#endif" class="headerlink" title="endif"></a>endif</h1><p>和第一种互补。<br>这种方法，经常用在防止头文件重复包含。<br>防止头文件重复包含</p><p>3、</p><h1 id="if-表达式"><a href="#if-表达式" class="headerlink" title="if 表达式"></a>if 表达式</h1><pre><code>程序段一</code></pre><h1 id="else-2"><a href="#else-2" class="headerlink" title="else"></a>else</h1><pre><code>程序段二</code></pre><h1 id="endif-1"><a href="#endif-1" class="headerlink" title="endif"></a>endif</h1><p>如果表达式为真，编译第一段代码，否则编译第二段代码<br>选择性编译都是在预编译阶段干的事情。</p><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>一：动态编译<br>    动态编译使用的是动态库文件进行编译<br>    gcc hello.c -o hello<br>    默认的咱们使用的是动态编译方法<br>二：静态编译<br>    静态编译使用的静态库文件进行编译<br>    gcc -static hello.c -o hello<br>三：静态编译和动态编译区别<br>    1：使用的库文件的格式不一样<br>        动态编译使用动态库，静态编译使用静态库<br>    注意：<br>        1：静态编译要把静态库文件打包编译到可执行程序中。<br>        2：动态编译不会把动态库文件打包编译到可执行程序中，<br>    它只是编译链接关系</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mylib.c</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&gt;y)?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&lt;y)?x:y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mylib.h</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line">mytest.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylib.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>,max_num,min_num;</span><br><span class="line">max_num=max(a,b);</span><br><span class="line">    min_num=min(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max_num=%d\n&quot;</span>,max_num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;min_num=%d\n&quot;</span>,min_num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>制作静态态库：</strong><br>    gcc -c mylib.c -o mylib.o<br>    ar rc libtestlib.a mylib.o<br>    注意：静态库起名的时候必须以 lib 开头以.a 结尾<br><strong>编译程序：</strong><br>方法 1：<br>    gcc -static mytest.c libtestlib.a -o mytest<br>方法 2：可以指定头文件及库文件的路径<br>    比如咱们讲 libtestlib.a mylib.h 移动到/home/edu 下<br>    mv libtestlib.a mylib.h /home/edu<br>编译程序命令：<br>    gcc –static mytest.c –o mytest -L/home/edu -ltestlib -I/home/edu<br>注意：-L 是指定库文件的路径<br>    -l 指定找哪个库，指定的只要库文件名 lib 后面 .a 前面的部分<br>    -I 指定头文件的路径<br>方法 3：<br>    咱们可以将库文件及头文件存放到系统默认指定的路径下<br>    库文件默认路径是 /lib 或者是/usr/lib<br>    头文件默认路径是/usr/include<br>        sudo mv libtestlib.a /usr/lib<br>        sudo mv mylib.h /usr/include<br>    编译程序的命令<br>        gcc -static mytest.c –o mytest -ltestlib</p><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p>制作动态链接库：<br>    gcc -shared mylib.c -o libtestlib.so<br>    //使用 gcc 编译、制作动态链接库<br>动态链接库的使用：<br>方法 1：库函数、头文件均在当前目录下<br>    gcc mytest.c libtestlib.so -o mytest<br>    export LD_LIBRARY_PATH=./:$LD_LIBRARY_PATH./mytest<br>方法 2：库函数、头文件假设在/home/edu 目录<br>    gcc mytest.c -o mytest -L/home/edu -ltestlib -I/home/edu<br>    编译通过，运行时出错，编译时找到了库函数，但链接时找不到库，执行以下操作，把当前目录加入搜索路径<br>    export LD_LIBRARY_PATH=/home/edu:$LD_LIBRARY_PATH</p><pre><code>#./mytest 可找到动态链接库</code></pre><p>方法 3：库函数、头文件均在系统路径下<br>    cp libtestlib.so /usr/lib<br>    cp mylib.h /usr/include<br>    gcc mytest.c -o mytest -ltestlib</p><h1 id="mytest"><a href="#mytest" class="headerlink" title="./mytest"></a>./mytest</h1><p>问题：有个问题出现了？<br>    我们前面的静态库也是放在/usr/lib 下，那么连接的到底是动态库还是静态库呢？当静态库与动态库重名时，系统会优先连接动态库，或者我们可以加入-static 指定使用静态</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言数组</title>
      <link href="/posts/396797d9.html"/>
      <url>/posts/396797d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h2><p>数组是==若干个相同类型==的变量在内存中==有序存储的集合==。<br>int a[10];//定义了一个整型的数组 a，a 是数组的名字，数组中有 10 个元素，每个元素的类型<br>都是 int 类型，而且在内存中连续存储。<br>这十个元素分别是 a[0] a[1] …. a[9]<br>a[0]~a[9]在内存中连续的顺序存储</p><h2 id="数组的分类"><a href="#数组的分类" class="headerlink" title="数组的分类"></a>数组的分类</h2><h3 id="按元素的类型分类"><a href="#按元素的类型分类" class="headerlink" title="按元素的类型分类"></a>按元素的类型分类</h3><ol><li>字符数组<br> 即若干个字符变量的集合，数组中的每个元素都是字符型的变量<br> char s[10]; s[0],s[1]….s[9];</li><li>短整型的数组<br> short int a[10]; a[0] ,a[9]; a[0]=4;a[9]=8;</li><li>整型的数组<br> int a[10]; a[0] a[9]; a[0]=3;a[0]=6;</li></ol><p>4) 长整型的数组<br>    lont int a[5];<br>5) 浮点型的数组（单、双）<br>    float a[6]; a[4]=3.14f;<br>    double a[8]; a[7]=3.115926;<br>6) 指针数组<br>    char <em>a[10]<br>    int </em>a[10];<br>7) 结构体数组<br>    struct stu boy[10];</p><h3 id="按维数分类"><a href="#按维数分类" class="headerlink" title="按维数分类"></a>按维数分类</h3><p>一维数组<br>    int a[30];<br>    类似于一排平房<br>二维数组<br>    int a[2][30];<br>    可以看成一栋楼房 有多层，每层有多个房间，也类似于数学中的矩阵<br>    二维数组可以看成由多个一维数组构成的。<br>    有行，有列<br>多维数组<br>    int a[4][2][10];<br>    三维数组是由多个相同的二维数组构成的<br>    int a[5][4][2][10];</p><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><p>定义一个数组，在内存里分配空间</p><h3 id="一维数组的定义"><a href="#一维数组的定义" class="headerlink" title="一维数组的定义"></a>一维数组的定义</h3><p>格式：<br>    数据类型 数组名 [数组元素个数];<br>    int a [10];<br>    char b [5];定义了 5 个 char 类型变量的数组 b<br>    5 个变量分别为 b[0],b[1],b[2]，b[3],b[4];<br>在数组定义的时候可以不给出数组元素的个数，根据初始化的个数来定数组的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组的定义"><a href="#二维数组的定义" class="headerlink" title="二维数组的定义"></a>二维数组的定义</h3><p>格式:<br>数据类型 数组名 [行的个数][列的个数];<br>int a [4][5];<br>定义了 20 个 int 类型的变量 分别是<br>a[0][0] ,a[0][1],a[0][2] ,a[0][3] ,a[0][4];<br>a[1][0] ,a[1][1],a[1][2] ,a[1][3] ,a[1][4];<br>a[2][0] ,a[2][1],a[2][2] ,a[2][3] ,a[2][4];<br>a[3][0] ,a[3][1],a[3][2] ,a[3][3] ,a[3][4];<br>多维数组定义：<br>int a[3][4][5]<br>int a[8][3][4][5];</p><blockquote><p>二维数组在定义的时候，可以不给出行数，但必须给出列数，二维数组的大小根据初始化的行数来定</p></blockquote><h2 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h2><p>定义数组的时候，顺便给数组的元素赋初值，即开辟空间的同时并且给数组元素赋值</p><h3 id="一维数组的初始化"><a href="#一维数组的初始化" class="headerlink" title="一维数组的初始化"></a>一维数组的初始化</h3><p>a、全部初始化<br>    int a[5]={2,4,7,8,5};<br>    代表的意思: a[0]=2; a[1]=4;a[2]=7;a[3] = 8;a[4]=5;<br>b、部分初始化<br>    int a[5]={2,4,3};初始化赋值不够后面补 0<br>    a[0] = 2; a[1]= 4;a[2]=3;a[3]=0;a[4]=0;</p><blockquote><p>注意：只能省略后面元素，可以不初始化，不能中间的不初始化</p></blockquote><h3 id="二维数组的定义并初始化"><a href="#二维数组的定义并初始化" class="headerlink" title="二维数组的定义并初始化"></a>二维数组的定义并初始化</h3><p>二维数组的定义并初始化</p><p><strong>按行初始化：</strong><br>a、全部初始化<br>    int a[2][2]="{{1,2},{4,5}}";<br>    a[0][0] =1; a[0][1] = 2; a[1][0] = 4,a[1][1]=5;<br>b、部分初始化<br>    int a[3][3]="{{1,2},{1}}";<br>    a[0][0] = 1;a[0][2] =0;<br><strong>逐个初始化：</strong><br>全部初始化：<br>    int a[2][3]={2,5,4,2,3,4};<br>部分初始化：<br>    int a[2][3]={3,5,6,8};</p><h2 id="数组元素的引用方法"><a href="#数组元素的引用方法" class="headerlink" title="数组元素的引用方法"></a>数组元素的引用方法</h2><h3 id="一维数组元素的引用方法"><a href="#一维数组元素的引用方法" class="headerlink" title="一维数组元素的引用方法"></a>一维数组元素的引用方法</h3><p>数组名 [下标]；//下标代表数组元素在数组中的位置<br>int a[5];<br>a[0] a[1] a[2] a[3] a[4];</p><h3 id="二维数组元素的引用方法"><a href="#二维数组元素的引用方法" class="headerlink" title="二维数组元素的引用方法"></a>二维数组元素的引用方法</h3><p>数组名[行下标][列下标];<br>int a [4][5];<br>a[0][0] ,a[0][1],a[0][2] ,a[0][3] ,a[0][4];<br>a[1][0] ,a[1][1],a[1][2] ,a[1][3] ,a[1][4];<br>a[2][0] ,a[2][1],a[2][2] ,a[2][3] ,a[2][4];<br>a[3][0] ,a[3][1],a[3][2] ,a[3][3] ,a[3][4];</p><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><p>char c1[] ={‘c’,’ ’,’p’,’r’,’o’,’g’};<br>char c2[] = “c prog”;<br>char a[][5] = {<br>    {‘B’,’A’,’S’,’I’,’C’},<br>    {‘d’,’B’,’A’,’S’,’E’}<br>};<br>char a[][6] = {“hello”,“world”};</p><p><strong>字符数组的引用</strong></p><ol><li>用字符串方式赋值比用字符逐个赋值要多占 1 个字节,用于存放字符串结束标志‘\0’;</li><li>上面的数组 c2 在内存中的实际存放情况为：</li></ol><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231203212823306.png" alt="image-20231203212823306"></p><blockquote><p>注：’\0’是由 C 编译系统自动加上的</p></blockquote><ol><li>由于采用了’\0’标志，字符数组的输入输出将变得简单方便.</li></ol>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言函数</title>
      <link href="/posts/7cc86ee6.html"/>
      <url>/posts/7cc86ee6.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h2><p>函数是 c 语言的功能单位，实现一个功能可以封装一个函数来实现。<br>定义函数的时候一切以功能为目的，根据功能去定函数的参数和返回值。</p><h2 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h2><p>1、从定义角度分类（即函数是谁实现的）</p><ol><li>库函数 (c 库实现的)</li><li>自定义函数 （程序员自己实现的函数）</li><li>系统调用 (操作系统实现的函数)</li></ol><p>2、从参数角度分类</p><ol><li><p>有参函数<br>函数有形参，可以是一个，或者多个，参数的类型完全取决于函数的功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a,<span class="type">float</span> b,<span class="type">double</span> c)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​ 2. 无参函数</p><p>​ 函数没有参数,在形参列表的位置写个 void 或什么都不写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>从返回值角度分类</li></ol><p>(1).带返回值的函数<br> 在定义函数的时候，必须带着返回值类型，在函数体里，必须有 return<br> 如果没有返回值类型，默认返回整型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">fun</span><span class="params">()</span><span class="comment">//定义了一个返回字符数据的函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> b=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 如果把函数的返回值类型省略了，默认返回整型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun()&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2).没返回值的函数<br> 在定义函数的时候，函数名字前面加 void<br> void fun(形参表){<br>  ;<br>  ;<br> return ;<br> }<br>在函数里不需要 return<br>如果想结束函数，返回到被调用的地方， return;什么都不返回就可以了</p><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>什么叫做函数的定义呢？即函数的实现<br>1、函数的定义方法<br> 返回值类型 函数名字(形参列表){<br>  //函数体，函数的功能在函数体里实现<br> }</p><blockquote><p>注：形参必须带类型，而且以逗号分隔<br>函数的定义不能嵌套，即不能在一个函数体内定义另外一个函数<br>所有的函数的定义是平行的<br>在一个程序中，函数只能定义一次</p></blockquote><h3 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h3><p>1、概念<br> 对已经定义的函数，进行说明<br> 函数的声明可以声明多次。<br>2、为什么要声明<br> 有些情况下，如果不对函数进行声明，编译器在编译的时候，可能不认识这个函数，因为编译器在编译 c 程序的时候，从上往下编译的</p><p>3、声明的方法<br> 什么时候需要声明<br>  1）主调函数和被调函数在同一个.c 文件中的时候<br>   1] 被调函数在上，主调函数在下，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> fun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​   这种情况下不需要声明<br>​   2] 被调函数在下，主调函数在上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器从上往下编译，在 main 函数（主调函数），不认识 fun，需要声明</p><p>怎么声明 呢？</p><p>1] 直接声明法<br> 将被调用的函数的第一行拷贝过去，后面加分号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2] 间接声明法<br>将函数的声明放在头文件中，.c 程序包含头文件即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a.h</span><br><span class="line"><span class="comment">//在 .h头 文件中声明方法</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">    </span><br><span class="line">a.c</span><br><span class="line"><span class="comment">//引入 头文件，则会引入该头文件中声明的方法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>”a.h”</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> fun();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​  2）主调函数和被调函数不在同一个.c 文件中的时候<br>​   一定要声明<br>​   声明的方法：<br>​    直接声明法<br>​     将被调用的函数的第一行拷贝过去，后面加分号，前面加 extern<br>​    间接声明法<br>​     将函数的声明放在头文件中，.c 程序包含头文件即可</p><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p>函数的调用方法<br> 变量= 函数名(实参列表);//带返回值的<br> 函数名(实参列表);//不带返回值</p><p>1、有无返回值<br> 1).有返回值的，根据返回值的类型，需要在主调函数中定义一个对应类型的变量，接返回值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span><span class="comment">// x、y 形参，是个变量</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">int</span> num;<span class="comment">//需要定义一个 num 接收 max 函数的返回值</span></span><br><span class="line"> num=max(<span class="number">4</span>,<span class="number">8</span>);<span class="comment">//4 和 8 就是实参</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 2).没有返回值的函数，不需要接收返回值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> fun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、有无形参<br> 函数名(实参列表);//带形参的<br> 函数名();//没有形参的<br> 注意：实参，可以常量，可以是变量，或者是表达式<br> 形参是变量，是被调函数的局部变量。</p><h2 id="变量的存储类别"><a href="#变量的存储类别" class="headerlink" title="变量的存储类别"></a>变量的存储类别</h2><h3 id="内存的分区"><a href="#内存的分区" class="headerlink" title="内存的分区"></a>内存的分区</h3><p>1、内存：物理内存、虚拟内存<br> 物理内存：实实在在存在的存储设备<br> 虚拟内存：操作系统虚拟出来的内存。<br> 操作系统会在物理内存和虚拟内存之间做映射。<br> 在 32 位系统下，每个进程的寻址范围是 4G,0x00 00 00 00 ~0xff ff ff ff<br> 在写应用程序的，咱们看到的都是虚拟地址。<br>2、在运行程序的时候，操作系统会将 虚拟内存进行分区。<br> 1).堆<br>  在动态申请内存的时候，在堆里开辟内存。<br> 2).栈<br>  主要存放局部变量。<br> 3).静态全局区<br>  1：未初始化的静态全局区<br>   静态变量（定义变量的时候，前面加 static 修饰），或全局变量 ，没有初始化的，存在此区<br>  2：初始化的静态全局区<br>   全局变量、静态变量，赋过初值的，存放在此区<br> 4).代码区<br>  存放咱们的程序代码<br> 5).文字常量区<br>  存放常量的。</p><h3 id="普通的全局变量"><a href="#普通的全局变量" class="headerlink" title="普通的全局变量"></a>普通的全局变量</h3><p>概念：<br> 在函数外部定义的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num=<span class="number">100</span>;<span class="comment">//num 就是一个全局变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用范围：<br> 普通全局变量的作用范围，是程序的所有地方。<br> 只不过用之前需要声明。声明方法 extern int num;<br> 注意声明的时候，不要赋值。<br>生命周期：<br> 程序运行的整个过程，一直存在，直到程序结束。</p><blockquote><p>注意：定义普通的全局变量的时候，如果不赋初值，它的值默认为 0</p></blockquote><h3 id="静态全局变量-static"><a href="#静态全局变量-static" class="headerlink" title="静态全局变量 static"></a>静态全局变量 static</h3><p>概念：<br> 定义全局变量的时候，前面用 static 修饰。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> num=<span class="number">100</span>;<span class="comment">//num 就是一个静态全局变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用范围：<br> static 限定了静态全局变量的，作用范围<br> 只能在它定义的.c（源文件）中有效<br>生命周期：<br> 在程序的整个运行过程中，一直存在。<br> 注意：定义静态全局变量的时候，如果不赋初值，它的值默认为</p><h3 id="普通的局部变量"><a href="#普通的局部变量" class="headerlink" title="普通的局部变量"></a>普通的局部变量</h3><p>概念：<br> 在函数内部定义的，或者复合语句中定义的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">int</span> num;<span class="comment">//普通局部变量</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="type">int</span> a;<span class="comment">//普通局部变量</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用范围：<br> 在函数中定义的变量，在它的函数中有效<br> 在复合语句中定义的，在它的复合语句中有效。<br>生命周期：<br> 在函数调用之前，局部变量不占用空间，调用函数的时候，<br> 才为局部变量开辟空间，函数结束了，局部变量就释放了。<br> 在复合语句中定义的亦如此。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">int</span> num=<span class="number">3</span>;</span><br><span class="line"> num++;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    fun();<span class="comment">//num=4</span></span><br><span class="line">    fun();<span class="comment">//num=4</span></span><br><span class="line">    fun();<span class="comment">//num=4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态的局部变量"><a href="#静态的局部变量" class="headerlink" title="静态的局部变量"></a>静态的局部变量</h3><p>概念：<br> 定义局部变量的时候，前面加 static 修饰<br>作用范围：<br> 在它定义的函数或复合语句中有效。<br>生命周期：<br> 第一次调用函数的时候，开辟空间赋值，函数结束后，不释放，<br> 以后再调用函数的时候，就不再为其开辟空间，也不赋初值，<br> 用的是以前的那个变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">static</span> <span class="type">int</span> num=<span class="number">3</span>;</span><br><span class="line"> num++;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num=%d\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    fun();<span class="comment">//num=4</span></span><br><span class="line">    fun();<span class="comment">//num=5</span></span><br><span class="line">    fun();<span class="comment">//num=6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br> 1：定义普通局部变量，如果不赋初值，它的值是随机的<br>  定义静态局部变量，如果不赋初值，它的值是 0</p><p>​ 2：普通全局变量，和静态全局变量如果不赋初值，它的值为 0</p><p><strong>变量存储类别扩展：</strong><br> 在同一作用范围内，不允许变量重名。<br> 作用范围不同的可以重名。<br> 局部范围内，重名的全局变量不起作用。（就近原则）</p><h3 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数"></a>外部函数</h3><p>​ 咱们定义的普通函数，都是外部函数。<br>​ 即函数可以在程序的任何一个文件中调用。</p><h3 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h3><p>​ 在定义函数的时候，返回值类型前面加 static 修饰。这样的函数被称为内部函数。<br>​ static 限定了函数的作用范围，在定义的.c 中有效</p><p>内部函数，和外部函数的区别：<br> 外部函数，在所有地方都可以调用<br> 内部函数，只能在所定义的.c 中的函数</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言指针</title>
      <link href="/posts/7e055cf8.html"/>
      <url>/posts/7e055cf8.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于内存那点事"><a href="#关于内存那点事" class="headerlink" title="关于内存那点事"></a>关于内存那点事</h2><p><strong>存储器：存储数据器件</strong><br><strong>外存</strong><br> 外存又叫外部存储器，长期存放数据，掉电不丢失数据<br> 常见的外存设备：硬盘、flash、rom、u 盘、光盘、磁带<br><strong>内存</strong><br> 内存又叫内部存储器，暂时存放数据，掉电数据丢失<br> 常见的内存设备：ram、DDR</p><p>物理内存：实实在在存在的存储设备<br>虚拟内存：操作系统虚拟出来的内存<br>32bit 32 根寻址总线<br>0x00 00 00 00<br>0xff ff ff ff</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204163324553.png" alt="image-20231204163324553"></p><p>操作系统会在物理内存和虚拟内存之间做映射。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204163358869.png" alt="image-20231204163358869"></p><p>在 32 位系统下，每个进程（运行着的程序）的寻址范围是 4G,0x00 00 00 00 ~0xff ff ff ff<br>在写应用程序的，咱们看到的都是虚拟地址。在运行程序的时候，操作系统会将 虚拟内存进行分区。<br>1.堆<br> 在动态申请内存的时候，在堆里开辟内存。<br>2.栈<br> 主要存放局部变量（在函数内部，或复合语句内部定义的变量）。<br>3.静态全局区<br> 1）：未初始化的静态全局区<br>  静态变量（定义的时候，前面加 static 修饰），或全局变量 ，没有初始化的，存在此区<br> 2）：初始化的静态全局区<br>  全局变量、静态变量，赋过初值的，存放在此区<br>4.代码区<br> 存放咱们的程序代码<br>5.文字常量区<br> 存放常量的。<br>内存以字节为单位来存储数据的，咱们可以将程序中的虚拟寻址空间，看成一个很大的一维的字符数组</p><h2 id="指针的概念"><a href="#指针的概念" class="headerlink" title="指针的概念"></a>指针的概念</h2><p>系统给虚拟内存的每个存储单元分配了一个编号，从 0x00 00 00 00 ~0xff ff ff ff<br> 这个编号咱们称之为地址<br> 指针就是地址</p><p>指针变量：是个变量，是个指针变量，即这个变量用来存放一个地址编号<br>在 32 位平台下，地址总线是 32 位的，所以地址是 32 位编号，所以指针变量是 32 位的即 4 个字节。<br>注意：<br> 1：无论什么类型的地址，都是存储单元的编号，在 32 位平台下都是 4 个字节，即任何类型的指针变量都是 4 个字节大小<br> 2：对应类型的指针变量，只能存放对应类型的变量的地址<br> 举例：整型的指针变量，只能存放整型变量的地址</p><p>扩展：<br> 字符变量 char ch=‘b’; ch 占 1 个字节，它有一个地址编号，这个地址编号就是 ch 的地址<br> 整型变量 int a=0x12 34 56 78; a 占 4 个字节，它占有 4 个字节的存储单元，有 4 个地址编号</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204163723632.png" alt="image-20231204163723632"></p><h2 id="指针变量的定义方法"><a href="#指针变量的定义方法" class="headerlink" title="指针变量的定义方法"></a>指针变量的定义方法</h2><ol><li>简单的指针变量<br>数据类型 <em>针变量名;<br>int p;//定义了一个指针变量 p<br>在 定义指针变量的时候</em> 是用来修饰变量的，说明变量 p 是个指针变量。<br>变量名是 p</li><li>关于指针的运算符<br>&amp; 取地址 、 *取值</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">0x1234abcd</span>;</span><br><span class="line"><span class="type">int</span> *p;<span class="comment">//在定义指针变量的时候*代表修饰的意思，修饰 p 是个指针变量。</span></span><br><span class="line">p=&amp;a;<span class="comment">//把 a 的地址给 p 赋值 ，&amp;是取地址符</span></span><br></pre></td></tr></table></figure><p>p 保存了 a 的地址，也可以说 p 指向了 a<br>p 和 a 的关系分析：a 的值是 0x1234abcd，假如 a 的地址是：0xbf e8 98 68</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204164003484.png" alt="image-20231204164003484"></p><p>int num；<br>num=*p;</p><p><strong>分析</strong>：<br> 1、在调用的时候 *代表取值得意思 ，*p 就相当于 p 指向的变量，即 a，<br> 2、故 num=<em>p 和 num =a 的效果是一样的。<br> 3、所以说 num 的值为 0x1234abcd。<br><em>*扩展</em></em>：</p><p>如果在一行中定义多个指针变量，每个指针变量前面都需要加<em>来修饰<br>int \</em>p,*q;//定义了两个整型的指针变量 p 和 q<br>int p,q;//定义了一个整型指针变量 p，和整型的变量 q</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>, b = <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> *p_1, *p_2 = &amp;b; <span class="comment">//表示该变量的类型是一个指针变量，指针变量名是 p_1 而不是*p_1. //p_1 在定义的时候没有赋初值，p_2 赋了初值</span></span><br><span class="line">    p_1 = &amp;a; <span class="comment">//p_1 先定义后赋值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">//100</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p_1);<span class="comment">//100</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);<span class="comment">//200</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p_2);<span class="comment">//200</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br> 在定义 p_1 的时候，因为是个局部变量，局部变量没有赋初值，它的值是随机的，p_1 指向哪里不一定，所以 p_1 就是个野指针。</p><p>3.指针大小</p><blockquote><p>在 32 位系统下，所有类型的指针都是 4 个字节</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *p1;</span><br><span class="line">    <span class="type">short</span> <span class="type">int</span> *p2;</span><br><span class="line">    <span class="type">int</span> *p3;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> *p4;</span><br><span class="line">    <span class="type">float</span> *p5;</span><br><span class="line">    <span class="type">double</span> *p6;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p1));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p2));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p3));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p4));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p5));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p6));<span class="comment">//4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针的分类"><a href="#指针的分类" class="headerlink" title="指针的分类"></a>指针的分类</h2><p><strong>按指针指向的数据的类型来分</strong></p><p>1：字符指针<br> 字符型数据的地址<br> char *p;//定义了一个字符指针变量，只能存放字符型数据的地址编号<br> char ch;<br> p= &ch;</p><p>2：短整型指针<br> short int *p;//定义了一个短整型的指针变量 p，只能存放短整型变量的地址<br> short int a;<br> p =&amp;a</p><p>3：整型指针<br> int *p;//定义了一个整型的指针变量 p，只能存放整型变量的地址<br> int a;<br> p =&a;<br> 注：多字节变量，占多个存储单元，每个存储单元都有地址编号，c 语言规定，存储单元编号最小的那个编号，是多字节变量的地址编号。</p><p>4：长整型指针<br> long int *p;//定义了一个长整型的指针变量 p，只能存放长整型变量的地址<br> long int a;<br> p =&a;</p><p>5：float 型的指针<br> float *p;//定义了一个 float 型的指针变量 p，只能存放 float 型变量的地址<br> float a;<br> p =&a;</p><p>6：double 型的指针<br> double *p;//定义了一个 double 型的指针变量 p，只能存放 double 型变量的地址<br> double a;<br> p =&a;</p><p>7：函数指针</p><p>8、结构体指针</p><p>9、指针的指针</p><p>10、数组指针</p><p>11、通用指针 void *p;</p><blockquote><p>总结:无论什么类型的指针变量，在 32 位系统下，都是 4 个字节。指针只能存放对应类型的变量的地址编号。</p></blockquote><h2 id="指针和变量的关系"><a href="#指针和变量的关系" class="headerlink" title="指针和变量的关系"></a>指针和变量的关系</h2><p><strong>指针可以存放变量的地址编号</strong><br> int a=100;<br> int *p;<br> p=&a;</p><p><strong>在程序中，引用变量的方法</strong><br>1:直接通过变量的名称<br> int a;<br> a=100;</p><p>2:可以通过指针变量来引用变量<br> int *p;//在定义的时候，<em>不是取值的意思，而是修饰的意思，修饰 p 是个指针变量<br> \</em>p=&a;//取 a 的地址给 p 赋值，p 保存了 a 的地址，也可以说 p 指向了 a<br> *p= 100;//在调用的时候<em>是取值的意思，</em>指针变量 等价于指针指向的变量<br>注：指针变量在定义的时候可以初始化<br> int a;<br> intp=&a;//用 a 的地址，给 p 赋值，因为 p 是指针变量<br>指针就是用来存放变量的地址的。<br>*+指针变量 就相当于指针指向的变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> *p1,*p2,temp,a,b;</span><br><span class="line">    p1=&amp;a;</span><br><span class="line">    p2=&amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入:a b 的值:\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d %d&quot;</span>,p1,p2);<span class="comment">//给 p1 和 p2 指向的变量赋值</span></span><br><span class="line">    temp = *p1; <span class="comment">//用 p1 指向的变量（a）给 temp 赋值</span></span><br><span class="line">    *p1 = *p2; <span class="comment">//用 p2 指向的变量（b）给 p1 指向的变量（a）赋值</span></span><br><span class="line">    *p2 = temp;<span class="comment">//temp 给 p2 指向的变量（b）赋值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p1=%d *p2=%d\n&quot;</span>,*p1,*p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">输入 100 200</span><br><span class="line">输出结果为：</span><br><span class="line"><span class="attribute">a</span>=200 <span class="attribute">b</span>=100</span><br><span class="line">*<span class="attribute">p1</span>=200 *<span class="attribute">p2</span>=100</span><br></pre></td></tr></table></figure><p>扩展：<br> 对应类型的指针，只能保存对应类型数据的地址，<br> 如果想让不同类型的指针相互赋值的时候，需要强制类型转换<br> void * p</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0x12345678</span>,b=<span class="number">0xabcdef66</span>;</span><br><span class="line">    <span class="type">char</span> *p1,*p2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%0x %0x\n&quot;</span>,a,b);<span class="comment">//12345678 abcdef66</span></span><br><span class="line">    p1=(<span class="type">char</span> *)&amp;a;</span><br><span class="line">    p2=(<span class="type">char</span> *)&amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%0x %0x\n&quot;</span>,*p1,*p2);<span class="comment">//78 66</span></span><br><span class="line">    p1++;</span><br><span class="line">    p2++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%0x %0x\n&quot;</span>,*p1,*p2);<span class="comment">//56 ffffffef</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>1：*+指针 取值，取几个字节，由指针类型决定的指针为字符指针则取一个字节，<br> 指针为整型指针则取 4 个字节，指针为 double 型指针则取 8 个字节。</p><p>2：指针++ 指向下个对应类型的数据<br> 字符指针++ ，指向下个字符数据，指针存放的地址编号加 1<br> 整型指针++,指向下个整型数据，指针存放的地址编号加 4</p><h2 id="指针和数组元素之间的关系"><a href="#指针和数组元素之间的关系" class="headerlink" title="指针和数组元素之间的关系"></a>指针和数组元素之间的关系</h2><p>1、变量存放在内存中，有地址编号，咱们定义的数组，是多个相同类型的变量的集合，每个变量都占内存空间，都有地址编号,指针变量当然可以存放数组元素的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//int *p =&amp;a[0];</span></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=&amp;a[<span class="number">0</span>];<span class="comment">//指针变量 p 保存了数组 a 中第 0 个元素的地址，即 a[0]的地址</span></span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204165843495.png" alt="image-20231204165843495"></p><p>2、数组元素的引用方法<br> 方法 1: 数组名[下标]<br>  int a[5];<br>  a[2]=100;</p><p>​ 方法 2：指针名加下标<br>​  int a[5];<br>​  int *p;<br>​  p=a;<br>​  p[2]=100;//相当于 a[2]=100;<br>补充：c 语言规定：数组的名字就是数组的首地址，即第 0 个元素的地址，就是&amp;a[0]，是个常量。<br>注意：p 和 a 的不同，p 是指针变量，而 a 是个常量。所以可以用等号给 p 赋值，但不能给 a 赋值。<br>p=&amp;a[3];//正确<br>a=&amp;a[3];//错误</p><p>​ 方法 3：通过指针变量运算加取值的方法来引用数组的元素<br>​  int a[5];<br>​  int *p;<br>​  p=a;(p+2)=100;//也是可以的，相当于 a[2]=100<br>​  解释：p 是第 0 个元素的地址，p+2 是 a[2]这个元素的地址。<br>​  对第二个元素的地址取值，即 a[2]</p><p>​ 方法 4：通过数组名+取值的方法引用数组的元素<br>​  int a[5]; *(a+2)=100;//也是可以的，相当于 a[2]=100;<br>​  注意：a+2 是 a[2]的地址。这个地方并没有给 a 赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p=a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a[2]=%d\n&quot;</span>,a[<span class="number">2</span>]);<span class="comment">//a[2]=2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p[2]=%d\n&quot;</span>,p[<span class="number">2</span>]);<span class="comment">//p[2]=2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(p+2)%d\n&quot;</span>,*(p+<span class="number">2</span>));<span class="comment">//*(p+2)2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(a+2)%d\n&quot;</span>,*(a+<span class="number">2</span>));<span class="comment">//*(a+2)2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p=%p\n&quot;</span>,p);<span class="comment">//p=00B3FA44</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p+2=%p\n&quot;</span>,p+<span class="number">2</span>);<span class="comment">//p+2=00B3FA4C</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、指针的运算<br> 1：指针可以加一个整数,往下指几个它指向的变量，结果还是个地址<br> 前提：指针指向数组元素的时候，加一个整数才有意义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=a;</span><br><span class="line">p+<span class="number">2</span>;<span class="comment">//p 是 a[0]的地址，p+2 是&amp;a[2]</span></span><br></pre></td></tr></table></figure><p>假如 p 保存的地址编号是 2000 的话，p+2 代表的地址编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">5</span>]；</span><br><span class="line"><span class="type">char</span> *q;</span><br><span class="line">q=buf;</span><br><span class="line">q+<span class="number">2</span> <span class="comment">//相当于&amp;buf [2]</span></span><br></pre></td></tr></table></figure><p>假如：q 中存放的地址编号是 2000 的话，q+2 代表的地址编号是 2002</p><p>​ 2：两个相同类型指针可以比较大小<br>​ 前提：只有两个相同类型的指针指向同一个数组的元素的时候，比较大小才有意义<br>​ 指向前面元素的指针 小于 指向后面 元素的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> *p,*q,n;<span class="comment">//如果在一行上定义多个指针变量的，每个变量名前面加*</span></span><br><span class="line">    <span class="comment">//上边一行定义了两个指针 p 和 q ，定义了一个整型的变量 n</span></span><br><span class="line">    p=&amp;a[<span class="number">1</span>];</span><br><span class="line">    q=&amp;a[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">if</span>(p&lt;q)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;p&lt;q\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p&gt;q)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;p&gt;q\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;p == q\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是 p&lt;q</span></span><br></pre></td></tr></table></figure><p>​ 3.两个相同类型的指针可以做减法<br>​ 前提：必须是==两个相同类型的指针==指向==同一个数组的元素==的时候，做减法才有意义<br>​ 做减法的结果是，两个指针指向的中间有多少个元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> *p,*q;</span><br><span class="line">    p=&amp;a[<span class="number">0</span>];</span><br><span class="line">    q=&amp;a[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,q-p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果是 3</span></span><br></pre></td></tr></table></figure><p>​ 4：两个相同类型的指针可以相互赋值<br>​  注意:只有相同类型的指针才可以相互赋值（void <em>类型的除外）<br>​  intp;<br>​  int</em>q;<br>​  int a;<br>​  p=&a;//p 保存 a 的地址，p 指向了变量 a<br>​  q=p; //用 p 给 q 赋值，q 也保存了 a 的地址，指向 a<br>​  注意：如果类型不相同的指针要想相互赋值，必须进行强制类型转换</p><p><strong>注意：c 语言规定数组的名字，就是数组的首地址，就是数组第 0 个元素的地址，是个常量</strong><br> int *p;<br> int a[5];<br> p=a; p=&amp;a[0];这两种赋值方法是等价的</p><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>1、指针和数组的关系<br> 1：指针可以保存数组元素的地址<br> 2：可以定义一个数组，数组中有==若干个相同类型指针变量==，这个数组被称为指针数组 int <em>p[5]<br><em>*指针数组的概念：</em></em><br> 指针数组本身是个数组，是个指针数组，==是若干个相同类型的指针变量构成的集合==</p><p>2、指针数组的定义方法：<br> 类型说明符 <em>组名 [元素个数];<br> int p[5];//定义了一个整型的指针数组 p，有 5 个元素 p[0]~p[4], 每个元素都是 int \</em>类型的变量<br> int a;<br> p[0]=&a;<br> int b[10];<br> p[1]=&amp;b[5];<br> p[2]、*(p+2)是等价的，都是指针数组中的第 2 个元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *name[<span class="number">5</span>] = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;China&quot;</span>,<span class="string">&quot;beijing&quot;</span>,<span class="string">&quot;project&quot;</span>,<span class="string">&quot;Computer&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,name[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204171118634.png" alt="image-20231204171118634"></p><p>“hello”、”China””beijing” “project” “computer” 这 5 个字符串存放在文字常量区。<br>假设：<br> “hello “首地址是 0x00002000<br> “China”首地址是 0x00003000<br> “beijing”首地址是 0x00004000<br> “project”首地址是 0x00005000<br> “Computer”首地址是 0x00006000<br>则：<br> name[0]中存放内容为 0x00002000<br> name[1]中存放内容为 0x00003000<br> name[2]中存放内容为 0x00004000<br> name[3]中存放内容为 0x00005000<br> name[4]中存放内容为 0x00006000</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204171252715.png" alt="image-20231204171252715"></p><p>注意：name[0] name[1] name[2] name[3] name[4] 分别是 char * 类型的指针变量，分别存放一个地址编号。</p><p>3、指针数组的分类<br> 字符指针数组 char *p[10]、短整型指针数组、整型的指针数组、长整型的指针数组、float 型的指针数组、double 型的指针数组 结构体指针数组、函数指针数组</p><h2 id="指针的指针"><a href="#指针的指针" class="headerlink" title="指针的指针"></a>指针的指针</h2><p>指针的指针，即指针的地址，咱们定义一个指针变量本身指针变量占 4 个字节，指针变量也有地址编号。<br>例：<br>int a=0x12345678；<br>假如：a 的地址是 0x00002000<br>int <em>p;<br>p = &a;<br>则 p 中存放的是 a 的地址编号即 0x00002000<br>因为 p 也占 4 个自己内存，也有它自己的地址编号，及指针变量的地址，即指针的指针。<br>假如：指针变量 p 的地址编号是 0x00003000，这个地址编号就是指针的地址<br>我们定义一个变量存放 p 的地址编号，这个变量就是指针的指针<br>int \</em>*q;<br>q=&p;//q 保存了 p 的地址，也可以说 q 指向了 p<br>则 q 里存放的就是 0x00003000<em>*<br>int \</em>**m;<br>m=&q;</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204172000795.png" alt="image-20231204172000795"></p><p>p q m 都是指针变量，都占 4 个字节，都存放地址编号，只不过类型不一样而已</p><h2 id="字符串和指针"><a href="#字符串和指针" class="headerlink" title="字符串和指针"></a>字符串和指针</h2><p><strong>字符串的概念：</strong><br> 字符串就是以’\0’结尾的若干的字符的集合：比如”helloworld”。<br>字符串的地址，是第一个字符的地址。如：字符串”helloworld”的地址，其实是字符串中字符’h’的地址。<br>我们可以定义一个字符指针变量保存字符串的地址,比如：char <em>s =”helloworld”;<br><em>*字符串的存储形式： 数组、文字常量区、堆</em></em><br> 1、 字符串存放在数组中<br>  其实就是在内存（栈、静态全局区）中开辟了一段空间存放字符串。<br>  char string[100] = “I love C!”<br> 定义了一个字符数组 string,用来存放多个字符，并且用”I love C!”给 string 数组初始化，字符串”I love C！”存放在 string 中。</p><p>​ 注：<br>​  普通全局数组，内存分配在静态全局区<br>​  普通局部数组，内存分配在栈区。<br>​  静态数组（静态全局数组、静态局部数组），内存分配在静态全局区</p><p>​ 2、 字符串存放在文字常量区<br>​  在文字常量区开辟了一段空间存放字符串，将字符串的首地址付给指针变量。<br>​  char *str = “I love C!”<br>​  定义了一个指针变量 str,只能存放字符地址编号，<br>​  I love C！ 这个字符串中的字符不是存放在 str 指针变量中。<br>​  str 只是存放了字符 I 的地址编号，”I love C！”存放在文字常量区</p><p>​ 3、 字符串存放在堆区<br>​  使用 malloc 等函数在堆区申请空间，将字符串拷贝到堆区。<br>​  char *str =(char*)malloc(10);//动态申请了 10 个字节的存储空间，<br>​  首地址给 str 赋值。<br>​  strcpy(str,”I love C”)；//将字符串”Ｉlove C!”拷贝到 str</p><p><strong>字符串的可修改性：</strong></p><p>​ 字符串内容是否可以修改，取决于字符串存放在哪里</p><ol><li>存放在数组中的字符串的内容是可修改的<br> char str[100]=”I love C!”;<br> str[0]=‘y’;//正确可以修改的<br> 注：数组没有用 const 修饰</li><li><p>文字常量区里的内容是不可修改的<br> char *str=”I love C!”;str =’y’;//错误，I 存放在文字常量区，不可修改<br> 注：</p><p>1、str 指向文字常量区的时候，它指向的内存的内容不可被修改。<br>2、str 是指针变量可以指向别的地方，即可以给 str 重新赋值，让它指向别的地方。</p></li><li><p>堆区的内容是可以修改的<br> char *str =(char*)malloc(10);<br> strcpy(str,”I love C”);<br> *str=’y’;//正确，可以，因为堆区内容是可修改的<br> 注：</p><p>1、str 指向堆区的时候，str 指向的内存内容是可以被修改的。<br>2、str 是指针变量，也可以指向别的地方。即可以给 str 重新赋值，让它指向别的地方</p></li></ol><p>注意：str 指针指向的内存能不能被修改，要看 str 指向哪里。<br>str 指向文字常量区的时候，内存里的内容不可修改<br>str 指向数组（非 const 修饰）、堆区的时候，它指向内存的内容是可以修改</p><p><strong>初始化：</strong><br> 1.字符数组初始化：<br>  char buf_aver[20]=”hello world”;</p><p>​ 2.指针指向文字常量区，初始化：<br>​  char *buf_point=”hello world”;</p><p>​ 3.指针指向堆区，堆区存放字符串。<br>​  不能初始化，只能先给指针赋值，让指针指向堆区，再使用 strcpy、scanf 等方法把字符串拷贝到堆区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *buf_heap;</span><br><span class="line">buf_heap=(<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(buf_heap,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf_heap);</span><br></pre></td></tr></table></figure><p><strong>使用时赋值</strong></p><ol><li><p>字符数组：使用 scanf 或者 strcp</p><p>char buf[20]=”hello world” buf=”hello kitty”; 错误,因为字符数组的名字是个常量,不能用等号给常量赋值。<br>strcpy(buf,”hello kitty”); 正确，数组中的内容是可以修改的<br>scanf(“%s”,buf); 正确，数组中的内容是可以修改的</p></li><li><p>指针指向文字常量区<br> char *buf_point = “hello world”;<br> 1)buf_point=”hello kitty”; 正确,buf_point 指向另一个字符串<br> 2)strcpy(buf_point,”hello kitty”); 错误，这种情况，buf_point 指向的是文字常量区，内容只读。<br> 当指针指向文字常量区的时候，不能通过指针修改文字常量区的内容。</p></li><li>指针指向堆区，堆区存放字符串<br> char *buf_heap;<br> buf_heap=(char)malloc(15);<br> strcpy(buf_heap,”hello world”);<br> scanf(“%s”,buf_heap);</li></ol><p><strong>字符串和指针总结：</strong></p><p>1、指针可以指向文字常量区<br> 1）指针指向的文字常量区的内容不可以修改<br> 2）指针的指向可以改变，即可以给指针变量重新赋值，指针变量指向别的地方。</p><p>2、指针可以指向堆区<br> 1）指针指向的堆区的内容可以修改。<br> 2）指针的指向可以改变，即可以给指针变量重新赋值，指针变量指向别的地方。</p><p>3、指针也可以指向数组（非 const 修饰）<br> 例：<br>  char buf[20]=”hello world”;<br>  char *str=buf;<br> 这种情况下<br>  1.可以修改 buf 数组的内容。<br>  2.可以通过 str 修改 str 指向的内存的内容，即数组 buf 的内容<br>  3.不能给 buf 赋值 buf=”hello kitty”；错误的。<br>  4.可以给 str 赋值，及 str 指向别处。 str=”hello kitty”</p><h2 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h2><p><strong>1、二维数组</strong><br> 二维数组，有行，有列。二维数组可以看成有多个一维数组构成的，是多个一维数组的集合，可以认<br>为二维数组的每一个元素是个一维数组。</p><p>例：</p><p>​ int a[3][5];<br>​ 定义了一个 3 行 5 列的一个二维数组。<br>​ 可以认为二维数组 a 由 3 个一维数组构成，每个元素是一个一维数组。<br>回顾：<br>数组的名字是数组的首地址，是第 0 个元素的地址，是个常量，数组名字加 1 指向下个元素<br>二维数组 a 中 ，a+1 指向下个元素，即下一个一维数组，即下一行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">int</span> a[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%p\n&quot;</span>,a);<span class="comment">//a=006FF8B8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+1=%p\n&quot;</span>,a+<span class="number">1</span>);<span class="comment">//a+1=006FF8CC a + 1 跳 5 个整型即 20 个字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、数组指针的概念：</strong><br> 本身是个指针，指向一个数组，加 1 跳一个数组，即指向下个数组。</p><p><strong>3、数组指针的定义方法：</strong><br> 指向的数组的类型（<em>指针变量名）[指向的数组的元素个数]<br> int [\</em>p](5);//定义了一个数组指针变量 p，p 指向的是整型的有 5 个元素的数组<br> p+1 往下指 5 个整型，跳过一个有 5 个整型元素的数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">5</span>];<span class="comment">//定义了一个 3 行 5 列的一个二维数组</span></span><br><span class="line">    <span class="type">int</span>(*p)[<span class="number">5</span>];<span class="comment">//定义一个数组指针变量 p，p+1 跳一个有 5 个元素的整型数组</span></span><br><span class="line"> p = a;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;a = %p\n&quot;</span>, a);<span class="comment">//a 是一维数组指针，指向第 0 个一维数组，即第 0 行</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;*a = %p\n&quot;</span>, *a);<span class="comment">//*a 是 第 0 行第 0 个元素的地址，即 &amp;a[0][0]</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;a + 1 = %p\n&quot;</span>, a + <span class="number">1</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;*a + 1 = %p\n&quot;</span>, *a + <span class="number">1</span>);<span class="comment">//*a +1 是第 0 行第 1 个元的地址，即&amp;a[0][1]</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;p = %p\n&quot;</span>, p);<span class="comment">//p 是一维数组指针，指向第 0 个一维数组，即第 0 行</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;*p = %p\n&quot;</span>, *p);<span class="comment">//*p 是第 0 行第 0 个元素的地址，即 &amp;a[0][0]</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;p + 1 = %p\n&quot;</span>, p + <span class="number">1</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;*p + 1 = %p\n&quot;</span>, *p + <span class="number">1</span>);<span class="comment">//*p +1 是第 0 行第 1 个元的地址，即&amp;a[0][1]</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;&amp;a[0][0] = %p\n&quot;</span>, &amp;a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、各种数组指针的定义：<br> (1)、一维数组指针，加 1 后指向下个一维数组<br>  int<a href="5">*p</a> ; //配合每行有 5 个 int 型元素的二维数组来用<br>  int a[3][5]<br>  int b[4][5]<br>  int c[5][5]<br>  int d[6][5]<br>  ……<br>  p=a;<br>  p=b;<br>  p=c;<br>  p=d;<br>  都是可以的~~~~<br> (2)、二维数组指针，加 1 后指向下个二维数组<br>  int(*p)[4][5];<br>  配合三维数组来用，三维数组中由若干个 4 行 5 列二维数组构成<br>  int a[3][4][5];<br>  int b[4][4][5];<br>  int c[5][4][5];<br>  int d[6][4][5];<br>  这些三维数组，有个共同的特点，都是有若干个 4 行 5 的二维数组构成。<br>  p=a;<br>  p=b;<br>  p=c;<br>  p=d;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%p\n&quot;</span>,a);<span class="comment">//a=009DF65C</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+1=%p\n&quot;</span>,a+<span class="number">1</span>);<span class="comment">//a+1=009DF6AC a 和 a+1 地址编号相差 80 个字节</span></span><br><span class="line">    <span class="comment">//验证了 a+1 跳一个 4 行 5 列的一个二维数组</span></span><br><span class="line">    <span class="type">int</span>(*p)[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line">    p=a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p=%p\n&quot;</span>,p);<span class="comment">//p=009DF65C</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p+1=%p\n&quot;</span>,p+<span class="number">1</span>);<span class="comment">//p+1=009DF6AC p 和 p+1 地址编号相差也 80 个字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、三维数组指针，加 1 后指向下个三维数组<br> int(*p)[4][5][6];<br> p+1 跳一个三维数组；<br> 什么样的三维数组啊？<br> 由 4 个 5 行 6 列的二维数组构成的三维数组<br> 配合：<br>  int a[7][4][5][6];</p><p>6、四维数组指针，加 1 后指向下个四维数组，以此类推。。。。</p><p>7、注意：<br> 容易混淆的概念：<br>  指针数组：是个数组，有若干个相同类型的指针构成的集合<br>   int *p[10];<br>   数组 p 有 10 个 int *类型的指针变量构成，分别是 p[0] ~p[9]<br>  数组指针：本身是个指针，指向一个数组，加 1 跳一个数组<br>   int <a href="10">*p</a>;<br>   P 是个指针，p 是个数组指针，p 加 1 指向下个数组，跳 10 个整形</p><p>​  指针的指针：<br>​   int <em>*p;//p 是指针的指针<br>​   int </em>q;<br>​   p=&q;</p><p>8、数组名字取地址：变成 数组指针<br> 一维数组名字取地址，变成一维数组指针，即加 1 跳一个一维数组<br>  int a[10];<br> a+1 跳一个整型元素，是 a[1]的地址<br> a 和 a+1 相差一个元素，4 个字节</p><p>​ &amp;a 就变成了一个一维数组指针,是 int<a href="10">*p</a>类型的。<br>​ (&amp;a) +1 和&amp;a 相差一个数组即 10 个元素即 40 个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%p\n&quot;</span>,a);<span class="comment">//a=00F3FE50</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+1=%p\n&quot;</span>,a+<span class="number">1</span>);<span class="comment">//a+1=00F3FE54</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a=%p\n&quot;</span>,&amp;a);<span class="comment">//&amp;a=00F3FE50</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a +1=%p\n&quot;</span>,&amp;a+<span class="number">1</span>);<span class="comment">//&amp;a +1=00F3FE78</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a 是个 int *类型的指针，是 a[0]的地址。<br>&amp;a 变成了数组指针，加 1 跳一个 10 个元素的整型一维数组<br>在运行程序时，大家会发现 a 和&amp;a 所代表的地址编号是一样的，即他们指向同一个存储单元，但是 a 和&amp;a 的指针类型不同</p><p>9、数组名字和指针变量的区别：<br> int a[5];<br> int *p;<br> p=a;<br>相同点：<br> a 是数组的名字，是 a[0]的地址，p=a 即 p 保存了 a[0]的地址，即 a 和 p 都指向 a[0]，所以在引用数组元素的时候，a 和 p 等价<br>引用数组元素回顾：<br> a[2]、*(a+2)、p[2]、*(p+2) 都是对数组 a 中 a[2]元素的引用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    p = a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a[2] = %d\n&quot;</span>,a[<span class="number">2</span>]);<span class="comment">//a[2] = 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; * (a + 2) = % d\n&quot;</span>,*(a + <span class="number">2</span>));<span class="comment">// * (a + 2) =  2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p[2] = %d\n&quot;</span>, p[<span class="number">2</span>]);<span class="comment">//p[2] = 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; * (p + 2) = % d\n&quot;</span>, *(p + <span class="number">2</span>));<span class="comment">//* (p + 2) =  2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同点：<br> 1、 a 是常量、p 是变量<br>  可以用等号’=’给 p 赋值，但是不能用等号给 a 赋值<br> 2、 对 a 取地址，和对 p 取地址结果不同<br>  因为 a 是数组的名字，所以对 a 取地址结果为数组指针。<br>  p 是个指针变量，所以对 p 取地址（&amp;p）结果为指针的指针。<br>  例：int a[5]={0,1,2,3,4};<br>   int *p=a;<br>  假如 a[0]的地址为 0x00002000,p的地址为 0x00003000</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204202456015.png" alt="image-20231204202456015"></p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231204202517532.png" alt="image-20231204202517532"></p><p>1、&amp;p 是指针的指针，为 int **类型，结果为 0x00003000，&amp;p +1，往后指向一个 int<em>型的指<br>针，地址编号差 4<br>2、&amp;a 结果是数组指针，为 int[</em>](5)类型，结果还是 0x00002000，&amp;a +1 ,往后指一个数组（有 5<br>个整型元素的一维数组），地址编号差 20</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p=a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %p\n&quot;</span>,a);<span class="comment">//a = 00EFFA54</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a = %p\n&quot;</span>,&amp;a);<span class="comment">//&amp;a = 00EFFA54</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a +1 = %p\n&quot;</span>,&amp;a + <span class="number">1</span>);<span class="comment">//&amp;a +1 = 00EFFA68</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p = %p\n&quot;</span>,p);<span class="comment">//p = 00EFFA54</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;p = %p\n&quot;</span>,&amp;p);<span class="comment">//&amp;p = 00EFFA48</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;p + 1 = %p\n&quot;</span>,&amp;p + <span class="number">1</span>);<span class="comment">//&amp;p + 1 = 00EFFA4C</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、数组指针取<em><br> 数组指针取</em> ，并不是取值的意思，而是指针的类型发生变化：<br> 一维数组指针取<em> ，结果为它指向的一维数组第 0 个元素的地址，它们还是指向同一个地方。<br> 二维数组指针取\</em>，结果为一维数组指针，它们还是指向同一个地方。<br> 三维数组指针取*，结果为二维数组指针，它们还是指向同一个地方。<br> 多维以此类推</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span>(*p)[<span class="number">5</span>];</span><br><span class="line">    p = a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%p\n&quot;</span>, a);<span class="comment">//a 是一维数组指针，指向第 0 个一维数组，即第 0 行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*a=%p\n&quot;</span>, *a);<span class="comment">//*a 是 第 0 行第 0 个元素的地址，即 &amp;a[0][0]</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*a +1=%p\n&quot;</span>, *a + <span class="number">1</span>);<span class="comment">//*a +1 是第 0 行第 1 个元的地址，即&amp;a[0][1]</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p=%p\n&quot;</span>,p);<span class="comment">//p 是一维数组指针，指向第 0 个一维数组，即第 0 行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p=%p\n&quot;</span>,*p);<span class="comment">//*p 是第 0 行第 0 个元素的地址，即 &amp;a[0][0]</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p +1=%p\n&quot;</span>, *p + <span class="number">1</span>);<span class="comment">//*p +1 是第 0 行第 1 个元的地址，即&amp;a[0][1]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针和函数的关系"><a href="#指针和函数的关系" class="headerlink" title="指针和函数的关系"></a>指针和函数的关系</h2><h3 id="指针作为函数的参数"><a href="#指针作为函数的参数" class="headerlink" title="指针作为函数的参数"></a>指针作为函数的参数</h3><p>咱们可以给一个函数传一个 整型、字符型、浮点型的数据，也可以给函数传一个地址。<br>例：<br> int num;<br> scanf(“%d”,&amp;num);<br><strong>函数传参：</strong><br> (1)、传数值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    swap(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a,b);<span class="comment">//a=10 b=20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实参：调用函数时传的参数。<br>形参：定义被调函数时，函数名后边括号里的数据<br>结论：给被调函数传数值，只能改变被调函数形参的值，不能改变主调函数实参的值</p><p>​ (2)、传地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *p1,<span class="type">int</span> *p2)</span>&#123;</span><br><span class="line"> <span class="type">int</span> temp;</span><br><span class="line"> temp= *p1;</span><br><span class="line">    *p1=*p2;<span class="comment">// p2 指向的变量的值，给 p1 指向的变量赋值</span></span><br><span class="line"> *p2=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line"> swap(&amp;a,&amp;b);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a,b);<span class="comment">//结果为 a=20 b=10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论：调用函数的时候传变量的地址，在被调函数中通过*+地址来改变主调函数中的变量的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *p1,<span class="type">int</span> *p2)</span><span class="comment">//&amp;a &amp;b</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p=p1;</span><br><span class="line">    p1=p2;<span class="comment">//p1 =&amp;b 让 p1 指向 main 中的 b</span></span><br><span class="line">    p2=p;<span class="comment">//让 p2 指向 main 函数中 a</span></span><br><span class="line">&#125;<span class="comment">//此函数中改变的是 p1 和 p2 的指向，并没有给 main 中的 a 和 b 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    swap(&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a,b);<span class="comment">//结果为 a=10 b=20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：要想改变主调函数中变量的值，必须传变量的地址，而且还得通过*+地址 去赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span> *p)</span>&#123;</span><br><span class="line"> p=<span class="string">&quot;hello kitty&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *p=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    fun(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);<span class="comment">//结果为： hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案分析：<br> 在 fun 中改变的是 fun 函数中的局部变量 p，并没有改变 main 函数中的变量 p，所以 main 函数中的，<br>变量 p 还是指向 hello world</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span> **q)</span>&#123;</span><br><span class="line"> *q=<span class="string">&quot;hello kitty&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">char</span> *p=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"> fun(&amp;p);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);<span class="comment">//结果为：hello kitty</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ (3)、给函数传数组：<br>​  给函数传数组的时候，没法一下将数组的内容作为整体传进去。<br>​  只能传数组名进去，数组名就是数组的首地址，即只能把数组的地址传进去。<br>​  也就是说，只能传一个 4 个字节大小的地址编号进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传一维数组的地址</span></span><br><span class="line"><span class="comment">//void fun(int p[])//形式 1</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> *p)</span><span class="comment">//形式 2</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p[<span class="number">2</span>]);<span class="comment">//3</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(p+<span class="number">3</span>));<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    fun(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传二维数组的地址</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//void fun(int(*p)[4], int x, int y) &#123;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> p[][<span class="number">4</span>], <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="type">int</span> i, j;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;p[1][2] = %d\n&quot;</span>, p[<span class="number">1</span>][<span class="number">2</span>]);<span class="comment">//p[1][2] = 7</span></span><br><span class="line"> p[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;p[%d][%d] = %d\t&quot;</span>, i, j, p[i][j]);</span><br><span class="line">            <span class="comment">//p[0][0] = 1     p[0][1] = 100   p[0][2] = 3     p[0][3] = 4</span></span><br><span class="line">   <span class="comment">//p[1][0] = 5     p[1][1] = 6     p[1][2] = 7     p[1][3] = 8</span></span><br><span class="line">   <span class="comment">//p[2][0] = 9     p[2][1] = 10    p[2][2] = 11    p[2][3] = 12</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span> &#125; &#125;;</span><br><span class="line"> fun(a, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;a[0][1] = %d\n&quot;</span>, a[<span class="number">0</span>][<span class="number">1</span>]);<span class="comment">//a[0][1] = 100</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传指针数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span> **q)</span> <span class="comment">// char *q[]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,q[i]);</span><br><span class="line">    <span class="comment">//hello</span></span><br><span class="line"> <span class="comment">//world</span></span><br><span class="line"> <span class="comment">//kitty</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">char</span> *p[<span class="number">3</span>]=&#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;kitty&quot;</span>&#125;; <span class="comment">//p[0] p[1] p[2] char *</span></span><br><span class="line"> fun(p);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针作为函数的返回值"><a href="#指针作为函数的返回值" class="headerlink" title="指针作为函数的返回值"></a>指针作为函数的返回值</h3><p>一个函数可以返回整型数据、字符数据、浮点型的数据，也可以返回一个指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">char</span> str[<span class="number">100</span>]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="comment">//返回一个局部变量可能会出现异常,因为局部变量在函数结束后会释放内存</span></span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">char</span> *p;</span><br><span class="line">    <span class="comment">//返回地址的时候，地址指向的内存的内容不能释放,</span></span><br><span class="line">    <span class="comment">//如果返回的指针指向的内容已经被释放了，返回这个地址，也没有意义了。</span></span><br><span class="line"> p=fun();</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);<span class="comment">//hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回静态局部数组的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//静态数组的内容，在函数结束后，亦然存在。</span></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> str[<span class="number">100</span>]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">    p=fun();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);<span class="comment">//hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回文字常量区的字符串的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//文字常量区的内容，一直存在。</span></span><br><span class="line"> <span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">char</span>* p;</span><br><span class="line"> p = fun();</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回堆内存的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//堆区的内容一直存在，直到 free 才释放</span></span><br><span class="line"> <span class="type">char</span>* str;</span><br><span class="line"> str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"> strcpy_s(str,<span class="number">100</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">char</span>* p;</span><br><span class="line"> p = fun();</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：返回的地址，地址指向的内存的内容得存在，返回的地址才有意义。</p></blockquote><h3 id="指针保存函数的地址（函数指针）"><a href="#指针保存函数的地址（函数指针）" class="headerlink" title="指针保存函数的地址（函数指针）"></a>指针保存函数的地址（函数指针）</h3><p><strong>1、函数指针的概念：</strong><br> 定义的函数，在运行程序的时候，会将函数的指令加载到内存的代码段。所以函数也有起始地址。<br> c 语言规定：函数的名字就是函数的首地址，即函数的入口地址&lt;咱们就可以定义一个指针变量，来存放函数的地址。这个指针变量就是函数指针变量。</p><p><strong>2、函数指针的用处：</strong><br>函数指针用来保存函数的入口地址。<br>在项目开发中，我们经常需要编写或者调用带函数指针参数的函数。<br>比如 Linux 系统中创建多线程的函数，它有个参数就是函数指针，接收线程函数的入口地址，即创建线程<br>成功后，新的任务执行线程函数。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pthread_create(pthread_t *thread, <span class="keyword">const</span> pthread_attr_t *attr, void *<span class="comment">(*start_routine) (void *)</span>, void *arg)</span><br></pre></td></tr></table></figure><p><strong>3、函数指针变量的定义</strong><br> 返回值类型(*函数指针变量名)(形参列表);<br> int(*p)(int,int);//定义了一个函数指针变量 p,p 指向的函数必须有一个整型的返回值，有两个整型参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用这个 p 存放这类函数的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = max;</span><br><span class="line">p = min;</span><br></pre></td></tr></table></figure><p><strong>4、调用函数的方法</strong><br> 1.通过函数的名字去调函数（最常用的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">int</span> num;</span><br><span class="line"> num=max(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 2.可以通过函数指针变量去调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"> <span class="type">int</span> (*p)(<span class="type">int</span> ,<span class="type">int</span>);</span><br><span class="line"> p = max;</span><br><span class="line"> num=(*p)(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、函数指针数组</strong><br> 概念：由若干个相同类型的函数指针变量构成的集合，在内存中连续的顺序存储。函数指针数组是个数组，它的每个元素都是一个函数指针变量。<br> 函数指针数组的定义：<br>  类型名(*数组名[元素个数])（形参列表）<br>  int(*p[5])(int,int);<br> 定义了一个函数指针数组，数组名是 p，有 5 个元素 p[0] ~p[4]，每个元素都是函数指针变量，每个函数指针变量指向的函数，必须有整型的返回值，两个整型参数。<br>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="type">int</span> temp;</span><br><span class="line"> <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">  temp = x;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  temp = y;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="type">int</span> temp;</span><br><span class="line"> <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">  temp = x;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  temp = y;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mux</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">int</span>(*p[<span class="number">5</span>])(<span class="type">int</span>,<span class="type">int</span>) = &#123;max,min,add,sub,mux&#125;;</span><br><span class="line"> <span class="type">int</span> num;</span><br><span class="line"> num = (*p[<span class="number">2</span>])(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//num = 30</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、函数指针应用举例</strong><br>给函数传参</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="type">int</span> temp;</span><br><span class="line"> <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">  temp = x;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  temp = y;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="type">int</span> temp;</span><br><span class="line"> <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">  temp = x;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  temp = y;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mux</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span> (*p)(<span class="type">int</span>, <span class="type">int</span>), <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"> <span class="type">int</span> ret;</span><br><span class="line"> ret = (*p)(x, y);</span><br><span class="line"> <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">int</span> num;</span><br><span class="line"> num = process(add, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//num = 30</span></span><br><span class="line"></span><br><span class="line"> num = process(mux, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">//num = 200</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经常容易混淆的指针概念"><a href="#经常容易混淆的指针概念" class="headerlink" title="经常容易混淆的指针概念"></a>经常容易混淆的指针概念</h2><p>第一组：<br> 1、int *a[10];<br>  这是个指针数组，数组 a 中有 10 个整型的指针变量<br>  a[0]~a[9] ，每个元素都是 int *类型的指针变量</p><p>​ 2、int <a href="10">*a</a>;<br>​  数组指针变量，它是个指针变量。它占 4 个字节，存地址编号。<br>​  它指向一个数组，它加 1 的话，指向下个数组。</p><p>​ 3、 int **p;<br>​  这个是个指针的指针，保存指针变量的地址。<br>​  它经常用在保存指针的地址：<br>​  常见用法 1：<br>​   int **p<br>​   int <em>q;<br>​   p=&q;<br>​  常见用法 2：<br>​   int *</em>p;<br>​   intq[10];</p><p>分析：q 是指针数组的名字，是指针数组的首地址，是 q[0]的地址。q[0]是个 int <em>类型的指针。 所以 q[0]指针变量的地址，是 int \</em>*类型的</p><p>p=&amp;q[0]; 等价于 p=q;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span>**p)</span>&#123;</span><br><span class="line"> <span class="type">int</span> i;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p[i]);<span class="comment">//*（p+i）</span></span><br><span class="line">        <span class="comment">//hello</span></span><br><span class="line">  <span class="comment">//world</span></span><br><span class="line">  <span class="comment">//China</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">char</span> *q[<span class="number">3</span>]=&#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;China&quot;</span>&#125;;</span><br><span class="line"> fun(q);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二组：<br> 1、int *f(void);<br> 注意：*f 没有用括号括起来<br> 它是个函数的声明，声明的这个函数返回值为 int <em>类型的。<br> 2、int (\</em>f)(void);<br> 注意*f 用括号括起来了，*修饰 f 说明，f 是个指针变量。<br> f 是个函数指针变量，存放函数的地址，它指向的函数，<br> 必须有一个 int 型的返回值，没有参数。</p><h2 id="特殊指针"><a href="#特殊指针" class="headerlink" title="特殊指针"></a>特殊指针</h2><p>1、空类型的指针（void <em>）<br> char </em> 类型的指针变量，只能保存 char 型的数据的地址<br> int <em> 类型的指针变量，只能保存 int 型的数据的地址<br> float</em> 类型的指针变量，只能保存 float 型的数据的地址<br> void * 难道是指向 void 型的数据吗？<br> 不是，因为没有 void 类型的变量</p><p>​ void<em>用指针，任何类型的地址都可以给 void</em>类型的指针变量赋值。<br>​ int <em>p<br>​ void </em>q;<br>​ q=p 是可以的，不用强制类型转换<br>举例：<br>​ 有个函数叫 memset<br>​ void <em> memset(void \</em>s,int c,size_t n);<br>​ 这个函数的功能是将 s 指向的内存前 n 个字节，全部赋值为 c。<br>​ memset 可以设置字符数组、整型数组、浮点型数组的内容，所以第一个参数，就必须是个通用指针<br>​ 它的返回值是 s 指向的内存的首地址，可能是不同类型的地址。所以返回值也得是通用指针<br>​ 注意：void*类型的指针变量，也是个指针变量，在 32 为系统下，占 4 个字节</p><p>2、NULL<br> 空指针:<br> char *p=NULL;<br> 咱们可以认为 p 哪里都不指向，也可以认为 p 指向内存编号为 0 的存储单位。<br> 在 p 的四个字节中，存放的是 0x00 00 00 00<br> 一般 NULL 用在给指针变量初始化。</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言的数据类型及语句</title>
      <link href="/posts/eb04eb77.html"/>
      <url>/posts/eb04eb77.html</url>
      
        <content type="html"><![CDATA[<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="数据类型相关的关键字"><a href="#数据类型相关的关键字" class="headerlink" title="数据类型相关的关键字"></a>数据类型相关的关键字</h3><p>用于定义变量或者类型</p><p>类型 变量名；</p><p>char 、short、int 、long 、 float、double、 struct、union、enum 、signed、unsigned、void</p><p>1、 ==char 字符型== ，用 char 定义的变量是字符型变量，占 1 个字节</p><p>char ch=’a’; =为赋值号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch1= ‘<span class="number">1</span>’; <span class="comment">//正确</span></span><br><span class="line"><span class="type">char</span> ch2 = ‘<span class="number">1234</span>’;<span class="comment">// 错误的</span></span><br></pre></td></tr></table></figure><p>2、 ==short 短整型== ,使用 short 定义的变量是短整型变量，占 2 个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> a=<span class="number">11</span>; <span class="comment">//-32768 --- 32767</span></span><br></pre></td></tr></table></figure><p>3、 ==int 整型== ，用 int 定义的变量是整型变量，在 32 位系统下占 4 个字节，在 16 平台下占 2 个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">44</span>; <span class="comment">//-20 亿---20 亿</span></span><br></pre></td></tr></table></figure><p>4、 ==long 长整型== 用 long 定义的变量是长整型的，在 32 为系统下占 4 个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">int</span> a=<span class="number">66</span>;</span><br></pre></td></tr></table></figure><p>5、 ==float 单浮点型 （实数）==，用 float 定义的变量是单浮点型的实数，占 4 个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> b=<span class="number">3.8f</span>;</span><br></pre></td></tr></table></figure><p>6、 ==double  双浮点型 （实数）==，用 double 定义的变量是双浮点型的实数，占 8 个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> b=<span class="number">3.8</span>;</span><br></pre></td></tr></table></figure><p>7、 struct 这个关键字是与结构体类型相关的关键字，可以用它来定义结构体类型</p><p>8、 union 这个关键字是与共用体（联合体）相关的关键字</p><p>9、 enum 与枚举类型相关的关键字</p><p>10、signed 有符号(正负)的意思</p><p>​ 在定义 char  、整型（short、int、long）数据的时候用 signed 修饰，代表咱们定义的数据是有符号的，可以保存正数，也可以保存负数</p><p>例 ：signed int a=10;</p><blockquote><p>注意：默认情况下 signed  可以省略 即 int a=-10;//默认 a 就是有符号类型的数据</p></blockquote><p>11、unsigned 无符号的意思</p><p>​ 在定义 char、整型（short、int、long） 数据的时候用 unsigned 修饰，代表咱们定义的数据是无符号类型的数据只能保存正数和 0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a=<span class="number">101</span>; </span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a=<span class="number">-101</span></span><br></pre></td></tr></table></figure><h4 id="扩展：内存存储"><a href="#扩展：内存存储" class="headerlink" title="扩展：内存存储"></a><strong>扩展：内存存储</strong></h4><p>char ch= ‘a’; //占 1 个字节，存储的是 97</p><p>0110 0001</p><p>字节：内存的基本单位，8 位为 1 个字节</p><p>计算机存储时，只能存储 1 和 0 的二进制组合，1 和 0 都分别占 1 位字符型数据在内存中存储的不是字符本身，而是存储其 AsciI 码</p><p>整型变量存储的是其值的二进制</p><p>unsigned int a = 97;</p><h4 id="扩展：正数和负数在内存中到底是怎么存的"><a href="#扩展：正数和负数在内存中到底是怎么存的" class="headerlink" title="扩展：正数和负数在内存中到底是怎么存的"></a><strong>扩展：正数和负数在内存中到底是怎么存的</strong></h4><p> 原码、反码、补码</p><blockquote><p>规定：正数的原码反码和补码相同 5</p></blockquote><ul><li>原码：最高位为符号位 最高位为 1 代表是个负数</li></ul><p>​ 5的二进制：0000 0101</p><p>​ -5的二进制：1000 0101</p><ul><li>反码：对原码除了符号位 其他位取反</li></ul><p>​ 5的反码：1111 1010</p><ul><li>补码：反码 +1</li></ul><p>​ 即反码的最后一位加1：1111 1011</p><blockquote><p>注意：负数在内存中是以补码形式存放的</p></blockquote><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line"> <span class="type">int</span> a=<span class="number">-1</span>; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//1000</span> <span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0001</span>  <span class="string">原码</span></span><br><span class="line"><span class="string">//1111</span> <span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1110</span>  <span class="string">反码</span></span><br><span class="line"><span class="string">//1111</span> <span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111</span>  <span class="string">补码</span></span><br></pre></td></tr></table></figure><p>12、void 空类型的关键字</p><p>char、int 、float  都可以定义变量</p><p>void 不能定义变量，没有 void 类型的变量</p><p>void 是用来修饰函数的参数或者返回值，代表函数没有参数或没有返回值例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代表 fun 函数没有返回值，fun 函数没有参数</p><h3 id="存储相关关键字"><a href="#存储相关关键字" class="headerlink" title="存储相关关键字"></a>存储相关关键字</h3><p>register、static、const、auto、extern</p><p>1、==register== 是 寄存器的意思，用 register 修饰的变量是寄存器变量，</p><p>即：在编译的时候告诉编译器这个变量是寄存器变量，尽量将其存储空间分配在寄存器中。   注意：</p><ol><li>定义的变量不一定真的存放在寄存器中。</li><li>cpu 取数据的时候去寄存器中拿数据比去内存中拿数据要快</li><li>因为寄存器比较宝贵，所以不能定义寄存器数组</li><li>register 只能修饰 字符型及整型的，不能修饰浮点型</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="type">char</span> ch; </span><br><span class="line"><span class="keyword">register</span> <span class="type">short</span> <span class="type">int</span> b; </span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> c;</span><br><span class="line"><span class="keyword">register</span> <span class="type">float</span> d;<span class="comment">//错误的</span></span><br></pre></td></tr></table></figure><ol><li>因为 register 修饰的变量可能存放在寄存器中不存放在内存中，所以不能对寄存器变量取地址。因为只有存放在内存中的数据才有地址</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="type">int</span> a; </span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=&amp;a;<span class="comment">//错误的，a 可能没有地址</span></span><br></pre></td></tr></table></figure><p>2、==static== 是静态的意思<br> static 可以修饰全局变量、局部变量、函数这个以后的课程中重点讲解<br>3、==const== 是常量的意思<br> 用 const 修饰的变量是只读的，不能修改它的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a=<span class="number">101</span>;<span class="comment">//在定义 a 的时候用 const 修饰，并赋初值为 101</span></span><br><span class="line">a=<span class="number">111</span>;<span class="comment">//错误的</span></span><br></pre></td></tr></table></figure><p>从此以后，就不能再给 a 赋值了，const 可以修饰指针</p><p>4、==auto== auto int a;和 int a 是等价的，auto 关键字现在基本不用</p><p>5、==extern== 是外部的意思，一般用于函数和全局变量的声明</p><h3 id="控制语句相关的关键字"><a href="#控制语句相关的关键字" class="headerlink" title="控制语句相关的关键字"></a>控制语句相关的关键字</h3><p>if、else、break、continue、for、while、do、switch、case、goto、default</p><h3 id="其他关键字"><a href="#其他关键字" class="headerlink" title="其他关键字"></a>其他关键字</h3><p>sizeof、typedef、volatile</p><ol><li><p>sizeof</p><p>使用来测变量、数组的占用存储空间的大小（字节数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">num=<span class="keyword">sizeof</span>(a);</span><br></pre></td></tr></table></figure></li><li><p>typedef</p><p>重命名相关的关键字</p><p><strong>typedef 起别名的方法：</strong></p><ol><li>用想起名的类型定义一个变量</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> a;</span><br></pre></td></tr></table></figure><ol><li>用新的类型名替代变量名</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> INT16;</span><br></pre></td></tr></table></figure><ol><li>在最前面加 typedef</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">short</span> <span class="type">int</span> INT16;</span><br></pre></td></tr></table></figure><ol><li>就可以用新的类型名定义变量了</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INT16 b;和 <span class="type">short</span> <span class="type">int</span> b;<span class="comment">//是一个效果</span></span><br></pre></td></tr></table></figure></li><li><p>volatile</p></li></ol><p>易改变的意思</p><p>​ 用 volatile 定义的变量，是易改变的，即告诉 cpu 每次用 volatile 变量的时候，重新去内存中取保证用的是最新的值,而不是寄存器中的备份。<br>volatile 关键字现在较少适用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> a=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>命名规则：</strong><br> 在 c 语言中给变量和函数起名的时候，由字母、数字、下划线构成必须以字母或者下滑线开头，起名的时候要求见名知意</p><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a2;<span class="comment">//正确的</span></span><br><span class="line"><span class="type">int</span> a_2;<span class="comment">//正确的</span></span><br><span class="line"><span class="type">int</span> _b;<span class="comment">//正确的</span></span><br><span class="line"><span class="type">int</span> <span class="number">2b</span>;<span class="comment">// 错误的</span></span><br></pre></td></tr></table></figure><p><strong>C 语言的程序结构</strong></p><p>​ 一个完整的 C 语言程序，是由一个、且只能有一个 main()函数(又称主函数，必须有)和若干个其他函数结合而成（可选）<br>main 函数是程序的入口，即 程序从 main 函数开始执行</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>char、short int、int、long int、float、double</p><blockquote><p>扩展：常量和变量</p></blockquote><p>常量：在程序运行过程中，其值不可以改变的量例：100 ‘a’ “hello”</p><ul><li>整型 100，125，-100，0</li><li>实型 3.14 ， 0.125f，-3.789</li><li>字符型 ‘a’,‘b’,‘2’</li><li>字符串 “a”,“ab”，“1232”</li></ul><p>变量：其值可以改变的量被称为变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">100</span>; </span><br><span class="line">a=<span class="number">101</span>;</span><br></pre></td></tr></table></figure><p><strong>字符数据</strong></p><p>==字符常量：==<br> 直接常量：用单引号括起来，如：’a’、’b’、’0’等.<br> 转义字符：以反斜杠“\”开头，后跟一个或几个字符、如’\n’,’\t’等，分别代表换行、横向跳格. ‘\’表示的是\ ‘%%’ ‘\’’<br>==字符变量：==<br> 用 char 定义，每个字符变量被分配一个字节的内存空间字符值以 ASCII 码的形式存放在变量的内存单元中;<br>注：char a;<br> a = ‘x’;<br> a 变量中存放的是字符’x’的 ASCII :120<br> 即 a=120 跟 a=’x’在本质上是一致的.</p><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">char</span> a = <span class="string">&#x27;x&#x27;</span>; <span class="type">char</span> b = <span class="number">120</span>;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;a=%c\n&quot;</span>, a);<span class="comment">//a=x</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;b=%c\n&quot;</span>, b);<span class="comment">//b=x</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==字符串常量==<br> 是由双引号括起来的字符序列，如“CHINA”、”哈哈哈” “C program”，“$12.5”等都是合法的字符串常量.<br>==字符串常量与字符常量的不同==<br> ‘a’为字符常量，”a”为字符串常量<br> 每个字符串的结尾，编译器会自动的添加一个结束标志位’\0’， 即“a”包含两个字符‘a’和’\0’</p><p>==整型数据==<br> 整型常量:（按进制分）：<br> 十进制： 以正常数字 1-9 开头，如 457 789<br> 八进制： 以数字 0 开头，如 0123<br> 十 六 进 制 ： 以 0x 开 头 ， 如 0x1e a=10，b=11,c=12, d=13,e=14,f=15</p><p>==整型变量:==<br> 有/无符号短整型(un/signed) short(int) 2 个字节<br> 有/无符号基本整型(un/signed) int  4 个字节<br> 有/无符号长整型(un/signed) long (int) 4 个字节 (32 位处理器)</p><p>==实型数据(浮点型)==<br> <strong>实型常量</strong><br>  实型常量也称为实数或者浮点数<br> <strong>十进制形式:</strong><br>  由数字和小数点组成:0.0、0.12、5.0</p><p>​ <strong>指数形式：</strong><br>​  123e3 代表 123<em>10 的三次方<br>​  123e-3<br>​  不以 f 结尾的常量是 double 类型<br>​  以 f 结尾的常量(如 3.14f)是 float 类型<br>​ <em>*实型变量</em></em><br>​  单精度(float)和双精度(double)3.1415926753456<br>​  float 型: 占 4 字节，7 位有效数字,指数-37 到 38<br>​  3333.333 33<br>​  double 型:  占 8 字节，16 位有效数字,指数-307 到 308</p><h3 id="格式化输出字符"><a href="#格式化输出字符" class="headerlink" title="格式化输出字符"></a>格式化输出字符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">%d</th><th style="text-align:center">十进制有符号整数</th></tr></thead><tbody><tr><td style="text-align:center">%u</td><td style="text-align:center">十进制无符号整数</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">以十六进制表示的整数</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:center">以八进制表示的整数</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">float 型浮点数</td></tr><tr><td style="text-align:center">%lf</td><td style="text-align:center">double 型浮点数</td></tr><tr><td style="text-align:center">%e</td><td style="text-align:center">指数形式的浮点数</td></tr><tr><td style="text-align:center">%s</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">单个字符</td></tr><tr><td style="text-align:center">%p</td><td style="text-align:center">指针的值</td></tr></tbody></table></div><p><strong>特殊应用：</strong><br> %3d %03d %-3d %5.2f<br> %3d:要求宽度为 3 位，如果不足 3 位，前面空格补齐;如果足够 3 位，此语句无效<br> %03d：要求宽度为 3 位，如果不足 3 位，前面 0 补齐;如果足够 3 位，此语句无效<br> %-3d: 要求宽度为 3 位，如果不足 3 位，后面空格补齐;如果足够 3 位，此语句无效<br> %.2f：小数点后只保留 2 位</p><h3 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h3><p>概念：由若干个相同或不同类型数据构成的集合，这种数据类型被称为构造类型</p><p>例：int a[10];</p><p>数组、结构体、共用体、枚举</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>数据有不同的类型，不同类型数据之间进行混合运算时必然涉及到类型的转换问题.</p><p>转换的方法有两种：</p><ul><li>自动转换:遵循一定的规则,由编译系统自动完成.</li><li>强制类型转换:把表达式的运算结果强制转换成所需的数据类型</li></ul><p>自动转换的原则：<br>1、 占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换,以保证精度不降低.<br>2、 转换方向:</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231203203709428.png" alt="image-20231203203709428"></p><ol><li><p>当表达式中出现了  char 、short int 、int 类型中的一种或者多种，没有其他类型了参加运算的成员全部变成 int类型的参加运算，结果也是 int 类型的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">5</span>/<span class="number">2</span>); <span class="comment">//2</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当表达式中出现了带小数点的实数，参加运算的成员全部变成 double 类型的参加运算，结果也是 double 型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,<span class="number">5.0</span>/<span class="number">2</span>);<span class="comment">//2.500000</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当表达式中有有符号数，也有无符号数，参加运算的成员变成无符号数参加运算结果也是无符   号数.(表达式中无实数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">-8</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(a+b&gt;<span class="number">0</span>)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;a+b&gt;0\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;a+b&lt;=0\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,(a+b));<span class="comment">//ffffffff</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(a+b));<span class="comment">//-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在赋值语句中等号右边的类型自动转换为等号左边的类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">float</span> b=<span class="number">5.8f</span>;<span class="comment">//5.8 后面加 f 代表 5.8 是 float 类型，不加的话，认为是 double 类型</span></span><br><span class="line">    a=b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a);<span class="comment">//a=5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意自动类型转换都是在运算的过程中进行临时性的转换，并不会影响自动类型转换的变量的 值和其类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">float</span> b=<span class="number">5.8f</span>;<span class="comment">//5.8 后面加 f 代表 5.8 是 float 类型，不加的话，认为是 double 类型</span></span><br><span class="line">    a=b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a);<span class="comment">//a=5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b=%f\n&quot;</span>,b);<span class="comment">//b 的类型依然是 float 类型的，它的值依然是 5.8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>强制转换:</strong>通过类型转换运算来实现<br> (类型说明符) (表达式)<br>功能：<br> 把表达式的运算结果强制转换成类型说明符所表示的类型例如：<br> (float)a; // 把 a 的值转换为实型<br> (int)(x+y); // 把 x+y 的结果值转换为整型<br>注意:<br> 类型说明符必须加括号</p><p>说明：<br> 无论是强制转换或是自动转换，都只是为了本次运算的需要，而对变量的数据长度进行的临时性转换，而不改变数据定义的类型以及它的值</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h3><p>​ 用算术运算符将运算对象(也称操作数）连接起来的、符合Ｃ语法规则的式子，称为Ｃ算术表达式运算对象包括常量、变量、函数等<br>​ 例如: ａ* b / c－１.5 ＋ ‘a’</p><h3 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h3><p>1、双目运算符：即参加运算的操作数有两个<br> 例：+<br>  a+b<br>2、单目运算符：参加运算的操作数只有一个<br> ++自增运算符 给变量值+1<br> —自减运算符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span></span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>3、三目运算符:即参加运算的操作数有 3 个<br>()?():()</p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>+ - * / % += -= *= /= %=<br>10%3 表达式的结果为 1<br>复合运算符：<br> a += 3 相当于 a=a+3<br> a*=6+8 相当于 a=a*(6+8)</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>（＞、＜、= =、&gt;=、&lt;=、!= ）<br>!=为不等于<br>一般用于判断条件是否满足或者循环语句</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>1、&amp;&amp; 逻辑与<br> 两个条件都为真，则结果为真<br> if((a&gt;b) &amp;&amp; (a<c)) if(b<a<c)//这种表达方式是错误的2、|| 逻辑或 两个条件至少有一个为真，则结果为真 if((a>b) || (a<c))3、! 逻辑非 if(!(a>b)){<br> }</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>正数在内存中以原码形式存放，负数在内存中以补码形式存放<br>正数的 原码=反码=补码<br>原码：将一个整数，转换成二进制，就是其原码。<br> 如单字节的 5 的原码为：0000 0101；-5 的原码为 1000 0101。<br>反码：正数的反码就是其原码；负数的反码是将原码中，除符号位以外，每一位取反。<br> 如单字节的 5 的反码为：0000 0101；-5 的反码为 1111 1010。<br>补码：正数的补码就是其原码；负数的反码+1 就是补码。<br> 如单字节的 5 的补码为：0000 0101；-5 的补码为 1111 1011。<br>在计算机中，正数是直接用原码表示的，如单字节 5，在计算机中就表示为：0000 0101。<br>负数用补码表示，如单字节-5，在计算机中表示为 1111 1011。<br>无论是正数还是负数，编译系统都是按照内存中存储的内容进行位运算。</p><ol><li>&amp;按位 与<br>任何值与 0 得 0，与 1 保持不变<br>使某位清 0<br>0101 1011&amp;<br>1011 0100</li></ol><hr><p>​ 0001 0000</p><ol><li><p>| 按位或<br>任何值或 1 得 1，或 0 保持不变<br>0101 0011 |<br>1011 0100</p><hr><p>1111 0111</p></li><li><p>~ 按位取反<br>1 变 0，0 变 1<br>0101 1101 ~</p><hr><p>1010 0010</p></li><li><p>^ 按位异或<br>相异得 1，相同得 0<br>1001 1100 ^<br>0101 1010</p><hr><p>1100 0110</p></li><li><p>位移</p></li></ol><p>​ >&gt;右移<br>​ &lt;&lt;左移<br>​ 注意右移分：逻辑右移、算数右移</p><p>（1）右移<br> 逻辑右移 高位补 0，低位溢出<br> 算数右移 高位补符号位，低位溢出 （有符号数）<br> A）逻辑右移<br>  低位溢出、高位补 0<br>  0101 1010 &gt;&gt;3</p><hr><p>​  0000 1011<br>​ B）算数右移：<br>​  对有符号数来说<br>​  低位溢出、高位补符号位。</p><p>​  1010 1101 &gt;&gt; 3</p><hr><p>​  1111 010 1</p><p>​  0101 0011 &gt;&gt;3</p><hr><p>​  0000 101 0</p><p>总结 右移：<br> 1、逻辑右移 高位补 0，低位溢出<br>  注：无论是有符号数还是无符号数都是高位补 0，低位溢出<br> 2、算数右移 高位补符号位，低位溢出 （有符号数）<br>  注：对无符号数来说，高位补 0，低位溢出<br>   对有符号数来说，高位补符号位，低位溢出</p><blockquote><p>在一个编译系统中到底是逻辑右移动，还是算数右移，取决于编译器</p></blockquote><p>（2） 左移 &lt;&lt; 高位溢出，低位补 0<br> 5&lt;&lt;1<br> 0000 0101</p><hr><p>​ 0000 1010</p><h3 id="条件运算符号"><a href="#条件运算符号" class="headerlink" title="条件运算符号"></a>条件运算符号</h3><p>()?():()<br>A?B:C;<br>如果？前边的表达式成立，整个表达式的值，是？和：之间的表达式的结果<br>否则是：之后的表达式的结果</p><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p>(),()</p><p>逗号运算符的结果是,后边表达式的结果</p><h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><p>i++ i—</p><p>运算符在变量的后面，在当前表达式中先用 i 的值，下条语句的时候 i 的值改变</p><p>++i 先加 ，后用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">3</span>;</span><br><span class="line"> <span class="type">int</span> j = <span class="number">4</span>;</span><br><span class="line"> <span class="type">int</span> num;</span><br><span class="line"> <span class="type">int</span> num2;</span><br><span class="line"> num = (i++) + (i++) + (i++);<span class="comment">//3+3+3，先求和再自增</span></span><br><span class="line"> num2 = (++j) + (++j) + (++j);<span class="comment">//7+7+7，先自增再求和</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num = %d\ni = %d\n&quot;</span>, num,i);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;num2 = %d\nj = %d\n&quot;</span>, num2,j);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符优先级及结合性"><a href="#运算符优先级及结合性" class="headerlink" title="运算符优先级及结合性"></a>运算符优先级及结合性</h3><p><strong>运算符优先级</strong><br> 在表达式中按照优先级先后进行运算,优先级高的先于优先级低的先运算。<br> 优先级一样的按结合性来运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a=<span class="number">2</span>+<span class="number">5</span>+<span class="number">3</span>*<span class="number">4</span><span class="number">-6</span></span><br></pre></td></tr></table></figure><p><strong>运算符结合性</strong><br> 左结合性：从左向右运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a=<span class="number">2</span>+<span class="number">3</span>+<span class="number">9</span>+<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>​ 右结合性:从右向左运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b,c,d;</span><br><span class="line">a=b=c=d=<span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>优先级和结合性表：</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231203210737143.png" alt="image-20231203210737143"></p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231203210753782.png" alt="image-20231203210753782"></p><blockquote><p>注：建议当表达式比较复杂的时候，用()括起来，括号的优先级最高，优先算括号里的。</p></blockquote><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="选择控制语句"><a href="#选择控制语句" class="headerlink" title="选择控制语句"></a>选择控制语句</h3><p>1、 if 语句<br>形式1：</p><p>​ if(条件表达式)<br>​ {//复合语句，若干条语句的集合<br>​  语句 1;<br>​  语句 2；<br>​ }</p><p>如果条件成立执行大括号里的所有语句，不成立的话大括号里的语句不执行</p><p>形式2：</p><p>​ if(条件表达式) { } else { }</p><p>​ if else 语句的作用是，如果 if 的条件成立，执行 if 后面{}内的语句，否则执行 else 后的语句</p><p>形式3：</p><p>​ if(条件表达式 1){ } else if(条件表达式 2){ } else if(条件表达式 3){ } else{ }</p><p>​ 在判断的时候，从上往下判断，一旦有成立的表达式，执行对应的复合语句，下边的就不再判断了，各个条件判断是互斥的</p><p>2、 switch 语句</p><p>switch（表达式）//表达式只能是字符型或整型的(short int int long int</p><p>{<br> case 常量表达式1：<br>  语句1；<br>  break；<br> case 常量表达式2：<br>  语句2;<br>  break；<br> default：<br>  语句3；<br>  break;<br>}</p><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><p>1、 for 循环<br> for(表达式 1;表达式 2;表达式 3)<br> {//复合语句，循环体<br> }<br>第一次进入循环的时候执行表达式 1，表达式 1 只干一次，<br>表达式 2，是循环的条件，只有表达式 2 为真了，才执行循环体，也就是说<br>每次进入循环体之前要判断表达式 2 是否为真。<br>每次执行完循环体后，首先执行表达式</p><p>2、 while 循环</p><p>形式 1：<br> while(条件表达式)<br> {//循环体，复合语句<br> }<br>进入 while 循环的时候，首先会判断条件表达式是否为真，为真进入循环体，否则退出循环</p><p>形式 2 ：<br> do{//循环体<br> }while(条件表达式);<br>先执行循环体里的代码，然后去判断条件表达式是否为真，为真再次执行循环体，否则退出循环</p><blockquote><p>形式 1 和形式 2 的区别是，形式 1 先判断在执行循环体，形式 2 先执行循环体，再判断</p></blockquote><p>break 跳出循环<br>continue 结束本次循环，进入下一次循环</p><p>return 返回函数的意思。结束 return 所在的函数，<br>在普通函数中，返回到被调用处，在 main 函数中的话，结束程序</p><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test01010101\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test02020202\n&quot;</span>);</span><br><span class="line"> <span class="comment">//跳转到tmp位置，跳过执行之间的代码</span></span><br><span class="line"> <span class="keyword">goto</span> tmp;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test03030303\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test04040404\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test05050505\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test06060606\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test07070707\n&quot;</span>);</span><br><span class="line"> tmp:</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test08080808\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;test09090909\n&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的使用</title>
      <link href="/posts/98545d5.html"/>
      <url>/posts/98545d5.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：</p><ul><li>字符串string</li><li>哈希hash</li><li>列表list</li><li>集合set</li><li>有序集合sorted set</li></ul><h2 id="2-Redis-5种常用的数据类型"><a href="#2-Redis-5种常用的数据类型" class="headerlink" title="2.Redis 5种常用的数据类型"></a>2.Redis 5种常用的数据类型</h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/redis/image-20230322200212587.png" alt="image-20230322200212587"></p><h2 id="3-Redis常用命令"><a href="#3-Redis常用命令" class="headerlink" title="3.Redis常用命令"></a>3.Redis常用命令</h2><h3 id="字符串string操作命令"><a href="#字符串string操作命令" class="headerlink" title="字符串string操作命令"></a>字符串string操作命令</h3><p>Redis中字符串类型常用命令：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set <span class="type">key</span> value       设置指定<span class="type">key</span>的值</span><br><span class="line">get <span class="type">key</span>         获取指定<span class="type">key</span>的值</span><br><span class="line">setex <span class="type">key</span> seconds value      设置指定<span class="type">key</span>的值，并将<span class="type">key</span>的过期时间设为seconds秒</span><br><span class="line">setnx <span class="type">key</span> value        只有在<span class="type">key</span>不存在时设置<span class="type">key</span>的值</span><br></pre></td></tr></table></figure><h3 id="哈希hash操作命令"><a href="#哈希hash操作命令" class="headerlink" title="哈希hash操作命令"></a>哈希hash操作命令</h3><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象，常用命令：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hset <span class="type">key</span> field value      将哈希表<span class="type">key</span>中的字段field的值设为value</span><br><span class="line">hget <span class="type">key</span> field        获取存储在哈希表中指定字段的值</span><br><span class="line">hdel <span class="type">key</span> field        删除存储在哈希表中的指定字段</span><br><span class="line">hkeys <span class="type">key</span>         获取哈希表中所有字段</span><br><span class="line">hvals <span class="type">key</span>         获取哈希表中所有值</span><br><span class="line">hgetall <span class="type">key</span>         获取在哈希表中指定<span class="type">key</span>的所有字段和值</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/redis/image-20230322201809201.png" alt="image-20230322201809201"></p><h3 id="列表list操作命令"><a href="#列表list操作命令" class="headerlink" title="列表list操作命令"></a>列表list操作命令</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序，常用命令：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 [value2]     将一个或多个值插入到列表头部</span><br><span class="line"><span class="keyword">lrange</span> key start stop      获取列表指定范围内的元素</span><br><span class="line">rpop key         移除并获取列表最后一个元素</span><br><span class="line">llen key         获取列表长度</span><br><span class="line">brpop key1 [key2 timeout     移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/redis/image-20230322202053006.png" alt="image-20230322202053006"></p><h3 id="集合set操作命令"><a href="#集合set操作命令" class="headerlink" title="集合set操作命令"></a>集合set操作命令</h3><p>Redis set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">saddw key member1 <span class="selector-attr">[member2]</span>     向集合添加一个或多个成员</span><br><span class="line">smembers key        返回集合中的所有成员</span><br><span class="line">scard key         获取集合的成员数</span><br><span class="line">sinter key1 <span class="selector-attr">[key2]</span>       返回给定所有集合的交集</span><br><span class="line">sunion key1 <span class="selector-attr">[key2]</span>       返回所有给定集合的并集</span><br><span class="line">sdiff key1 <span class="selector-attr">[key2]</span>       返回给定所有集合的差集</span><br><span class="line">srem key member1 <span class="selector-attr">[member2]</span>     移除集合中一个或多个成员</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/redis/image-20230322202412810.png" alt="image-20230322202412810"></p><h3 id="有序集合sorted-set操作命令"><a href="#有序集合sorted-set操作命令" class="headerlink" title="有序集合sorted set操作命令"></a>有序集合sorted set操作命令</h3><p>Redis sorted set有序集合是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。常用命令：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zadd <span class="built_in">key</span> score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数</span><br><span class="line">zrange <span class="built_in">key</span> start stop [WITHSCORES]   通过索引区间返回有序集合中指定区间内的成员</span><br><span class="line">zincrby <span class="built_in">key</span> increment <span class="built_in">member</span>    有序集合中对指定成员的分数加上增量increment</span><br><span class="line">zrem <span class="built_in">key</span> <span class="built_in">member</span> [<span class="built_in">member</span> ...]    移除有序集合中的一个或多个成员</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/redis/image-20230322202755140.png" alt="image-20230322202755140"></p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keys pattern        查找所有符合给定模式(pattern)<span class="built_in">的key</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">exists</span><span class="built_in"> key</span>         检查给<span class="built_in">定key</span>是否存在</span><br><span class="line">type<span class="built_in"> key</span>         返<span class="built_in">回key</span>所储存的值的类型</span><br><span class="line">ttl<span class="built_in"> key</span>          返回给<span class="built_in">定key</span>的剩余生存时间(TTL,time <span class="keyword">to</span> live),以秒为单位</span><br><span class="line">del<span class="built_in"> key</span>          该命令用于<span class="built_in">在key</span>存在是删<span class="built_in">除key</span></span><br><span class="line">select index        切换数据库</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的一些使用</title>
      <link href="/posts/9a23d635.html"/>
      <url>/posts/9a23d635.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Linux系统"><a href="#什么是Linux系统" class="headerlink" title="什么是Linux系统"></a>什么是Linux系统</h1><h2 id="一、什么是Linux？"><a href="#一、什么是Linux？" class="headerlink" title="一、什么是Linux？"></a>一、什么是Linux？</h2><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><h2 id="二、Linux系统的特点"><a href="#二、Linux系统的特点" class="headerlink" title="二、Linux系统的特点"></a>二、Linux系统的特点</h2><h3 id="1、完全免费"><a href="#1、完全免费" class="headerlink" title="1、完全免费"></a>1、完全免费</h3><p>Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其源代码。这是其他的操作系统所做不到的。正是由于这一点，来自全世界的无数程序员参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。</p><p><strong>2、完全兼容POSIX 1.0标准</strong></p><p>这使得可以在Linux下通过相应的模拟器运行常见的DOS、Windows的程序。这为用户从Windows转到Linux奠定了基础。许多用户在考虑使用Linux时，就想到以前在Windows下常见的程序是否能正常运行，这一点就消除了他们的疑虑。</p><h3 id="3、多用户、多任务"><a href="#3、多用户、多任务" class="headerlink" title="3、多用户、多任务"></a>3、多用户、多任务</h3><p>Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。多任务则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。</p><h3 id="4、良好的界面"><a href="#4、良好的界面" class="headerlink" title="4、良好的界面"></a>4、良好的界面</h3><p>Linux同时具有字符界面和图形界面。在字符界面用户可以通过键盘输入相应的指令来进行操作。它同时也提供了类似Windows图形界面的X-Window系统，用户可以使用鼠标对其进行操作。在X-Window环境中就和在Windows中相似，可以说是一个Linux版的Windows。</p><h3 id="5、丰富的网络功能"><a href="#5、丰富的网络功能" class="headerlink" title="5、丰富的网络功能"></a>5、丰富的网络功能</h3><p>Unix是在互联网的基础上繁荣起来的，Linux的网络功能当然不会逊色。它的网络功能和其内核紧密相连，在这方面Linux要优于其他操作系统。在Linux中，用户可以轻松实现网页浏览、文件传输、远程登陆等网络工作。并且可以作为服务器提供WWW、FTP、E-Mail等服务。</p><h3 id="6、可靠的安全、稳定性能"><a href="#6、可靠的安全、稳定性能" class="headerlink" title="6、可靠的安全、稳定性能"></a>6、可靠的安全、稳定性能</h3><p>Linux采取了许多安全技术措施，其中有对读、写进行权限控制、审计跟踪、核心授权等技术，这些都为安全提供了保障。Linux由于需要应用到网络服务器，这对稳定性也有比较高的要求，实际上Linux在这方面也十分出色。</p><h3 id="7、支持多种平台"><a href="#7、支持多种平台" class="headerlink" title="7、支持多种平台"></a>7、支持多种平台</h3><p>Linux可以运行在多种硬件平台上，如具有x86、680x0、SPARC、Alpha等处理器的平台。此外Linux还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒或游戏机上。2001年1月份发布的Linux 2.4版内核已经能够完全支持Intel 64位芯片架构。同时Linux也支持多处理器技术。多个处理器同时工作，使系统性能大大提高。</p><h2 id="三、Linux与windows的区别"><a href="#三、Linux与windows的区别" class="headerlink" title="三、Linux与windows的区别"></a>三、Linux与windows的区别</h2><h3 id="1-软件与支持"><a href="#1-软件与支持" class="headerlink" title="1. 软件与支持"></a>1. 软件与支持</h3><p>Windows 平台:数量和质量的优势，不过大部分为收费软件；由微软官方提供重要支持和服务；</p><p>Linux 平台：大都为开源自由软件，用户可以修改定制和再发布，由于基本免费没有资金支持，部分软件质量和体验欠缺；有全球所有的 Linux 开发者和自由软件社区提供支持。</p><h3 id="2-安全性"><a href="#2-安全性" class="headerlink" title="2. 安全性"></a>2. 安全性</h3><p>Windows 平台：三天两头打补丁安装系统安全更新，还是会中病毒木马；</p><p>Linux 平台：要说 Linux 没有安全问题，那当然是不可能的，这一点仁者见仁智者见智，相对来说肯定比 Windows 平台要更加安全，使用 Linux 你也不用装某杀毒，某毒霸。</p><h3 id="3-使用习惯"><a href="#3-使用习惯" class="headerlink" title="3. 使用习惯"></a>3. 使用习惯</h3><p>Windows：普通用户基本都是纯图形界面下操作使用，依靠鼠标和键盘完成一切操作，用户上手容易入门简单；</p><p>Linux：兼具图形界面操作（需要使用带有桌面环境的发行版）和完全的命令行操作，可以只用键盘完成一切操作，新手入门较困难，需要一些学习和指导（这正是我们要做的事情），一旦熟练之后效率极高。</p><h3 id="4-可定制性"><a href="#4-可定制性" class="headerlink" title="4. 可定制性"></a>4. 可定制性</h3><p>Windows：操作范围大多已经受到微软的限制，所以基本上是系统怎样设置，用户就只能规矩操作。</p><p>Linux：提供了更高的定制性，它支持开发者通过编码来定义适合自己的操作系统。</p><h3 id="5-应用范畴"><a href="#5-应用范畴" class="headerlink" title="5. 应用范畴"></a>5. 应用范畴</h3><p>Windows：无特定的应用范畴，一般就是常规的电脑使用场景。</p><p>Linux： 主要作为服务器主机，进行忙碌的数据处理和运算</p><h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>/home/itheima/a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，==非==<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，==以==<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如./a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test/，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符<em>， 比如：`</em>`test表示搜索任意以test结尾的文件</li></ul><p>语法2按文件大小查找文件：find 起始路径 -size +|-n[kMG]</p><ul><li>+、- 表示大于和小于</li><li>n表示大小数字</li><li>kMG表示大小单位，k(小写字母)表示kb，M表示MB，G表示GB</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="`反引号"></a>`反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;   # 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;  # IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;  # 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;  # 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;   # DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名=变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p><strong>普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户执行</strong></p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas</title>
      <link href="/posts/3f7f6b33.html"/>
      <url>/posts/3f7f6b33.html</url>
      
        <content type="html"><![CDATA[<h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h2 id="1-什么是pandas"><a href="#1-什么是pandas" class="headerlink" title="1.什么是pandas"></a>1.什么是pandas</h2><p>Pandas是一个强大的分析结构化数据的工具集；它的使用基础是Numpy（提供高性能的矩阵运算）；用于数据挖掘和数据分析，同时也提供数据清洗功能。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pandas</span><br></pre></td></tr></table></figure><h2 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h2><h3 id="1-pandas的常用数据类型"><a href="#1-pandas的常用数据类型" class="headerlink" title="1.pandas的常用数据类型"></a>1.pandas的常用数据类型</h3><p>1.Series 一维，带标签数组</p><p>2.DataFrame 二维，Series容器</p><h3 id="2-Series"><a href="#2-Series" class="headerlink" title="2.Series"></a>2.Series</h3><h4 id="1-pandas之Series创建"><a href="#1-pandas之Series创建" class="headerlink" title="1.pandas之Series创建"></a>1.pandas之Series创建</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">t1 = pd<span class="selector-class">.Series</span>(<span class="selector-attr">[1, 2, 3, 4, 5, 6]</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;t1\n&quot;</span>, t1)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(type(t1)</span></span>)</span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t1</span><br><span class="line">索引 值</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br><span class="line"><span class="number">5</span>    <span class="number">6</span></span><br><span class="line">dtype: <span class="built_in">int64</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;pandas.core.series.Series&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>可以自己设定索引值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index指定索引（列表的长度需要与数组的长度相同）</span></span><br><span class="line"><span class="attribute">t2</span> = pd.Series([<span class="number">1</span>, <span class="number">54</span>, <span class="number">1544</span>, <span class="number">4</span>, <span class="number">974</span>], index=list(<span class="string">&quot;abcde&quot;</span>))</span><br><span class="line"><span class="attribute">print</span>(<span class="string">&quot;t2\n&quot;</span>, t2)</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">t2</span></span><br><span class="line"><span class="attribute">a</span>       <span class="number">1</span></span><br><span class="line"><span class="attribute">b</span>      <span class="number">54</span></span><br><span class="line"><span class="attribute">c</span>    <span class="number">1544</span></span><br><span class="line"><span class="attribute">d</span>       <span class="number">4</span></span><br><span class="line"><span class="attribute">e</span>     <span class="number">974</span></span><br><span class="line"><span class="attribute">dtype</span>: int64</span><br></pre></td></tr></table></figure><p>可以通过字典来创建</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">temp_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;tel&quot;</span>: <span class="number">10086</span>&#125;</span><br><span class="line">t3 = pd<span class="selector-class">.Series</span>(temp_dict)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;t3\n&quot;</span>, t3)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">t3</span></span><br><span class="line"><span class="attribute">name</span>    zhangsan</span><br><span class="line"><span class="attribute">age</span>           <span class="number">18</span></span><br><span class="line"><span class="attribute">tel</span>        <span class="number">10086</span></span><br><span class="line"><span class="attribute">dtype</span>: object</span><br></pre></td></tr></table></figure><p>数据类型转换</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t2 = t2<span class="selector-class">.astype</span>(<span class="attribute">float</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;t2\n&quot;</span>, t2)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">t2</span></span><br><span class="line"><span class="attribute">a</span>       <span class="number">1</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">b</span>      <span class="number">54</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">c</span>    <span class="number">1544</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">d</span>       <span class="number">4</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">e</span>     <span class="number">974</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">dtype</span>: float64</span><br></pre></td></tr></table></figure><h4 id="2-pandas之Series切片和索引"><a href="#2-pandas之Series切片和索引" class="headerlink" title="2.pandas之Series切片和索引"></a>2.pandas之Series切片和索引</h4><p>切片：直接传入start  end 或者步长即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(t3[:<span class="number">2</span>])</span></span></span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span>    zhangsan</span><br><span class="line">age           <span class="number">18</span></span><br><span class="line">dtype: <span class="keyword">object</span></span><br></pre></td></tr></table></figure><p>索引：一个的时候直接传入序号或者索引，多个的时候传入序号或者索引的列表</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 根据索引取值</span><br><span class="line"><span class="built_in">print</span>(t3<span class="string">[[&quot;name&quot;, &quot;age&quot;]]</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"># 获取不连续的值</span><br><span class="line"><span class="built_in">print</span>(t3<span class="string">[[0, 2]]</span>)</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name    zhangsan</span><br><span class="line">age           18</span><br><span class="line"><span class="section">dtype: object</span></span><br><span class="line"><span class="section">-----------------</span></span><br><span class="line">name    zhangsan</span><br><span class="line">tel        10086</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>获取索引和值</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arange.<span class="keyword">index</span> 获取索引</span><br><span class="line">arange.<span class="keyword">values</span> 获取值</span><br></pre></td></tr></table></figure><p>Series对象本质上由两个数组构成，<br>一个数组构成对象的键(index,索引)，一个数组构成对象的值(values),键-&gt;值<br>ndarray的很多方法都可以运用于series类型，比如argmax,clip<br>series具有where方法，但是结果和ndarray不同</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">s</span> = pd.Series(range(<span class="number">5</span>))</span><br><span class="line"><span class="attribute">s</span>.where(s &gt; <span class="number">0</span>)</span><br><span class="line"><span class="attribute">0</span>  NaN</span><br><span class="line"><span class="attribute">1</span>  <span class="number">1</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">2</span>  <span class="number">2</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">3</span>  <span class="number">3</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">4</span>  <span class="number">4</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 当条件为True的时候数值不变，为False的时候修改值</span></span><br><span class="line">  <span class="attribute">s</span>.where(s &gt; <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">  <span class="attribute">0</span>    <span class="number">10</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">1</span>    <span class="number">10</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">2</span>    <span class="number">2</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">3</span>    <span class="number">3</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">4</span>    <span class="number">4</span>.<span class="number">0</span></span><br><span class="line">  </span><br><span class="line"><span class="attribute">s</span>.mask(s &gt; <span class="number">0</span>)</span><br><span class="line"><span class="attribute">0</span>  <span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">1</span>  NaN</span><br><span class="line"><span class="attribute">2</span>  NaN</span><br><span class="line"><span class="attribute">3</span>  NaN</span><br><span class="line"><span class="attribute">4</span>  NaN</span><br><span class="line">  </span><br><span class="line"><span class="comment"># mask方法与where方法作用相反</span></span><br><span class="line"><span class="attribute">s</span>.mask(s &gt; <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="attribute">0</span>    <span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">1</span>    <span class="number">1</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">2</span>    <span class="number">10</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">3</span>    <span class="number">10</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">4</span>    <span class="number">10</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="3-pandas之读取外部数据"><a href="#3-pandas之读取外部数据" class="headerlink" title="3.pandas之读取外部数据"></a>3.pandas之读取外部数据</h3><p>读取csv文件，直接使用pandas.read_csv()</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df = pd<span class="selector-class">.read_csv</span>(<span class="string">&quot;dogNames2.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(df)</span></span></span><br></pre></td></tr></table></figure><p>读取数据库，先要创建连接并定义查询语句，使用pandas.read_sql()读取</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回一个 Connection 对象</span></span><br><span class="line">db_conn = pymysql.connect(</span><br><span class="line">    <span class="attribute">host</span>=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attribute">port</span>=3306,</span><br><span class="line">    <span class="attribute">user</span>=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attribute">password</span>=<span class="string">&quot;202124&quot;</span>,</span><br><span class="line">    <span class="attribute">database</span>=<span class="string">&quot;ssm_db&quot;</span>,</span><br><span class="line">    <span class="attribute">charset</span>=<span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sql = <span class="string">&quot;select * from tbl_book&quot;</span></span><br><span class="line"></span><br><span class="line">spl_content = pd.read_sql(sql, <span class="attribute">con</span>=db_conn)</span><br><span class="line"><span class="built_in">print</span>(spl_content)</span><br></pre></td></tr></table></figure><h3 id="4-DataFrame"><a href="#4-DataFrame" class="headerlink" title="4.DataFrame"></a>4.DataFrame</h3><h4 id="1-pandas之DataFrame创建"><a href="#1-pandas之DataFrame创建" class="headerlink" title="1.pandas之DataFrame创建"></a>1.pandas之DataFrame创建</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"># <span class="keyword">index</span>设置行索引，<span class="keyword">columns</span>设置列索引</span><br><span class="line">t1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>),<span class="keyword">index</span>=list(&quot;abc&quot;), <span class="keyword">columns</span>=list(&quot;wxyz&quot;))</span><br><span class="line">print(t1)</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="attribute">w</span>  x   y   z</span><br><span class="line"><span class="attribute">a</span>  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="attribute">b</span>  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="attribute">c</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br></pre></td></tr></table></figure><p><strong>DataFrame对象既有行索引，又有列索引</strong></p><p>行索引，表明不同行，横向索引，叫index，0轴，axis=0</p><p>列索引，表名不同列，纵向索引，叫columns，1轴，axis=1</p><h4 id="2-通过字典创建DataFrame"><a href="#2-通过字典创建DataFrame" class="headerlink" title="2.通过字典创建DataFrame"></a>2.通过字典创建DataFrame</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="selector-attr">[<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangu&quot;</span>]</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="selector-attr">[18, 19, 20]</span>,</span><br><span class="line">    <span class="string">&quot;tel&quot;</span>: <span class="selector-attr">[110, 119, 120]</span>,</span><br><span class="line">&#125;</span><br><span class="line">t2 = pd<span class="selector-class">.DataFrame</span>(d1)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(t2)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       <span class="attribute">name</span>  age  tel</span><br><span class="line"><span class="attribute">0</span>  zhangsan   <span class="number">18</span>  <span class="number">110</span></span><br><span class="line"><span class="attribute">1</span>      lisi   <span class="number">19</span>  <span class="number">119</span></span><br><span class="line"><span class="attribute">2</span>     wangu   <span class="number">20</span>  <span class="number">120</span></span><br></pre></td></tr></table></figure><h4 id="3-通过列表创建DataFrame"><a href="#3-通过列表创建DataFrame" class="headerlink" title="3.通过列表创建DataFrame"></a>3.通过列表创建DataFrame</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d2 = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: 18, <span class="string">&quot;tel&quot;</span>: 110&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;age&quot;</span>: 19, <span class="string">&quot;tel&quot;</span>: 119&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;wangu&quot;</span>, <span class="string">&quot;age&quot;</span>: 20, <span class="string">&quot;tel&quot;</span>: 120&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">t3 = pd.DataFrame(d2)</span><br><span class="line">print(t3)</span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span> zhangsan   <span class="number">18</span>  <span class="number">110</span></span><br><span class="line"><span class="symbol">1 </span>     lisi   <span class="number">19</span>  <span class="number">119</span></span><br><span class="line"><span class="symbol">2 </span>    wangu   <span class="number">20</span>  <span class="number">120</span></span><br></pre></td></tr></table></figure><h4 id="4-pandas的方法"><a href="#4-pandas的方法" class="headerlink" title="4.pandas的方法"></a>4.pandas的方法</h4><p><strong>DataFramel的基础属性</strong><br>df.shape# 行数 列数<br>df.dtypes# 列数据类型<br>df.ndim# 数据维度<br>df.index# 行索引<br>df.columns# 列索引<br>df.values# 对象值，二维ndarray数组</p><p><strong>DataFrame整体情况查询</strong><br>df.head(3)# 显示头部几行，默认5行<br>df.tai1(3)# 显示末尾几行，默认5行<br>df.info()# 相关信息概览：行数，列数，列索引，列非空值个数，列类型，列类型，内存占用<br>df.describe()# 快速综合统计结果：计数，均值，标准差，最大值，四分位数，最小值</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataframe中的排序方法(sort_values)</span></span><br><span class="line"><span class="comment"># ascending默认为True，升序排序，False降序排序</span></span><br><span class="line">df = df.sort_values(<span class="attribute">by</span>=<span class="string">&quot;Count_AnimalName&quot;</span>, <span class="attribute">ascending</span>=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="5-pandas之取行或者列"><a href="#5-pandas之取行或者列" class="headerlink" title="5.pandas之取行或者列"></a>5.pandas之取行或者列</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pandas取行或者列</span></span><br><span class="line"><span class="comment"># 方括号写数组，表示取行，对行进行操作</span></span><br><span class="line"><span class="comment"># 方括号写列索引名，表示取列，对列进行操作</span></span><br><span class="line"><span class="comment"># 也可以使用两个，表示取多少列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">df</span>[:20])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">df</span>[<span class="string">&quot;Row_Labels&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">df</span>[:5][<span class="string">&quot;Row_Labels&quot;</span>])</span><br></pre></td></tr></table></figure><h5 id="1-pandas之loc"><a href="#1-pandas之loc" class="headerlink" title="1.pandas之loc"></a>1.pandas之loc</h5><p>df.loc 通过<strong>标签</strong>索引行数据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(12).reshape(3, 4), <span class="attribute">index</span>=list(&quot;abc&quot;), <span class="attribute">columns</span>=list(&quot;wxyz&quot;))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当列表给一个值时，按行索引值获取</span></span><br><span class="line">t1 = df.loc[<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1\n&quot;</span>, t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定的列</span></span><br><span class="line">t2 = df.loc[:, <span class="string">&quot;w&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t2\n&quot;</span>, t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定行索引和列索引获取值</span></span><br><span class="line">t3 = df.loc[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;w&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t3\n&quot;</span>, t3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当参数使用一个值和一个列表时，即一行多列</span></span><br><span class="line">t4 = df.loc[<span class="string">&quot;a&quot;</span>, [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;z&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t4\n&quot;</span>, t4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当参数为一个列表和一个值的时候，即多行一列</span></span><br><span class="line">t5 = df.loc[[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>], <span class="string">&quot;y&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t5\n&quot;</span>, t5)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个参数可以使用切片的方法来获取值（两个值都会被选中）</span></span><br><span class="line">t6 = df.loc[<span class="string">&quot;a&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;x&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t6\n&quot;</span>, t6)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当参数为一个列表的时候，获取指定行的值</span></span><br><span class="line">t7 = df.loc[[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t7\n&quot;</span>, t7)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当指定第二个参数为列表，即获取指定列的值</span></span><br><span class="line">t8 = df.loc[:, [<span class="string">&quot;x&quot;</span>, <span class="string">&quot;z&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t8\n&quot;</span>, t8)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当参数为两个列表时，即值为列表中的值一一对应</span></span><br><span class="line">t9 = df.loc[[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>], [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t9\n&quot;</span>, t9)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">   w  x   y   z</span></span><br><span class="line">a  0  1   2   3</span><br><span class="line">b  4  5   6   7</span><br><span class="line">c  8  9  10  11</span><br><span class="line">t1</span><br><span class="line"><span class="code"> w    0</span></span><br><span class="line">x    1</span><br><span class="line">y    2</span><br><span class="line">z    3</span><br><span class="line"><span class="section">Name: a, dtype: int32</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">t2</span><br><span class="line"><span class="code"> a    0</span></span><br><span class="line">b    4</span><br><span class="line">c    8</span><br><span class="line"><span class="section">Name: w, dtype: int32</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">t3</span><br><span class="line"><span class="section"> 0</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">t4</span><br><span class="line"><span class="code"> w    0</span></span><br><span class="line">z    3</span><br><span class="line"><span class="section">Name: a, dtype: int32</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">t5</span><br><span class="line"><span class="code"> a     2</span></span><br><span class="line">b     6</span><br><span class="line">c    10</span><br><span class="line"><span class="section">Name: y, dtype: int32</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">t6</span><br><span class="line"><span class="code"> a    1</span></span><br><span class="line">b    5</span><br><span class="line">c    9</span><br><span class="line"><span class="section">Name: x, dtype: int32</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">t7</span><br><span class="line"><span class="code">    w  x   y   z</span></span><br><span class="line">a  0  1   2   3</span><br><span class="line">b  4  5   6   7</span><br><span class="line"><span class="section">c  8  9  10  11</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">t8</span><br><span class="line"><span class="code">    x   z</span></span><br><span class="line">a  1   3</span><br><span class="line">b  5   7</span><br><span class="line"><span class="section">c  9  11</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">t9</span><br><span class="line"><span class="code">    w  x</span></span><br><span class="line">a  0  1</span><br><span class="line">b  4  5</span><br></pre></td></tr></table></figure><h5 id="2-pandas之iloc"><a href="#2-pandas之iloc" class="headerlink" title="2.pandas之iloc"></a>2.pandas之iloc</h5><p>df.iloc 通过<strong>位置</strong>获取行数据</p><p>iloc的用法大致和loc的用法差不多，loc主要是通过索引来寻找值，iloc则是通过位置(坐标[从0开始])</p><h4 id="6-pandas之布尔索引"><a href="#6-pandas之布尔索引" class="headerlink" title="6.pandas之布尔索引"></a>6.pandas之布尔索引</h4><p>当条件为一个的时候，可以直接通过&lt;=&gt;来使用</p><p>当条件为多个的时候，需要使用&amp;(且)或者|(或)符号来连接，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span>[(800 &lt; <span class="built_in">df</span>[<span class="string">&quot;Count_AnimalName&quot;</span>]) &amp; (<span class="built_in">df</span>[<span class="string">&quot;Count_AnimalName&quot;</span>] &lt; 1000)]</span><br></pre></td></tr></table></figure><h4 id="7-pandas之字符串方法"><a href="#7-pandas之字符串方法" class="headerlink" title="7.pandas之字符串方法"></a>7.pandas之字符串方法</h4><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230206145658475.png" alt="image-20230206145658475"></p><p>使用方法(会对每一个字符串进行操作)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组.<span class="built_in">str</span>.方法</span><br></pre></td></tr></table></figure><h4 id="8-缺失数据的处理"><a href="#8-缺失数据的处理" class="headerlink" title="8.缺失数据的处理"></a>8.缺失数据的处理</h4><p>判断数据是否为NaN：pd.isnull(df),pd.notnull(df)</p><p>处理方式1：删除NaN所在的行列dropna (axis=0, how=’any’, inplace=False)</p><p>处理方式2：填充数据，t.fillna(t.mean()),t.fiallna(t.median()),t.fillna(0)</p><p>处理为0的数据：t[t==0]=np.nan</p><p>当然并不是每次为0的数据都需要处理</p><p>计算平均值等情况，nan是不参与计算的，但是0会</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(12).reshape(3, 4), <span class="attribute">index</span>=list(&quot;abc&quot;), <span class="attribute">columns</span>=list(&quot;wxyz&quot;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值</span></span><br><span class="line">df.iloc[1:, :2] = np.nan</span><br><span class="line">df.iloc[0, 2] = np.nan</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># isnull判断数组中的值是否为nan</span></span><br><span class="line"><span class="built_in">print</span>(pd.isnull(df))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为null</span></span><br><span class="line"><span class="built_in">print</span>(pd.notnull(df))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[pd.notnull(df[<span class="string">&quot;w&quot;</span>])])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.notnull(df[<span class="string">&quot;w&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除有nan的行或列（由轴指定）</span></span><br><span class="line"><span class="comment"># how不指定则为any，即只要有nan就删除，指定为all时，当行或列所有的值为nan时才删除</span></span><br><span class="line"><span class="comment"># inplace是否直接对数组进行修改，默认为False</span></span><br><span class="line">df.dropna(<span class="attribute">axis</span>=0, <span class="attribute">how</span>=<span class="string">&quot;all&quot;</span>, <span class="attribute">inplace</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对nan的值进行填充</span></span><br><span class="line"><span class="built_in">print</span>(df.fillna(df.mean()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引来对某一列进行修改</span></span><br><span class="line">df[<span class="string">&quot;y&quot;</span>] = df[<span class="string">&quot;y&quot;</span>].fillna(df[<span class="string">&quot;y&quot;</span>].mean())</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">     w    x     y   z</span></span><br><span class="line">a  0.0  1.0   NaN   3</span><br><span class="line">b  NaN  NaN   6.0   7</span><br><span class="line"><span class="section">c  NaN  NaN  10.0  11</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">       w      x      y      z</span></span><br><span class="line">a  False  False   True  False</span><br><span class="line">b   True   True  False  False</span><br><span class="line"><span class="section">c   True   True  False  False</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">       w      x      y     z</span></span><br><span class="line">a   True   True  False  True</span><br><span class="line">b  False  False   True  True</span><br><span class="line"><span class="section">c  False  False   True  True</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">     w    x   y  z</span></span><br><span class="line"><span class="section">a  0.0  1.0 NaN  3</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">a     True</span><br><span class="line">b    False</span><br><span class="line">c    False</span><br><span class="line"><span class="section">Name: w, dtype: bool</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">     w    x     y   z</span></span><br><span class="line">a  0.0  1.0   NaN   3</span><br><span class="line">b  NaN  NaN   6.0   7</span><br><span class="line"><span class="section">c  NaN  NaN  10.0  11</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">     w    x     y   z</span></span><br><span class="line">a  0.0  1.0   8.0   3</span><br><span class="line">b  0.0  1.0   6.0   7</span><br><span class="line"><span class="section">c  0.0  1.0  10.0  11</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">     w    x     y   z</span></span><br><span class="line">a  0.0  1.0   8.0   3</span><br><span class="line">b  NaN  NaN   6.0   7</span><br><span class="line">c  NaN  NaN  10.0  11</span><br></pre></td></tr></table></figure><h4 id="9-pandas常用统计方法"><a href="#9-pandas常用统计方法" class="headerlink" title="9.pandas常用统计方法"></a>9.pandas常用统计方法</h4><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">mean</td><td style="text-align:center">平均分</td></tr><tr><td style="text-align:center">max</td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center">argmax</td><td style="text-align:center">最大值位置</td></tr><tr><td style="text-align:center">min</td><td style="text-align:center">最小值</td></tr><tr><td style="text-align:center">argmin</td><td style="text-align:center">最小值位置</td></tr><tr><td style="text-align:center">median</td><td style="text-align:center">中值</td></tr></tbody></table></div><h4 id="10-数据合并"><a href="#10-数据合并" class="headerlink" title="10.数据合并"></a>10.数据合并</h4><p>pandas包中，进行数据合并有join()、merge()、concat(), append()四种方法。它们的区别是：</p><ol><li>df.join() 相同行索引的数据被合并在一起，因此拼接后的行数不会增加(可能会减少)、列数增加；</li><li>df.merge()通过指定的列索引进行合并，行列都有可能增加;merge也可以指定行索引进行合并；</li><li>pd.concat()通过axis参数指定在水平还是垂直方向拼接；</li><li>df.append()在DataFrame的末尾添加一行或多行；大致等价于pd.concat([df1,df2],axis=0,join=’outer’)。</li></ol><h5 id="1-数据合并之join"><a href="#1-数据合并之join" class="headerlink" title="1.数据合并之join"></a>1.数据合并之join</h5><p>join:默认情况下他是把行索引相同的数据合并到一起</p><p>DataFrame.join(other, on=None, how=’left’, lsuffix=’’, rsuffix=’’, sort=False)</p><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">other</td><td style="text-align:center">右表， DataFrame, Series, or list of DataFrame</td></tr><tr><td style="text-align:center">on</td><td style="text-align:center">关联字段, 是关联index的</td></tr><tr><td style="text-align:center">how</td><td style="text-align:center">拼接方式，默认left，{‘left’, ‘right’, ‘outer’, ‘inner’}</td></tr><tr><td style="text-align:center">lsuffix</td><td style="text-align:center">左表相同列索引的后缀</td></tr><tr><td style="text-align:center">rsuffix</td><td style="text-align:center">右表相同列索引的后缀</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">根据连接键对合并后的数据进行排列，默认为False</td></tr></tbody></table></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组合并join</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((2, 4)), index=[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>], <span class="attribute">columns</span>=list(&quot;abcd&quot;))</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line">df2 = pd.DataFrame(np.zeros((3, 3)), index=[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>], <span class="attribute">columns</span>=list(&quot;xyz&quot;))</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line">df3 = df1.join(df2)</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br><span class="line"></span><br><span class="line">df4 = df2.join(df1)</span><br><span class="line"><span class="built_in">print</span>(df4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * 30)</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">     a    b    c    d</span></span><br><span class="line">A  1.0  1.0  1.0  1.0</span><br><span class="line"><span class="section">B  1.0  1.0  1.0  1.0</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">     x    y    z</span></span><br><span class="line">A  0.0  0.0  0.0</span><br><span class="line">B  0.0  0.0  0.0</span><br><span class="line"><span class="section">C  0.0  0.0  0.0</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">     a    b    c    d    x    y    z</span></span><br><span class="line">A  1.0  1.0  1.0  1.0  0.0  0.0  0.0</span><br><span class="line"><span class="section">B  1.0  1.0  1.0  1.0  0.0  0.0  0.0</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line"><span class="code">     x    y    z    a    b    c    d</span></span><br><span class="line">A  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span><br><span class="line">B  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span><br><span class="line">C  0.0  0.0  0.0  NaN  NaN  NaN  NaN</span><br></pre></td></tr></table></figure><h5 id="2-数据合并之merge"><a href="#2-数据合并之merge" class="headerlink" title="2.数据合并之merge"></a>2.数据合并之merge</h5><p>merge:按照指定的列把数据按照一定的方式合并到一起</p><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">right</td><td style="text-align:center">右表， DataFrame, Series, or list of DataFrame</td></tr><tr><td style="text-align:center">how</td><td style="text-align:center">拼接方式，默认inner，{‘left’, ‘right’, ‘outer’, ‘inner’}</td></tr><tr><td style="text-align:center">on</td><td style="text-align:center">默认None,自动根据相同列拼接。关联字段, 是关联columns的,必须同时存在于2个表中</td></tr><tr><td style="text-align:center">left_on</td><td style="text-align:center">默认None,左表中用作连接键的列索引</td></tr><tr><td style="text-align:center">right_on</td><td style="text-align:center">默认None,右表中用作连接键的列索引</td></tr><tr><td style="text-align:center">left_index</td><td style="text-align:center">默认Flase，是否将左表中的行索引用作连接键</td></tr><tr><td style="text-align:center">right_index</td><td style="text-align:center">默认Flase，是否将右表中的行索引用作连接键</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">根据连接键对合并后的数据进行排列，默认为Flase</td></tr></tbody></table></div><h6 id="1-1-内连接"><a href="#1-1-内连接" class="headerlink" title="1.1 内连接"></a>1.1 内连接</h6><p>how=‘inner’，on=设置连接的共有列名。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单列的内连接</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 定义df1</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;feature1&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>], </span><br><span class="line">     <span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;price&#x27;</span>:np.array([<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>])&#125;)</span><br><span class="line"><span class="comment"># 基于共同列alpha的内连接</span></span><br><span class="line">df3 = pd.merge(df1,df2,how=<span class="string">&#x27;inner&#x27;</span>,<span class="literal">on</span>=<span class="string">&#x27;alpha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230207121651933.png" alt="image-20230207121651933"></p><p>取共同列alpha值的交集进行连接。</p><h6 id="1-2-外连接"><a href="#1-2-外连接" class="headerlink" title="1.2 外连接"></a>1.2 外连接</h6><p>how=‘outer’，dataframe的链接方式为外连接，我们可以理解基于共同列的并集进行连接，参数on设置连接的共有列名。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单列的外连接</span></span><br><span class="line"><span class="comment"># 定义df1</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;feature1&#x27;</span>:[1,1,2,3,3,1], </span><br><span class="line">     <span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;pazham&#x27;</span>[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;price&#x27;</span>:np.array([5,6,5,7])&#125;)</span><br><span class="line"><span class="comment"># 基于共同列alpha的外连接</span></span><br><span class="line">df5 = pd.merge(df1,df2,<span class="attribute">how</span>=<span class="string">&#x27;outer&#x27;</span>,on=&#x27;alpha&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230207121935892.png" alt="image-20230207121935892"></p><p>若两个dataframe间除了on设置的连接列外并无相同列，则该列的值置为NaN。</p><h6 id="1-3-左连接"><a href="#1-3-左连接" class="headerlink" title="1.3 左连接"></a>1.3 左连接</h6><p>how=‘left’，dataframe的链接方式为左连接，我们可以理解基于左边位置dataframe的列进行连接，参数on设置连接的共有列名。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单列的左连接</span></span><br><span class="line"><span class="comment"># 定义df1</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;feature1&#x27;</span>:[1,1,2,3,3,1],</span><br><span class="line">        <span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span>:np.array([5,6,5,7])&#125;)</span><br><span class="line"><span class="comment"># 基于共同列alpha的左连接</span></span><br><span class="line">df5 = pd.merge(df1,df2,<span class="attribute">how</span>=<span class="string">&#x27;left&#x27;</span>,on=&#x27;alpha&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230207122020030.png" alt="image-20230207122020030"></p><p>因为df2的连接列alpha有两个’A’值，所以左连接的df5有两个’A’值，若两个dataframe间除了on设置的连接列外并无相同列，则该列的值置为NaN。</p><h6 id="1-4-右连接"><a href="#1-4-右连接" class="headerlink" title="1.4 右连接"></a>1.4 右连接</h6><p>how=‘right’，dataframe的链接方式为左连接，我们可以理解基于右边位置dataframe的列进行连接，参数on设置连接的共有列名。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单列的右连接</span></span><br><span class="line"><span class="comment"># 定义df1</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;feature1&#x27;</span>:[1,1,2,3,3,1],</span><br><span class="line">     <span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;price&#x27;</span>:np.array([5,6,5,7])&#125;)</span><br><span class="line"><span class="comment"># 基于共同列alpha的右连接</span></span><br><span class="line">df6 = pd.merge(df1,df2,<span class="attribute">how</span>=<span class="string">&#x27;right&#x27;</span>,on=&#x27;alpha&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(df6)</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230207122116852.png" alt="image-20230207122116852"></p><p>因为df1的连接列alpha有两个’B’值，所以右连接的df6有两个’B’值。若两个dataframe间除了on设置的连接列外并无相同列，则该列的值置为NaN。</p><h6 id="1-5-基于多列的连接算法"><a href="#1-5-基于多列的连接算法" class="headerlink" title="1.5 基于多列的连接算法"></a>1.5 基于多列的连接算法</h6><p>多列连接的算法与单列连接一致，本节只介绍基于多列的内连接和右连接，读者可自己编码并按照本文给出的图解方式去理解外连接和左连接。</p><p><strong>多列的内连接：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多列的内连接</span></span><br><span class="line"><span class="comment"># 定义df1</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;beta&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;feature1&#x27;</span>:[1,1,2,3,3,1],</span><br><span class="line">                    <span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;beta&#x27;</span>:[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span>:np.array([5,6,5,7])&#125;)</span><br><span class="line"><span class="comment"># 基于共同列alpha和beta的内连接</span></span><br><span class="line">df7 = pd.merge(df1,df2,on=[<span class="string">&#x27;alpha&#x27;</span>,<span class="string">&#x27;beta&#x27;</span>],<span class="attribute">how</span>=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(df7)</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230207122155649.png" alt="image-20230207122155649"></p><p><strong>多列的右连接：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多列的右连接</span></span><br><span class="line"><span class="comment"># 定义df1</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;beta&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;feature1&#x27;</span>:[1,1,2,3,3,1],</span><br><span class="line">                    <span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;beta&#x27;</span>:[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span>:np.array([5,6,5,7])&#125;)</span><br><span class="line">                    </span><br><span class="line"><span class="comment"># 基于共同列alpha和beta的右连接</span></span><br><span class="line">df8 = pd.merge(df1,df2,on=[<span class="string">&#x27;alpha&#x27;</span>,<span class="string">&#x27;beta&#x27;</span>],<span class="attribute">how</span>=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(df8)</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230207122232640.png" alt="image-20230207122232640"></p><h6 id="1-6-基于index的连接方法"><a href="#1-6-基于index的连接方法" class="headerlink" title="1.6 基于index的连接方法"></a>1.6 基于index的连接方法</h6><p>基于column的连接方法，merge方法亦可基于index连接dataframe。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于column和index的右连接</span></span><br><span class="line"><span class="comment"># 定义df1</span></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;beta&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>],</span><br><span class="line">                 <span class="string">&#x27;feature1&#x27;</span>:[1,1,2,3,3,1],</span><br><span class="line">                 <span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">     <span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span>:np.array([5,6,5,7])&#125;,</span><br><span class="line">                    index=[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>])</span><br><span class="line">                    </span><br><span class="line"><span class="comment"># 基于df1的beta列和df2的index连接</span></span><br><span class="line">df9 = pd.merge(df1,df2,<span class="attribute">how</span>=<span class="string">&#x27;inner&#x27;</span>,left_on=&#x27;beta&#x27;,right_index=True)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(df9) </span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230207122324848.png" alt="image-20230207122324848"></p><h5 id="3-数据合并之concat"><a href="#3-数据合并之concat" class="headerlink" title="3.数据合并之concat"></a>3.数据合并之concat</h5><ul><li><p>按方向拼接(pd.concat()按行或列进行合并，axis参数决定拼接方向)</p></li><li><p>pd.concat([data1, data2], axis=0) 默认axis=0，垂直方向拼接，默认join=’outer’并集拼接；当join=’inner’进行交集拼接时，对列索引取交集；</p></li><li><p>pd.concat([data1, data2], axis=1) 水平方向拼接，默认并集拼接；当join=’inner’进行交集拼接时，对行索引取交集；</p></li><li><p>并集拼接时，若列标签均不相同，则行列标签数量均会增加，未同时存在在2个表中的字段的values为NaN；</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">objs</td><td style="text-align:center">要合并的DataFrame或Series，以列表传入。如[df1, df2]</td></tr><tr><td style="text-align:center">axis</td><td style="text-align:center">拼接方向，{0/’index’, 1/’columns’}，默认0,代表垂直方向拼接；1代表水平方向拼接</td></tr><tr><td style="text-align:center">join</td><td style="text-align:center">拼接方式，默认outer并集，{‘outer’, ‘inner’} ，inner交集</td></tr><tr><td style="text-align:center">ignore_index</td><td style="text-align:center">默认False，是否需要重置索引。</td></tr></tbody></table></div><h5 id="4-数据合并之append"><a href="#4-数据合并之append" class="headerlink" title="4.数据合并之append"></a>4.数据合并之append</h5><ul><li>和pd.concat方法的区别：<ol><li>append只能做行的拼接</li><li>append方法是外连接</li></ol></li><li>相同点：<ol><li>append可以支持多个DataFrame的拼接</li><li>append大致等同于 <code>pd.concat([df1,df2],axis=0,join=&#39;outer&#39;)</code></li></ol></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">常用参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">other</td><td style="text-align:center">要被拼接进去的对象</td></tr><tr><td style="text-align:center">ignore_index</td><td style="text-align:center">是否需要重置索引，默认False不重置，会保留other的原索引</td></tr><tr><td style="text-align:center">verify_integrity</td><td style="text-align:center">默认False，是否在创建具有重复项的索引时引发ValueError</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">默认False，否，是否在df和other的列不对齐时，对列进行排序</td></tr></tbody></table></div><h4 id="11-分组和聚合"><a href="#11-分组和聚合" class="headerlink" title="11.分组和聚合"></a>11.分组和聚合</h4><p>DataFrame.groupby(by=None, axis=0, level=None, as_index=True, sort=True, group_keys=True,=False, **kwargs)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">by</span> ：分组字段，接收list、str、<span class="keyword">mapping</span>或generator，用于确定进行分组的键值。如果传入的是一个函数则对索引进行计算并分组；如果传入的是一个字典或者series则用字典或者series的值作为分组依据；如果传入一个numpy数组则用数据的元素作为分组依据；如果传入的是字符串或者字符串列表则用这些字符串所代表的字段作为分段依据</span><br><span class="line"></span><br><span class="line">axis ：指定切分方向，默认为<span class="number">0</span>，表示沿着行切分，对列进行操作</span><br><span class="line"></span><br><span class="line"><span class="keyword">level</span> ：表示标签所在级别，默认为<span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">as_index：表示聚合后的聚合标签是否以DataFrame索引形式输出，默认为<span class="keyword">True</span>；当设置为<span class="keyword">False</span>时相当于加了reset_index功能</span><br><span class="line"></span><br><span class="line">sort ：通过sort参数指定是否对输出结果按索引排序，默认为<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">group_keys ：表示是否显示分组标签的名称，默认为<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">squeeze ：表示是否在允许的情况下对返回数据进行降维，默认为<span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>分组后使用count方法对每列进行聚合计算</p><p><em>聚合函数为每个组返回单个聚合值。当创建了groupby对象，就可以对分组数据执行多个聚合操作。比较常用的是通过聚合函数或等效的agg方法聚合。常用的聚合函数如下表：</em></p><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">count</td><td style="text-align:center">分组中非空值的数量</td></tr><tr><td style="text-align:center">sum</td><td style="text-align:center">非空值的和</td></tr><tr><td style="text-align:center">mean</td><td style="text-align:center">非空值的平均值</td></tr><tr><td style="text-align:center">median</td><td style="text-align:center">非空值的中位数</td></tr><tr><td style="text-align:center">std、var</td><td style="text-align:center">无偏标准差和方差</td></tr><tr><td style="text-align:center">min、max</td><td style="text-align:center">非空值的最小和最大值</td></tr><tr><td style="text-align:center">prod</td><td style="text-align:center">非空值的积</td></tr><tr><td style="text-align:center">first、last</td><td style="text-align:center">第一个和最后一个非空值</td></tr></tbody></table></div><h4 id="12-索引和复合索引"><a href="#12-索引和复合索引" class="headerlink" title="12.索引和复合索引"></a>12.索引和复合索引</h4><p>简单的索引操作：</p><ul><li>获取index：df.index</li><li>指定index ：df.index = [‘x’,’y’]</li><li>重新设置index : df.reindex(list(“abcedf”))</li><li>指定某一列作为index ：df.set_index(“Country”,drop=False)</li><li>返回index的唯一值：df.set_index(“Country”).index.unique()</li></ul><h4 id="13-pandas中的时间序列"><a href="#13-pandas中的时间序列" class="headerlink" title="13.pandas中的时间序列"></a>13.pandas中的时间序列</h4><p>pd.date_range(start=None, end=None, periods=None, freq=’D’)</p><p>start和end以及freq配合能够生成<strong>start和end范围</strong>内以频率freq的一组时间索引</p><p>start和periods以及freq配合能够生成从start开始的频率为freq的<strong>periods</strong>个时间索引</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间序列</span></span><br><span class="line"><span class="comment"># 从哪一天开始到哪一天结束,以10天为一个间隔</span></span><br><span class="line">df1 = pd.date_range(<span class="attribute">start</span>=<span class="string">&quot;20230101&quot;</span>, <span class="attribute">end</span>=<span class="string">&quot;20231231&quot;</span>, <span class="attribute">freq</span>=<span class="string">&quot;10D&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从哪一天开始，以一个月为一个间隔，生成10</span></span><br><span class="line">df2 = pd.date_range(<span class="attribute">start</span>=<span class="string">&quot;20230101&quot;</span>, <span class="attribute">periods</span>=10, <span class="attribute">freq</span>=<span class="string">&quot;M&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">df3 = pd.date_range(<span class="attribute">start</span>=<span class="string">&quot;20230101&quot;</span>, <span class="attribute">periods</span>=10, <span class="attribute">freq</span>=<span class="string">&quot;H&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DatetimeIndex([&#x27;<span class="number">2023-01-01</span>&#x27;, &#x27;<span class="number">2023-01-11</span>&#x27;, &#x27;<span class="number">2023-01-21</span>&#x27;, &#x27;<span class="number">2023-01-31</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-02-10</span>&#x27;, &#x27;<span class="number">2023-02-20</span>&#x27;, &#x27;<span class="number">2023-03-02</span>&#x27;, &#x27;<span class="number">2023-03-12</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-03-22</span>&#x27;, &#x27;<span class="number">2023-04-01</span>&#x27;, &#x27;<span class="number">2023-04-11</span>&#x27;, &#x27;<span class="number">2023-04-21</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-05-01</span>&#x27;, &#x27;<span class="number">2023-05-11</span>&#x27;, &#x27;<span class="number">2023-05-21</span>&#x27;, &#x27;<span class="number">2023-05-31</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-06-10</span>&#x27;, &#x27;<span class="number">2023-06-20</span>&#x27;, &#x27;<span class="number">2023-06-30</span>&#x27;, &#x27;<span class="number">2023-07-10</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-07-20</span>&#x27;, &#x27;<span class="number">2023-07-30</span>&#x27;, &#x27;<span class="number">2023-08-09</span>&#x27;, &#x27;<span class="number">2023-08-19</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-08-29</span>&#x27;, &#x27;<span class="number">2023-09-08</span>&#x27;, &#x27;<span class="number">2023-09-18</span>&#x27;, &#x27;<span class="number">2023-09-28</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-10-08</span>&#x27;, &#x27;<span class="number">2023-10-18</span>&#x27;, &#x27;<span class="number">2023-10-28</span>&#x27;, &#x27;<span class="number">2023-11-07</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-11-17</span>&#x27;, &#x27;<span class="number">2023-11-27</span>&#x27;, &#x27;<span class="number">2023-12-07</span>&#x27;, &#x27;<span class="number">2023-12-17</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-12-27</span>&#x27;],</span><br><span class="line">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;10D&#x27;)</span><br><span class="line">DatetimeIndex([&#x27;<span class="number">2023-01-31</span>&#x27;, &#x27;<span class="number">2023-02-28</span>&#x27;, &#x27;<span class="number">2023-03-31</span>&#x27;, &#x27;<span class="number">2023-04-30</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-05-31</span>&#x27;, &#x27;<span class="number">2023-06-30</span>&#x27;, &#x27;<span class="number">2023-07-31</span>&#x27;, &#x27;<span class="number">2023-08-31</span>&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-09-30</span>&#x27;, &#x27;<span class="number">2023-10-31</span>&#x27;],</span><br><span class="line">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;M&#x27;)</span><br><span class="line">DatetimeIndex([&#x27;<span class="number">2023-01-01</span> 00:00:00&#x27;, &#x27;<span class="number">2023-01-01</span> 01:00:00&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-01-01</span> 02:00:00&#x27;, &#x27;<span class="number">2023-01-01</span> 03:00:00&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-01-01</span> 04:00:00&#x27;, &#x27;<span class="number">2023-01-01</span> 05:00:00&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-01-01</span> 06:00:00&#x27;, &#x27;<span class="number">2023-01-01</span> 07:00:00&#x27;,</span><br><span class="line">               &#x27;<span class="number">2023-01-01</span> 08:00:00&#x27;, &#x27;<span class="number">2023-01-01</span> 09:00:00&#x27;],</span><br><span class="line">              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;H&#x27;)</span><br></pre></td></tr></table></figure><p><strong>关于频率的更多缩写</strong></p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230208213950892.png" alt="image-20230208213950892"></p><p><strong>PeriodIndex</strong></p><p>DatetimeIndex可以理解为时间戳</p><p>PeriodIndex可以理解为时间段</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy</title>
      <link href="/posts/fa288682.html"/>
      <url>/posts/fa288682.html</url>
      
        <content type="html"><![CDATA[<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h2 id="1-什么是numpy"><a href="#1-什么是numpy" class="headerlink" title="1.什么是numpy"></a>1.什么是numpy</h2><p>一个在Python中做科学计算的基础库，重在<code>数值计算</code>，也是大部分PYTHON<code>科学计算库的基础库</code>，多用于在大型、多维数组上执行数值运算</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> numpy</span><br></pre></td></tr></table></figure><h2 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h2><h3 id="1-numpy创建数组-矩阵"><a href="#1-numpy创建数组-矩阵" class="headerlink" title="1.numpy创建数组(矩阵)"></a>1.numpy创建数组(矩阵)</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"># 使用numpy生成数组，<span class="keyword">type</span>得到ndarray的数据类型</span><br><span class="line"></span><br><span class="line"><span class="title">t1</span> = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="title">print</span>(<span class="string">&quot;t1&quot;</span>, t1)</span><br><span class="line"><span class="title">print</span>(<span class="keyword">type</span>(t1))</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1 [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;numpy.ndarray&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t2 = np<span class="selector-class">.array</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;t2&quot;</span>, t2)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(type(t2)</span></span>)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t2 [0<span class="number"> 1 </span>2<span class="number"> 3 </span>4<span class="number"> 5 </span>6<span class="number"> 7 </span>8 9]</span><br><span class="line">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></pre></td></tr></table></figure><h3 id="2-numpy中常见的数组类型"><a href="#2-numpy中常见的数组类型" class="headerlink" title="2.numpy中常见的数组类型"></a>2.numpy中常见的数组类型</h3><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117141556064.png" alt="image-20230117141556064"></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">t3</span> = np.arange(<span class="number">4</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="title">print</span>(<span class="string">&quot;t3&quot;</span>, t3)</span><br><span class="line"><span class="title">print</span>(<span class="keyword">type</span>(t3))</span><br><span class="line"># d<span class="keyword">type</span>数据的类型</span><br><span class="line"><span class="title">print</span>(t3.d<span class="keyword">type</span>)</span><br></pre></td></tr></table></figure><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t3 [<span class="number">4</span> <span class="number">6</span> <span class="number">8</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="symbol">&#x27;numpy</span>.ndarray&#x27;&gt;</span><br><span class="line"><span class="built_in">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用dtype指定数据的类型（即多少位一个字节）</span></span><br><span class="line">t4 = np.array(range(1, 4), <span class="attribute">dtype</span>=float)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t4&quot;</span>, t4)</span><br><span class="line"><span class="built_in">print</span>(t4.dtype)</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t4 [<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]</span><br><span class="line"><span class="built_in">float</span>64</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy中的Boolean类型</span></span><br><span class="line"><span class="attribute">t5</span> = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], dtype=bool)</span><br><span class="line"><span class="attribute">print</span>(<span class="string">&quot;t5&quot;</span>, t5)</span><br><span class="line"><span class="attribute">print</span>(t5.dtype)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t5 [ <span class="keyword">True</span>  <span class="keyword">True</span> <span class="keyword">False</span>  <span class="keyword">True</span> <span class="keyword">False</span> <span class="keyword">False</span>]</span><br><span class="line"><span class="type">bool</span></span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调整数据类型</span></span><br><span class="line"><span class="built_in">t6</span> = <span class="built_in">t5</span>.astype(<span class="string">&quot;int8&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;t6&quot;</span>, <span class="built_in">t6</span>)</span><br><span class="line">print(<span class="built_in">t6</span>.dtype)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t6 [1<span class="number"> 1 </span>0<span class="number"> 1 </span>0 0]</span><br><span class="line">int8</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># numpy中的小数</span><br><span class="line">t7 = <span class="built_in">np</span>.<span class="built_in">array</span>([<span class="built_in">random</span>.<span class="built_in">random</span>() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t7&quot;</span>, t7)</span><br><span class="line"><span class="built_in">print</span>(t7.dtype)</span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t7 [<span class="number">0.84161528</span> <span class="number">0.96569646</span> <span class="number">0.53128828</span> <span class="number">0.52827078</span> <span class="number">0.46984309</span> <span class="number">0.84778391</span></span><br><span class="line"> <span class="number">0.19475405</span> <span class="number">0.75765394</span> <span class="number">0.39033226</span> <span class="number">0.18261529</span>]</span><br><span class="line">float64</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t8 = np<span class="selector-class">.round</span>(t7, <span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;t8&quot;</span>, t8)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t8 [<span class="number">0.84 0.97</span> <span class="number">0.53 0.53</span> <span class="number">0.47 0.85</span> <span class="number">0.19 0.76</span> <span class="number">0.39 0.18</span>]</span><br></pre></td></tr></table></figure><h3 id="3-不同维度数组"><a href="#3-不同维度数组" class="headerlink" title="3.不同维度数组"></a>3.不同维度数组</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维</span></span><br><span class="line">t9 = np.arange(12)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t9&quot;</span>, t9)</span><br><span class="line"><span class="comment"># shape展示数据的形状</span></span><br><span class="line"><span class="built_in">print</span>(t9.shape)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t9 [<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span><span class="number"> 3 </span><span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span><span class="number"> 7 </span><span class="number"> 8 </span><span class="number"> 9 </span>10 11]</span><br><span class="line">(12,)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 二维</span><br><span class="line">t10 = np.array(<span class="string">[[1, 2, 3], [4, 5, 6]]</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t10&quot;</span>, t10)</span><br><span class="line"><span class="built_in">print</span>(t10.shape)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t10 <span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 三维</span><br><span class="line">t11 = np.array(<span class="string">[[[1, 2, 3], [4, 5, 6]]</span>, <span class="string">[[7, 8, 9], [10, 11, 12]]</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t11&quot;</span>, t11)</span><br><span class="line"><span class="built_in">print</span>(t11.shape)</span><br><span class="line"></span><br><span class="line">t12 = np.arange(<span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t12&quot;</span>, t12)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t11 [[[<span class="number"> 1 </span><span class="number"> 2 </span> 3]</span><br><span class="line">  [<span class="number"> 4 </span><span class="number"> 5 </span> 6]]</span><br><span class="line"> [[<span class="number"> 7 </span><span class="number"> 8 </span> 9]</span><br><span class="line">  [10<span class="number"> 11 </span>12]]]</span><br><span class="line">(2, 2, 3)</span><br><span class="line">t12 [<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span><span class="number"> 3 </span><span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span><span class="number"> 7 </span><span class="number"> 8 </span><span class="number"> 9 </span>10 11]</span><br></pre></td></tr></table></figure><h3 id="4-维度转换"><a href="#4-维度转换" class="headerlink" title="4.维度转换"></a>4.维度转换</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维转二维</span></span><br><span class="line">t13 = t12.reshape(3, 4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t13&quot;</span>, t13)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t13 [[<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span> 3]</span><br><span class="line"> [<span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span> 7]</span><br><span class="line"> [<span class="number"> 8 </span><span class="number"> 9 </span>10 11]]</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维转三维</span></span><br><span class="line"><span class="attribute">t14</span> = np.array(range(<span class="number">24</span>)).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="attribute">print</span>(<span class="string">&quot;t14&quot;</span>, t14)</span><br><span class="line"><span class="attribute">print</span>(<span class="string">&quot;---------------&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t14 [[[<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span> 3]</span><br><span class="line">  [<span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span> 7]</span><br><span class="line">  [<span class="number"> 8 </span><span class="number"> 9 </span>10 11]]</span><br><span class="line"> [[12<span class="number"> 13 </span>14 15]</span><br><span class="line">  [16<span class="number"> 17 </span>18 19]</span><br><span class="line">  [20<span class="number"> 21 </span>22 23]]]</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三维转二维</span></span><br><span class="line"><span class="attribute">t15</span> = t14.reshape(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"><span class="attribute">print</span>(<span class="string">&quot;t15&quot;</span>, t15)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t15 [[<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span><span class="number"> 3 </span><span class="number"> 4 </span> 5]</span><br><span class="line"> [<span class="number"> 6 </span><span class="number"> 7 </span><span class="number"> 8 </span><span class="number"> 9 </span>10 11]</span><br><span class="line"> [12<span class="number"> 13 </span>14<span class="number"> 15 </span>16 17]</span><br><span class="line"> [18<span class="number"> 19 </span>20<span class="number"> 21 </span>22 23]]</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二维转一维</span></span><br><span class="line">t16 = t15.reshape(24)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t16&quot;</span>, t16)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t16 [<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span><span class="number"> 3 </span><span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span><span class="number"> 7 </span><span class="number"> 8 </span><span class="number"> 9 </span>10<span class="number"> 11 </span>12<span class="number"> 13 </span>14<span class="number"> 15 </span>16<span class="number"> 17 </span>18<span class="number"> 19 </span>20<span class="number"> 21 </span>22 23]</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">flatten</span>将数组展开成一维数组</span><br><span class="line"><span class="keyword">print</span>(len(t14.<span class="keyword">flatten</span>()))</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure><h2 id="4-数组的运算"><a href="#4-数组的运算" class="headerlink" title="4.数组的运算"></a>4.数组的运算</h2><h4 id="1-数组和数的计算"><a href="#1-数组和数的计算" class="headerlink" title="1.数组和数的计算"></a>1.数组和数的计算</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组与数的计算（对每一个值进行计算）</span></span><br><span class="line">t1 = np.array(range(10))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1&quot;</span>, t1)</span><br><span class="line"><span class="comment"># 数组的加法</span></span><br><span class="line">t2 = t1 + 2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组与数的加法&quot;</span>, t2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的减法</span></span><br><span class="line">t3 = t1 - 1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组与数的减法&quot;</span>, t3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的乘法</span></span><br><span class="line">t4 = t1 * 3</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组与数的乘法&quot;</span>, t4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的除法</span></span><br><span class="line">t5 = t1 / 2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组与数的除法&quot;</span>, t5)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t1 [0<span class="number"> 1 </span>2<span class="number"> 3 </span>4<span class="number"> 5 </span>6<span class="number"> 7 </span>8 9]</span><br><span class="line">数组与数的加法 [<span class="number"> 2 </span><span class="number"> 3 </span><span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span><span class="number"> 7 </span><span class="number"> 8 </span><span class="number"> 9 </span>10 11]</span><br><span class="line">数组与数的减法 [-1 <span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span><span class="number"> 3 </span><span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span><span class="number"> 7 </span> 8]</span><br><span class="line">数组与数的乘法 [<span class="number"> 0 </span><span class="number"> 3 </span><span class="number"> 6 </span><span class="number"> 9 </span>12<span class="number"> 15 </span>18<span class="number"> 21 </span>24 27]</span><br><span class="line">数组与数的除法 [0.  0.5 1.  1.5 2.  2.5 3.  3.5 4.  4.5]</span><br></pre></td></tr></table></figure><h4 id="2-数组和数组的计算"><a href="#2-数组和数组的计算" class="headerlink" title="2.数组和数组的计算"></a>2.数组和数组的计算</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 数组与数组之间的计算（列数相同或者行数相同就可以进行计算）</span><br><span class="line">t6 <span class="operator">=</span> np.arange(<span class="number">1</span>, <span class="number">25</span>).reshape(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">t7 <span class="operator">=</span> np.arange(<span class="number">100</span>, <span class="number">124</span>).reshape(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t7&quot;</span>, t7)</span><br><span class="line"></span><br><span class="line">t8 <span class="operator">=</span> t6 <span class="operator">+</span> t7</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组与数组的加法<span class="subst">\n</span>&quot;</span>, t8)</span><br><span class="line"></span><br><span class="line">t9 <span class="operator">=</span> t7 <span class="operator">-</span> t6</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组与数组的减法<span class="subst">\n</span>&quot;</span>, t9)</span><br><span class="line"></span><br><span class="line">t10 <span class="operator">=</span> t6 <span class="operator">*</span> t7</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组与数组的乘法<span class="subst">\n</span>&quot;</span>, t10)</span><br><span class="line"></span><br><span class="line">t11 <span class="operator">=</span> t7 <span class="comment">// t6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组与数组的除法<span class="subst">\n</span>&quot;</span>, t11)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">t6 [[<span class="number"> 1 </span><span class="number"> 2 </span><span class="number"> 3 </span><span class="number"> 4 </span><span class="number"> 5 </span> 6]</span><br><span class="line"> [<span class="number"> 7 </span><span class="number"> 8 </span><span class="number"> 9 </span>10<span class="number"> 11 </span>12]</span><br><span class="line"> [13<span class="number"> 14 </span>15<span class="number"> 16 </span>17 18]</span><br><span class="line"> [19<span class="number"> 20 </span>21<span class="number"> 22 </span>23 24]]</span><br><span class="line">t7 [[100<span class="number"> 101 </span>102<span class="number"> 103 </span>104 105]</span><br><span class="line"> [106<span class="number"> 107 </span>108<span class="number"> 109 </span>110 111]</span><br><span class="line"> [112<span class="number"> 113 </span>114<span class="number"> 115 </span>116 117]</span><br><span class="line"> [118<span class="number"> 119 </span>120<span class="number"> 121 </span>122 123]]</span><br><span class="line">数组与数组的加法</span><br><span class="line"> [[101<span class="number"> 103 </span>105<span class="number"> 107 </span>109 111]</span><br><span class="line"> [113<span class="number"> 115 </span>117<span class="number"> 119 </span>121 123]</span><br><span class="line"> [125<span class="number"> 127 </span>129<span class="number"> 131 </span>133 135]</span><br><span class="line"> [137<span class="number"> 139 </span>141<span class="number"> 143 </span>145 147]]</span><br><span class="line">数组与数组的减法</span><br><span class="line"> [[99<span class="number"> 99 </span>99<span class="number"> 99 </span>99 99]</span><br><span class="line"> [99<span class="number"> 99 </span>99<span class="number"> 99 </span>99 99]</span><br><span class="line"> [99<span class="number"> 99 </span>99<span class="number"> 99 </span>99 99]</span><br><span class="line"> [99<span class="number"> 99 </span>99<span class="number"> 99 </span>99 99]]</span><br><span class="line">数组与数组的乘法</span><br><span class="line"> [[<span class="number"> 100 </span><span class="number"> 202 </span><span class="number"> 306 </span><span class="number"> 412 </span><span class="number"> 520 </span> 630]</span><br><span class="line"> [<span class="number"> 742 </span><span class="number"> 856 </span><span class="number"> 972 </span>1090<span class="number"> 1210 </span>1332]</span><br><span class="line"> [1456<span class="number"> 1582 </span>1710<span class="number"> 1840 </span>1972 2106]</span><br><span class="line"> [2242<span class="number"> 2380 </span>2520<span class="number"> 2662 </span>2806 2952]]</span><br><span class="line">数组与数组的除法</span><br><span class="line"> [[100 <span class="number"> 50 </span><span class="number"> 34 </span><span class="number"> 25 </span><span class="number"> 20 </span> 17]</span><br><span class="line"> [<span class="number"> 15 </span><span class="number"> 13 </span><span class="number"> 12 </span><span class="number"> 10 </span><span class="number"> 10 </span>  9]</span><br><span class="line"> [ <span class="number"> 8 </span> <span class="number"> 8 </span> <span class="number"> 7 </span> <span class="number"> 7 </span> <span class="number"> 6 </span>  6]</span><br><span class="line"> [ <span class="number"> 6 </span> <span class="number"> 5 </span> <span class="number"> 5 </span> <span class="number"> 5 </span> <span class="number"> 5 </span>  5]]</span><br></pre></td></tr></table></figure><h2 id="5-轴-axis"><a href="#5-轴-axis" class="headerlink" title="5.轴(axis)"></a>5.轴(axis)</h2><p>在numpy中可以理解为方向,使用0,1,2…数字表示,对于一个一维数组,只有一个0轴,对于2维数组(shape(2,2)),有0轴和1轴,对于三维数组(shape(2,2, 3)),有0,1,2轴</p><p>有了轴的概念之后,我们计算会更加方便,比如计算一个2维数组的平均值,必须指定是计算哪个方向上面的数字的平均值</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117143357482.png" alt="image-20230117143357482"></p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117143438408.png" alt="image-20230117143438408"></p><h2 id="6-读取数据"><a href="#6-读取数据" class="headerlink" title="6.读取数据"></a>6.读取数据</h2><p>CSV:Comma-Separated Value,逗号分隔值文件</p><p>显示：表格状态</p><p>源文件：换行和逗号分隔行列的格式化文本,每一行的数据表示一条记录</p><p>由于csv便于展示,读取和写入,所以很多地方也是用csv的格式存储和传输中小型的数据,我们会经常操作csv格式的文件,但是操作数据库中的数据也是很容易的实现的</p><p><strong>np.loadtxt(fname,dtype=np.float,delimiter=None,skiprows=0,usecols=None,unpack=False)读取数据</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">frame</td><td style="text-align:center">文件、字符串或产生器，可以是.gz或bz2压缩文件</td></tr><tr><td style="text-align:center">dtype</td><td style="text-align:center">数据类型，可选，CSV的字符串以什么数据类型读入数组中，默认np.float</td></tr><tr><td style="text-align:center">delimiter</td><td style="text-align:center">分隔字符串，默认是任何空格，改为逗号</td></tr><tr><td style="text-align:center">skiprows</td><td style="text-align:center">跳过前x行，一般跳过第一行表头</td></tr><tr><td style="text-align:center">usecols</td><td style="text-align:center">读取指定的列，索引，元组类型</td></tr><tr><td style="text-align:center">unpack</td><td style="text-align:center">如果True,读入属性将分别写入不同数组变量，False读入数据只写入一个数组变量，默认False</td></tr></tbody></table></div><p>有一个英国和美国各自youtube1000多个视频的点击,喜欢,不喜欢,评论数量([“views”,”likes”,”dislikes”,”comment_total”])的csv用loadtxt来对其进行操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频的点击,喜欢,不喜欢,评论数量</span></span><br><span class="line"></span><br><span class="line">us_file_path = <span class="string">&quot;./youtube_video_data/US_video_data_numbers.csv&quot;</span></span><br><span class="line">uk_file_path = <span class="string">&quot;./youtube_video_data/GB_video_data_numbers.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delimiter分隔字符串，默认是空格</span></span><br><span class="line"><span class="comment"># dtype数据类型，默认是numpy.float</span></span><br><span class="line"><span class="comment"># unpack将数组进行转置（可以将列变为行）</span></span><br><span class="line">t1 = np.loadtxt(us_file_path, <span class="attribute">delimiter</span>=<span class="string">&quot;,&quot;</span>, <span class="attribute">dtype</span>=<span class="string">&quot;int&quot;</span>, <span class="attribute">unpack</span>=<span class="literal">True</span>)</span><br><span class="line">t2 = np.loadtxt(us_file_path, <span class="attribute">delimiter</span>=<span class="string">&quot;,&quot;</span>, <span class="attribute">dtype</span>=<span class="string">&quot;int&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--------------------------------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[4394029<span class="number"> 7860119 </span>5845909 ... <span class="number"> 142463 </span>2162240  515000]</span><br><span class="line"> [<span class="number"> 320053 </span><span class="number"> 185853 </span><span class="number"> 576597 </span>...   <span class="number"> 4231 </span> <span class="number"> 41032 </span>  34727]</span><br><span class="line"> [  <span class="number"> 5931 </span> <span class="number"> 26679 </span> <span class="number"> 39774 </span>...    <span class="number"> 148 </span>  <span class="number"> 1384 </span>    195]</span><br><span class="line"> [ <span class="number"> 46245 </span>     <span class="number"> 0 </span><span class="number"> 170708 </span>...    <span class="number"> 279 </span>  <span class="number"> 4737 </span>   4722]]</span><br><span class="line">-----------------------------------------------------<span class="language-yaml"><span class="meta">---</span></span></span><br><span class="line"><span class="language-yaml">[[<span class="number">4394029</span>  <span class="number">320053</span>    <span class="number">5931   </span><span class="number">46245</span>]</span></span><br><span class="line"><span class="language-yaml"> [<span class="number">7860119</span>  <span class="number">185853</span>   <span class="number">26679</span>       <span class="number">0</span>]</span></span><br><span class="line"><span class="language-yaml"> [<span class="number">5845909</span>  <span class="number">576597</span>   <span class="number">39774</span>  <span class="number">170708</span>]</span></span><br><span class="line"><span class="language-yaml"> <span class="string">...</span></span></span><br><span class="line"> [<span class="number"> 142463 </span>  <span class="number"> 4231 </span>   <span class="number"> 148 </span>    279]</span><br><span class="line"> [2162240  <span class="number"> 41032 </span>  <span class="number"> 1384 </span>   4737]</span><br><span class="line"> [<span class="number"> 515000 </span> <span class="number"> 34727 </span>   <span class="number"> 195 </span>   4722]]</span><br></pre></td></tr></table></figure><ul><li>delimiter:指定边界符号是什么，不指定会导致每行数据为一个整体的字符串而报错</li><li>dtype:默认情况下对于较大的数据会将其变为科学计数的方式</li><li>upack:默认是Flase(O),默认情况下，有多少条数据，就会有多少列</li></ul><p>​ 为True(1)的情况下，每一列的数据会组成一行，原始数据有多少列，加载出来的数据就会有多少行，相当于<br>转置的效果</p><p>转置是一种变换,对于numpy中的数组来说,就是在对角线方向交换数据,目的也是为了更方便的去处理数据</p><p><strong>其他的转置方法</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t3 = np.arange(24).reshape(4, 6)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----transpose将数组转置-----&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t3.transpose())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----T转置-----&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t3.T)</span><br><span class="line"><span class="comment"># swapaxes交换轴的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----swapaxes转置-----&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t3.swapaxes(1, 0))</span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">[<span class="comment">[ 0  1  2  3  4  5]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 6  7  8  9 10 11]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[12 13 14 15 16 17]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[18 19 20 21 22 23]</span>]</span></span><br><span class="line">-----transpose将数组转置-----</span><br><span class="line"><span class="comment">[<span class="comment">[ 0  6 12 18]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 1  7 13 19]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 2  8 14 20]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 3  9 15 21]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 4 10 16 22]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 5 11 17 23]</span>]</span></span><br><span class="line">-----T转置-----</span><br><span class="line"><span class="comment">[<span class="comment">[ 0  6 12 18]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 1  7 13 19]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 2  8 14 20]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 3  9 15 21]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 4 10 16 22]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 5 11 17 23]</span>]</span></span><br><span class="line">-----swapaxes转置-----</span><br><span class="line"><span class="comment">[<span class="comment">[ 0  6 12 18]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 1  7 13 19]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 2  8 14 20]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 3  9 15 21]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 4 10 16 22]</span></span></span><br><span class="line"><span class="comment"> <span class="comment">[ 5 11 17 23]</span>]</span></span><br></pre></td></tr></table></figure><h2 id="7-numpy索引和切片"><a href="#7-numpy索引和切片" class="headerlink" title="7.numpy索引和切片"></a>7.numpy索引和切片</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">数组<span class="comment">[行,列]</span>      取指定的某行的某列元素</span><br><span class="line">如：arange<span class="comment">[1,2]</span>     取第二行第三列的数据</span><br><span class="line"></span><br><span class="line">数组<span class="comment">[:,列]</span>      取指定的某列的数据</span><br><span class="line">如：arange<span class="comment">[:,2]</span>      取第三列的所有数据</span><br><span class="line">如：arange<span class="comment">[:,<span class="comment">[0,2,7]</span>]</span>    取第一、三、八列的所有数据</span><br><span class="line"></span><br><span class="line">数组<span class="comment">[:,开始:结束:步长]</span>    取从指定位置开始到指定位置结束的步长的所有列的值</span><br><span class="line">如：arange<span class="comment">[:,5:]</span>     取从第四列开始所有列的值</span><br><span class="line">如：arange<span class="comment">[:,0:10:2]</span>    取从0到10步长为2的所有列的值</span><br><span class="line"></span><br><span class="line">数组<span class="comment">[行,:]</span>      取指定的某行的数据</span><br><span class="line">如：arange<span class="comment">[2,:]</span>     取第三行的所有数据</span><br><span class="line">如；arange<span class="comment">[<span class="comment">[0,3,9]</span>,:]</span>    取第一、四十行的所有数据</span><br><span class="line"></span><br><span class="line">数组<span class="comment">[开始:结束:步长,:]</span>    取从指定位置开始，到指定位置结束的步长的所有行的值</span><br><span class="line">如：arange<span class="comment">[5:,:]</span>     取从第四行开始所有行的值</span><br><span class="line">如：arange<span class="comment">[0:10:2,:]</span>    取从0到10步长为2的所有行的值</span><br><span class="line"></span><br><span class="line">数组<span class="comment">[开始:结束:步长,开始:结束:步长]</span>取从指定位置开始，到指定位置结束的步长的行的指定位置开始，到指定位置结束的步长的列的值</span><br><span class="line">如：arange<span class="comment">[2:,2]</span>     取从第三行开始所有的第三列的值</span><br><span class="line">如：arange<span class="comment">[2:,2:]</span>     取从第三行开始所有第三列及之后列的值</span><br><span class="line">如：arange<span class="comment">[2:,2:5]</span>    取从第三行开始所有第三列到第五列的的值</span><br><span class="line">如：arange<span class="comment">[2:,0:10:2]</span>    取从第三行开始从0到10步长为2的所有列的值</span><br><span class="line">如：arange<span class="comment">[2,2:]</span>     取第三行所有第三列及之后列的值</span><br><span class="line">如：arange<span class="comment">[2:10,2:]</span>    取第三行到第十行的第三列及之后列的值</span><br><span class="line">如：arange<span class="comment">[0:10:2,2]</span>    取从0到10步长为2行所有第三列的值</span><br><span class="line">如：arange<span class="comment">[0:10:2,2:]</span>    取从0到10步长为2行所有第三列及之后列的值</span><br><span class="line"></span><br><span class="line">数组<span class="comment">[<span class="comment">[指定的行数]</span>,<span class="comment">[指定的列数]</span>]</span>   取需要的行数和列数</span><br><span class="line">如：arange<span class="comment">[<span class="comment">[1,4]</span>,<span class="comment">[4,6]</span>]</span>   取第二行第五列的值和第五行第七列的值</span><br></pre></td></tr></table></figure><h3 id="1-numpy中数值的修改"><a href="#1-numpy中数值的修改" class="headerlink" title="1.numpy中数值的修改"></a>1.numpy中数值的修改</h3><p>对取到的值使用=来进行修改值</p><h3 id="2-numpy中布尔索引"><a href="#2-numpy中布尔索引" class="headerlink" title="2.numpy中布尔索引"></a>2.numpy中布尔索引</h3><p>按条件来进行修改值(选中结果为True的)</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组[条件] <span class="operator">=</span> 修改的值</span><br><span class="line">如：arange[arange &lt; <span class="number">100</span>] <span class="operator">=</span> <span class="number">50</span>   即将数组中小于<span class="number">100</span>的数修改成<span class="number">50</span></span><br></pre></td></tr></table></figure><h3 id="3-numpy中的三元运算符"><a href="#3-numpy中的三元运算符" class="headerlink" title="3.numpy中的三元运算符"></a>3.numpy中的三元运算符</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.<span class="keyword">where</span>(条件，正确修改的值，错误修改的值)</span><br><span class="line">如：numpy.<span class="keyword">where</span>(arange &lt; <span class="number">50</span>,<span class="number">10</span>,<span class="number">20</span>) 即将数组中小于<span class="number">50</span>的修改为<span class="number">10</span>，大于<span class="number">50</span>的修改为<span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="4-numpy中的clip-裁剪"><a href="#4-numpy中的clip-裁剪" class="headerlink" title="4.numpy中的clip(裁剪)"></a>4.numpy中的clip(裁剪)</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy<span class="selector-class">.clip</span><span class="selector-attr">[裁剪的数组，最小的值，最大的值]</span>即将小于最小的值修改为最小的值，将大于最大的值修改为最大的值</span><br><span class="line">如：numpy<span class="selector-class">.clip</span><span class="selector-attr">[arange,4,6]</span>   即将小于<span class="number">4</span>的值修改为<span class="number">4</span>，将大于<span class="number">6</span>的值修改为<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="5-numpy中的nan和inf"><a href="#5-numpy中的nan和inf" class="headerlink" title="5.numpy中的nan和inf"></a>5.numpy中的nan和inf</h3><p>nan(NAN,Nan):not a number表示不是一个数字</p><p>什么时候numpy中会出现nan:</p><p>​  当我们读取本地的文件为float的时候，如果有缺失，就会出现nan</p><p>​  当做了一个不合适的计算的时候(比如无穷大(inf)减去无穷大)</p><p>inf(-inf,inf):infinity,inf表示正无穷，-inf表示负无穷</p><p>什么时候会出现inf包括(-inf,+inf)</p><p>​  比如一个数字除以0，(python中直接会报错，numpy中是一个inf或者-inf)</p><h3 id="6-numpy中的nan的注意点"><a href="#6-numpy中的nan的注意点" class="headerlink" title="6.numpy中的nan的注意点"></a>6.numpy中的nan的注意点</h3><ul><li>两个nan是不相等的</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.<span class="literal">nan</span> == numpy.<span class="literal">nan</span>  <span class="literal">False</span></span><br><span class="line">numpy.<span class="literal">nan</span> != numpy.<span class="literal">nan</span>  <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li><p>count_nonzero统计数组中非零元素的个数</p><p>由于nan不等于nan，所以为False，且False为1，所以count_nonzero可以统计数组中nan的个数</p></li></ul><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.count_nonzero(arange != arange)</span><br></pre></td></tr></table></figure><ul><li>判断是否为nan</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.<span class="built_in">isnan</span>(arange)</span><br></pre></td></tr></table></figure><ul><li>nan和任何值计算都为nan</li></ul><h3 id="7-numpy中常用统计函数"><a href="#7-numpy中常用统计函数" class="headerlink" title="7.numpy中常用统计函数"></a>7.numpy中常用统计函数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th>函数</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center">求和</td><td>numpy.sum(数组，轴)</td><td>求整个数组的和或数组的某行某列的和</td></tr><tr><td style="text-align:center">均值</td><td>numpy.mean(数组，轴)</td><td>受离群点的影响较大</td></tr><tr><td style="text-align:center">中值</td><td>numpy.median(数组，轴)</td><td></td></tr><tr><td style="text-align:center">最大值</td><td>numpy.max(数组，轴)</td><td></td></tr><tr><td style="text-align:center">最小值</td><td>numpy.min(数组，轴)</td><td></td></tr><tr><td style="text-align:center">极值</td><td>numpy.ptp(数组，轴)</td><td>即最大值和最小值之差</td></tr><tr><td style="text-align:center">标准差</td><td>numpy.std(数组，轴)</td><td>标准差是一组数据平均值分散程度的一种度量。一个较大的标准差，代表大部分数值和其平均值之间差异较大；一个较小的标准差，代表这些数值较接近平均值反映出数据的波动稳定情况，越大表示波动越大，约不稳定</td></tr></tbody></table></div><h3 id="8-numpy缺失值填充均值"><a href="#8-numpy缺失值填充均值" class="headerlink" title="8.numpy缺失值填充均值"></a>8.numpy缺失值填充均值</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import numpy as <span class="built_in">np</span></span><br><span class="line"></span><br><span class="line">def fill_ndarray(t1):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t1.shape[<span class="number">1</span>]):  # 遍历每一列</span><br><span class="line">        temp_col = t1[:, i]  # 当前的一列</span><br><span class="line">        nan_num = <span class="built_in">np</span>.count_nonzero(temp_col != temp_col)</span><br><span class="line">        <span class="keyword">if</span> nan_num != <span class="number">0</span>:  # 不为<span class="number">0</span>，说明当前这一列中有nan</span><br><span class="line">            temp_not_nan_col = temp_col[temp_col == temp_col]  # 当前一列不为nan的<span class="built_in">array</span></span><br><span class="line">            temp_col[<span class="built_in">np</span>.isnan(temp_col)] = <span class="built_in">np</span>.<span class="built_in">mean</span>(</span><br><span class="line">                temp_not_nan_col</span><br><span class="line">            )  # 选中当前为nan的位置，把值赋值为不为nan的均值</span><br><span class="line">    <span class="built_in">return</span> t1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t1 = <span class="built_in">np</span>.arange(<span class="number">12</span>)</span><br><span class="line">    t1 = <span class="built_in">np</span>.reshape(t1, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;t1&quot;</span>, t1)</span><br><span class="line">    t1 = t1.astype(<span class="built_in">float</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    t1[<span class="number">1</span>, <span class="number">2</span>:] = <span class="built_in">np</span>.nan</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;t1&quot;</span>, t1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    t1 = fill_ndarray(t1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;new t1&quot;</span>, t1)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t1 <span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]]</span></span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line">t1 <span class="string">[[ 0.  1.  2.  3.]</span></span><br><span class="line"><span class="string"> [ 4.  5. nan nan]</span></span><br><span class="line"><span class="string"> [ 8.  9. 10. 11.]]</span></span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line">new t1 <span class="string">[[ 0.  1.  2.  3.]</span></span><br><span class="line"><span class="string"> [ 4.  5.  6.  7.]</span></span><br><span class="line"><span class="string"> [ 8.  9. 10. 11.]]</span></span><br></pre></td></tr></table></figure><h3 id="9-数组的拼接"><a href="#9-数组的拼接" class="headerlink" title="9.数组的拼接"></a>9.数组的拼接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numpy.vstack((arange1,arange2))   竖直拼接</span><br><span class="line">numpy.hstack((arange1,arange2))   水平拼接</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">t1 = np<span class="selector-class">.arange</span>(<span class="number">12</span>)<span class="selector-class">.reshape</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">t2 = np<span class="selector-class">.arange</span>(<span class="number">12</span>, <span class="number">24</span>)<span class="selector-class">.reshape</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;t1&quot;</span>, t1)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;t2&quot;</span>, t2)</span></span></span><br><span class="line"></span><br><span class="line">vertically = np<span class="selector-class">.vstack</span>((t1, t2))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;竖直拼接\n&quot;</span>, vertically)</span></span></span><br><span class="line"></span><br><span class="line">horizontally = np<span class="selector-class">.hstack</span>((t1, t2))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;水平拼接\n&quot;</span>, horizontally)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">t1 [[<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span> 3]</span><br><span class="line"> [<span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span> 7]</span><br><span class="line"> [<span class="number"> 8 </span><span class="number"> 9 </span>10 11]]</span><br><span class="line">t2 [[12<span class="number"> 13 </span>14 15]</span><br><span class="line"> [16<span class="number"> 17 </span>18 19]</span><br><span class="line"> [20<span class="number"> 21 </span>22 23]]</span><br><span class="line">竖直拼接</span><br><span class="line"> [[<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span> 3]</span><br><span class="line"> [<span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span> 7]</span><br><span class="line"> [<span class="number"> 8 </span><span class="number"> 9 </span>10 11]</span><br><span class="line"> [12<span class="number"> 13 </span>14 15]</span><br><span class="line"> [16<span class="number"> 17 </span>18 19]</span><br><span class="line"> [20<span class="number"> 21 </span>22 23]]</span><br><span class="line">水平拼接</span><br><span class="line"> [[<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span><span class="number"> 3 </span>12<span class="number"> 13 </span>14 15]</span><br><span class="line"> [<span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span><span class="number"> 7 </span>16<span class="number"> 17 </span>18 19]</span><br><span class="line"> [<span class="number"> 8 </span><span class="number"> 9 </span>10<span class="number"> 11 </span>20<span class="number"> 21 </span>22 23]]</span><br></pre></td></tr></table></figure><h3 id="10-数组的行列交换"><a href="#10-数组的行列交换" class="headerlink" title="10.数组的行列交换"></a>10.数组的行列交换</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t1 = np<span class="selector-class">.arange</span>(<span class="number">12</span>)<span class="selector-class">.reshape</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">t2 = np<span class="selector-class">.arange</span>(<span class="number">12</span>, <span class="number">24</span>)<span class="selector-class">.reshape</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">t1<span class="selector-attr">[[1, 2]</span>, :] = t1<span class="selector-attr">[[2, 1]</span>, :]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;行交换\n&quot;</span>, t1)</span></span></span><br><span class="line"></span><br><span class="line">t2<span class="selector-attr">[:, [0, 2]</span>] = t2<span class="selector-attr">[:, [2, 0]</span>]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;列交换\n&quot;</span>, t2)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">t1 [[<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span> 3]</span><br><span class="line"> [<span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span> 7]</span><br><span class="line"> [<span class="number"> 8 </span><span class="number"> 9 </span>10 11]]</span><br><span class="line">t2 [[12<span class="number"> 13 </span>14 15]</span><br><span class="line"> [16<span class="number"> 17 </span>18 19]</span><br><span class="line"> [20<span class="number"> 21 </span>22 23]]</span><br><span class="line"> </span><br><span class="line"> 行交换</span><br><span class="line"> [[<span class="number"> 0 </span><span class="number"> 1 </span><span class="number"> 2 </span> 3]</span><br><span class="line"> [<span class="number"> 8 </span><span class="number"> 9 </span>10 11]</span><br><span class="line"> [<span class="number"> 4 </span><span class="number"> 5 </span><span class="number"> 6 </span> 7]]</span><br><span class="line">列交换</span><br><span class="line"> [[14<span class="number"> 13 </span>12 15]</span><br><span class="line"> [18<span class="number"> 17 </span>16 19]</span><br><span class="line"> [22<span class="number"> 21 </span>20 23]]</span><br></pre></td></tr></table></figure><h3 id="11-numpy更多好用的方法"><a href="#11-numpy更多好用的方法" class="headerlink" title="11.numpy更多好用的方法"></a>11.numpy更多好用的方法</h3><ol><li>获取最大值最小值的位置<ol><li>numpy.argmax(arange,axis=0)</li><li>numpy.argmin(arange,axis=1)</li></ol></li><li>创建一个全0的数组: numpy.zeros((3,4))</li><li>创建一个全1的数组:numpy.ones((3,4))</li><li>创建一个对角线为1的正方形数组(方阵)：numpy.eye(3)</li></ol><h3 id="12-numpy生成随机数"><a href="#12-numpy生成随机数" class="headerlink" title="12.numpy生成随机数"></a>12.numpy生成随机数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">.rand(d0,d1,…dn)</td><td style="text-align:center">创建d0-dn维度的均匀分布的随机数数组，浮点数，范围从0-1</td></tr><tr><td style="text-align:center">.randn(d0,d1,…dn)</td><td style="text-align:center">创建d0-dn维度的标准正态分布随机数，浮点数，平均数0，标准差1</td></tr><tr><td style="text-align:center">.randint(low,high,(shape))</td><td style="text-align:center">从给定上下限范围选取随机整数，范围是low,high，形状是shape</td></tr><tr><td style="text-align:center">.uniform(low,high,(size))</td><td style="text-align:center">产生具有均匀分布的数组，low起始值，high结束值，size形状</td></tr><tr><td style="text-align:center">.normal(loc,scale,(size))</td><td style="text-align:center">从指定正态分布中随机抽取样本，分布中心是loc(概率分布的均值)，标准差是scale，形状是size</td></tr><tr><td style="text-align:center">.seed(s)</td><td style="text-align:center">随机数种子，s是给定的种子值。因为计算机生成的是伪随机数，所以通过设定相同的随机数种子，可以每次生成相同的随机数</td></tr></tbody></table></div><h3 id="13-numpy的注意点copy和view"><a href="#13-numpy的注意点copy和view" class="headerlink" title="13.numpy的注意点copy和view"></a>13.numpy的注意点copy和view</h3><p>1.a=b 完全不复制，a和b相互影响</p><p>2.a = b[:],视图的操作，一种切片，会创建新的对象a，但是a的数据完全由b保管，他们两个的数据变化是一致的，</p><p>3.a = b.copy(),复制，a和b互不影响</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib</title>
      <link href="/posts/9ebec7b8.html"/>
      <url>/posts/9ebec7b8.html</url>
      
        <content type="html"><![CDATA[<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><h2 id="1-什么是matplotlib"><a href="#1-什么是matplotlib" class="headerlink" title="1.什么是matplotlib"></a>1.什么是matplotlib</h2><p>matplotlib: 最流行的Python底层绘图库，<code>主要做数据可视化图表,名字取材于MATLAB</code>，模仿MATLAB构建</p><ol><li>能将数据进行<code>可视化</code>,更<code>直观</code>的呈现</li><li>使数据更加<code>客观</code>、<code>更具说服力</code></li></ol><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> matplotlib</span><br></pre></td></tr></table></figure><h2 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h2><h3 id="1-绘图"><a href="#1-绘图" class="headerlink" title="1.绘图"></a>1.绘图</h3><p>每隔两个小时(range(2,26,2))的气温(℃)分别是[15,13,14.5,17,20,25,26,26,27,22,18,15]，使用matplotlib将数据可视化</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入pyplot</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = <span class="type">range</span>(<span class="number">2</span>, <span class="number">26</span>, <span class="number">2</span>)<span class="comment">#数据在x轴的位置是一个可迭代的对象</span></span><br><span class="line">y = [<span class="number">15</span>, <span class="number">13</span>, <span class="number">14</span>.<span class="number">5</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">15</span>]<span class="comment">#数据在y轴的位置是一个可迭代的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line"><span class="comment"># dpi可以控制图片清晰度</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="comment"># 传入x和y，通过plot绘制出折线图</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">plt.savefig(<span class="string">&quot;./t1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在程序执行的时候展示图片</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117122122905.png" alt="image-20230117122122905"></p><p>可以发现x轴的刻度与我们定义的的刻度不一样</p><h3 id="2-调整X或者Y轴上的刻度"><a href="#2-调整X或者Y轴上的刻度" class="headerlink" title="2.调整X或者Y轴上的刻度"></a>2.调整X或者Y轴上的刻度</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置x轴的刻度</span></span><br><span class="line"><span class="comment"># 当刻度太密集时候使用列表的步长（间隔取值）来解决，matplotlib会自动帮我们对应</span></span><br><span class="line"><span class="attribute">plt</span>.xticks(x[::<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 对列表进行迭代</span></span><br><span class="line"><span class="comment"># plt.xticks([i / 2 for i in range(2, 49)])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置y轴的刻度</span></span><br><span class="line"><span class="attribute">plt</span>.yticks(range(min(y), max(y) + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117122526826.png" alt="image-20230117122526826"></p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><p>如果列表a表示10点到12点的每一分钟的气温,如何绘制折线图观察每分钟气温的变化情况?<br>a= [random.randint(20,35) for i in range(120)]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">y = [random.randint(<span class="number">20</span>, <span class="number">35</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整x的刻度</span></span><br><span class="line">_xtick_labels = [<span class="string">&quot;10点&#123;&#125;分&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>)]</span><br><span class="line">_xtick_labels += [<span class="string">&quot;11点&#123;&#125;分&quot;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>)]</span><br><span class="line"><span class="comment"># 取步长，数字和字符串一一对应，数据的长度一样</span></span><br><span class="line">plt.xticks(x[::<span class="number">3</span>], _xtick_labels[::<span class="number">3</span>], rotation=<span class="number">45</span>)  <span class="comment"># rotation旋转的度数</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117122908512.png" alt="image-20230117122908512"></p><p>可以发现中文无法正确显示</p><p>为什么无法显示中文:</p><p>matplotlib默认不支持中文字符，因为默认的英文字体无法显示汉字</p><h3 id="3-设置中文显示"><a href="#3-设置中文显示" class="headerlink" title="3.设置中文显示"></a>3.设置中文显示</h3><p>在一开始加入</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置中文显示</span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117123143617.png" alt="image-20230117123143617"></p><p>那么x轴y轴和当前图形到底表示什么是不是应该明确一下呢?</p><h3 id="4-添加描述信息"><a href="#4-添加描述信息" class="headerlink" title="4.添加描述信息"></a>4.添加描述信息</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 添加描述消息</span><br><span class="line">plt.<span class="built_in">xlabel</span>(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line">plt.<span class="built_in">ylabel</span>(<span class="string">&quot;温度 单位(°C)&quot;</span>)</span><br><span class="line">plt.<span class="built_in">title</span>(<span class="string">&quot;10点到12每分钟气温的变化情况&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117123627695.png" alt="image-20230117123627695"></p><h3 id="5-自定义绘制图形的风格"><a href="#5-自定义绘制图形的风格" class="headerlink" title="5.自定义绘制图形的风格"></a>5.自定义绘制图形的风格</h3><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117124149529.png" alt="image-20230117124149529"></p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117124244713.png" alt="image-20230117124244713"></p><h3 id="6-图例"><a href="#6-图例" class="headerlink" title="6.图例"></a>6.图例</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># label和legend一起使用设置图例</span></span><br><span class="line">plt.plot(x, y1, <span class="attribute">label</span>=<span class="string">&quot;自己&quot;</span>, <span class="attribute">color</span>=<span class="string">&quot;orange&quot;</span>, <span class="attribute">linestyle</span>=<span class="string">&quot;:&quot;</span>, <span class="attribute">linewidth</span>=5)</span><br><span class="line">plt.plot(x, y2, <span class="attribute">label</span>=<span class="string">&quot;同桌&quot;</span>, <span class="attribute">color</span>=<span class="string">&quot;cyan&quot;</span>, <span class="attribute">linestyle</span>=<span class="string">&quot;--&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图例(loc设置图例位置)</span></span><br><span class="line">plt.legend(<span class="attribute">loc</span>=0)</span><br></pre></td></tr></table></figure><h2 id="4-常用统计图"><a href="#4-常用统计图" class="headerlink" title="4.常用统计图"></a>4.常用统计图</h2><p><code>折线图:</code>以折线的上升或下降来表示统计数量的增减变化的统计图</p><p><code>特点:</code>能够显示数据的变化趋势，反映事物的变化情况。(变化)</p><p><code>直方图:</code>由一系列高度不等的纵向条纹或线段表示数据分布的情况。</p><p>一般用横轴表示数据范围，纵轴表示分布情况。</p><p><code>特点:</code>绘制连<strong>续性</strong>的数据,展示一组或者多组数据的分布状况(统计)</p><p><code>条形图:</code>排列在工作表的列或行中的数据可以绘制到条形图中。</p><p><code>特点:</code>绘制连<strong>离散</strong>的数据,能够一眼看出各个数据的大小,比较数据之间的差别。(统计)</p><p><code>散点图:</code>用两组数据构成多个坐标点，考察坐标点的分布,判断两变量</p><p>之间是否存在某种关联或总结坐标点的分布模式。</p><p><code>特点:</code>判断变量之间是否存在数量关联趋势,展示离群点(分布规律)</p><h4 id="折线图的更多应用场景"><a href="#折线图的更多应用场景" class="headerlink" title="折线图的更多应用场景"></a>折线图的更多应用场景</h4><ul><li>呈现公司产品(不同区域)每天活跃用户数</li><li>呈现app每天下载数量</li><li>呈现产品新功能上线后,用户点击次数随时间的变化</li><li>呈现员工每天上下班时间</li></ul><h3 id="1-绘制散点图"><a href="#1-绘制散点图" class="headerlink" title="1.绘制散点图"></a>1.绘制散点图</h3><p><strong>scatter方法可以绘制散点图</strong></p><p>获取北京2016年3,10月份每天白天的最高气温(分别位于列表a,b),找出气温和随时间(天)变化的某种规律?</p><p>a = [11,17,16,11,12,11,12,6,6,7,8,9,12,15,14,17,18,21,16,17,20,14,15,15,15,19,21,22,22,22,23]</p><p>b = [26,26,28,19,21,17,16,19,18,20,20,19,22,23,17,20,21,20,22,15,11,15,5,13,17,10,11,13,12,13,6]</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line"><span class="attribute">plt</span>.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] =<span class="meta"> [&quot;SimHei&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">y3</span> =<span class="meta"> [11,17,16,11,12,11,12,6,6,7,8,9,12,15,14,17,18,21,16,17,20,14,15,15,15,19,21,22,22,22,23]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">y10</span> =<span class="meta"> [26,26,28,19,21,17,16,19,18,20,20,19,22,23,17,20,21,20,22,15,11,15,5,13,17,10,11,13,12,13,6]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">x3</span> = range(<span class="number">1</span>, <span class="number">32</span>)</span><br><span class="line"><span class="attribute">x10</span> = range(<span class="number">51</span>, <span class="number">82</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line"><span class="attribute">plt</span>.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># scatter绘制散点图</span></span><br><span class="line"><span class="attribute">plt</span>.scatter(x3, y3, label=<span class="string">&quot;3月&quot;</span>)</span><br><span class="line"><span class="attribute">plt</span>.scatter(x10, y10, label=<span class="string">&quot;10月&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整x轴的刻度</span></span><br><span class="line"><span class="attribute">_x</span> = list(x3) + list(x10)</span><br><span class="line"><span class="attribute">_xtick_labels</span> =<span class="meta"> [&quot;3月&#123;&#125;&quot;.format(i) for i in x3]</span></span><br><span class="line"><span class="attribute">_xtick_labels</span> +=<span class="meta"> [&quot;10月&#123;&#125;&quot;.format(i) for i in x3]</span></span><br><span class="line"><span class="attribute">plt</span>.xticks(_x, _xtick_labels, rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加描述信息</span></span><br><span class="line"><span class="attribute">plt</span>.xlabel(<span class="string">&quot;时间&quot;</span>)</span><br><span class="line"><span class="attribute">plt</span>.ylabel(<span class="string">&quot;温度&quot;</span>)</span><br><span class="line"><span class="attribute">plt</span>.title(<span class="string">&quot;标题&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图例</span></span><br><span class="line"><span class="attribute">plt</span>.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line"><span class="attribute">plt</span>.show()</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117130223913.png" alt="image-20230117130223913"></p><h4 id="散点图的更多应用场景"><a href="#散点图的更多应用场景" class="headerlink" title="散点图的更多应用场景"></a>散点图的更多应用场景</h4><ul><li>不同条件(维度)之间的内在关联关系</li><li>观察数据的离散聚合程度</li></ul><h3 id="2-绘制条形图"><a href="#2-绘制条形图" class="headerlink" title="2.绘制条形图"></a>2.绘制条形图</h3><p><strong>barh绘制条形图</strong></p><p>2017年内地电影票房前20的电影(列表a)和电影票房数据(列表b)</p><p>a = [“战狼2”,”速度与激情8”,”功夫瑜伽”,”西游伏妖篇”,”变形金刚5：最后的骑士”,”摔跤吧！爸爸”,”加勒比海盗5：死无对证”,”金刚：骷髅岛”,”极限特工：终极回归”,”生化危机6：终章”,”乘风破浪”,”神偷奶爸3”,”智取威虎山”,”大闹天竺”,”金刚狼3：殊死一战”,”蜘蛛侠：英雄归来”,”悟空传”,”银河护卫队2”,”情圣”,”新木乃伊”,]</p><p>b=[56.01,26.94,17.53,16.49,15.45,12.96,11.8,11.61,11.28,11.12,10.49,10.3,8.75,7.55,7.32,6.99,6.88,6.86,6.58,6.23] 单位:亿</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="string">&quot;战狼2&quot;</span>,<span class="string">&quot;速度与激情8&quot;</span>,<span class="string">&quot;功夫瑜伽&quot;</span>,<span class="string">&quot;西游伏妖篇&quot;</span>,<span class="string">&quot;变形金刚5：最后的骑士&quot;</span>,<span class="string">&quot;摔跤吧！爸爸&quot;</span>,<span class="string">&quot;加勒比海盗5：死无对证&quot;</span>,<span class="string">&quot;金刚：骷髅岛&quot;</span>,<span class="string">&quot;极限特工：终极回归&quot;</span>,<span class="string">&quot;生化危机6：终章&quot;</span>,<span class="string">&quot;乘风破浪&quot;</span>,<span class="string">&quot;神偷奶爸3&quot;</span>,<span class="string">&quot;智取威虎山&quot;</span>,<span class="string">&quot;大闹天竺&quot;</span>,<span class="string">&quot;金刚狼3：殊死一战&quot;</span>,<span class="string">&quot;蜘蛛侠：英雄归来&quot;</span>,<span class="string">&quot;悟空传&quot;</span>,<span class="string">&quot;银河护卫队2&quot;</span>,<span class="string">&quot;情圣&quot;</span>,<span class="string">&quot;新木乃伊&quot;</span>,]</span><br><span class="line"></span><br><span class="line">y = [<span class="number">56.01</span>,<span class="number">26.94</span>,<span class="number">17.53</span>,<span class="number">16.49</span>,<span class="number">15.45</span>,<span class="number">12.96</span>,<span class="number">11.8</span>,<span class="number">11.61</span>,<span class="number">11.28</span>,<span class="number">11.12</span>,<span class="number">10.49</span>,<span class="number">10.3</span>,<span class="number">8.75</span>,<span class="number">7.55</span>,<span class="number">7.32</span>,<span class="number">6.99</span>,<span class="number">6.88</span>,<span class="number">6.86</span>,<span class="number">6.58</span>,<span class="number">6.23</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制横着的条形统计图(height设置条形的宽度)</span></span><br><span class="line">plt.barh(<span class="built_in">range</span>(<span class="built_in">len</span>(x)), y, height=<span class="number">0.5</span>, color=<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(x)), x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制网格</span></span><br><span class="line">plt.grid()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117130716640.png" alt="image-20230117130716640"></p><p>电影分别在2017-09-14(b_14), 2017-09-15(b_15), 2017-09-16(b_16)三天的票房,为了展示列表中电影本身的票房以及同其他电影的数据对比情况,应该如何更加直观的呈现该数据?</p><p>a = [“猩球崛起3：终极之战”,”敦刻尔克”,”蜘蛛侠：英雄归来”,”战狼2”]</p><p>b_16 = [15746,312,4497,319]</p><p>b_15 = [12357,156,2045,168]</p><p>b_14 = [2358,399,2358,362]</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;猩球崛起3：终极之战&quot;</span>, <span class="string">&quot;敦刻尔克&quot;</span>, <span class="string">&quot;蜘蛛侠：英雄归来&quot;</span>, <span class="string">&quot;战狼2&quot;</span>]</span><br><span class="line"><span class="keyword">b_14 </span>= [<span class="number">2358</span>, <span class="number">399</span>, <span class="number">2358</span>, <span class="number">362</span>]</span><br><span class="line"><span class="keyword">b_15 </span>= [<span class="number">12357</span>, <span class="number">156</span>, <span class="number">2045</span>, <span class="number">168</span>]</span><br><span class="line"><span class="keyword">b_16 </span>= [<span class="number">15746</span>, <span class="number">312</span>, <span class="number">4497</span>, <span class="number">319</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规定宽度</span></span><br><span class="line"><span class="keyword">bar_width </span>= <span class="number">0</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加多个条形需要向左右偏移，否则图形将画在一起</span></span><br><span class="line">plt.<span class="keyword">bar([i </span>- <span class="keyword">bar_width </span>for i in range(len(a))], <span class="keyword">b_14, </span>width=<span class="keyword">bar_width, </span>label=<span class="string">&quot;9月14日&quot;</span>)</span><br><span class="line">plt.<span class="keyword">bar(range(len(a)), </span><span class="keyword">b_15, </span>width=<span class="keyword">bar_width, </span>label=<span class="string">&quot;9月15日&quot;</span>)</span><br><span class="line">plt.<span class="keyword">bar([i </span>+ <span class="keyword">bar_width </span>for i in range(len(a))], <span class="keyword">b_16, </span>width=<span class="keyword">bar_width, </span>label=<span class="string">&quot;9月16日&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(range(len(a)), a)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.<span class="keyword">show()</span></span><br></pre></td></tr></table></figure><h4 id="条形图的更多应用场景"><a href="#条形图的更多应用场景" class="headerlink" title="条形图的更多应用场景"></a>条形图的更多应用场景</h4><ul><li>数量统计</li><li>频率统计(市场饱和度)</li></ul><h3 id="3-绘制直方图"><a href="#3-绘制直方图" class="headerlink" title="3.绘制直方图"></a>3.绘制直方图</h3><p><strong>hist绘制直方图</strong></p><p>获取了250部电影的时长(列表a中),希望统计出这些电影时长的分布状态(比如时长为100分钟到120分钟电影的数量,出现的频率)等信息,你应该如何呈现这些数据?</p><p>a=[131, 98, 125, 131, 124, 139, 131, 117, 128, 108, 135, 138, 131, 102, 107, 114, 119, 128, 121, 142, 127, 130, 124, 101, 110, 116, 117, 110, 128, 128, 115, 99, 136, 126, 134, 95, 138, 117, 111,78, 132, 124, 113, 150, 110, 117, 86, 95, 144, 105, 126, 130,126, 130, 126, 116, 123, 106, 112, 138, 123, 86, 101, 99, 136,123, 117, 119, 105, 137, 123, 128, 125, 104, 109, 134, 125, 127,105, 120, 107, 129, 116, 108, 132, 103, 136, 118, 102, 120, 114,105, 115, 132, 145, 119, 121, 112, 139, 125, 138, 109, 132, 134,156, 106, 117, 127, 144, 139, 139, 119, 140, 83, 110, 102,123,107, 143, 115, 136, 118, 139, 123, 112, 118, 125, 109, 119, 133,112, 114, 122, 109, 106, 123, 116, 131, 127, 115, 118, 112, 135,115, 146, 137, 116, 103, 144, 83, 123, 111, 110, 111, 100, 154,136, 100, 118, 119, 133, 134, 106, 129, 126, 110, 111, 109, 141,120, 117, 106, 149, 122, 122, 110, 118, 127, 121, 114, 125, 126,114, 140, 103, 130, 141, 117, 106, 114, 121, 114, 133, 137, 92,121, 112, 146, 97, 137, 105, 98, 117, 112, 81, 97, 139, 113,134, 106, 144, 110, 137, 137, 111, 104, 117, 100, 111, 101, 110,105, 129, 137, 112, 120, 113, 133, 112, 83, 94, 146, 133, 101,131, 116, 111, 84, 137, 115, 122, 106, 144, 109, 123, 116, 111,111, 133, 150]</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> matplotlib import pyplot as plt</span><br><span class="line"><span class="attribute">plt</span>.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span>=[<span class="number">131</span>, <span class="number">98</span>, <span class="number">125</span>, <span class="number">131</span>, <span class="number">124</span>, <span class="number">139</span>, <span class="number">131</span>, <span class="number">117</span>, <span class="number">128</span>, <span class="number">108</span>, <span class="number">135</span>, <span class="number">138</span>, <span class="number">131</span>, <span class="number">102</span>, <span class="number">107</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">128</span>, <span class="number">121</span>, <span class="number">142</span>, <span class="number">127</span>, <span class="number">130</span>, <span class="number">124</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">115</span>, <span class="number">99</span>, <span class="number">136</span>, <span class="number">126</span>, <span class="number">134</span>, <span class="number">95</span>, <span class="number">138</span>, <span class="number">117</span>, <span class="number">111</span>,<span class="number">78</span>, <span class="number">132</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">150</span>, <span class="number">110</span>, <span class="number">117</span>, <span class="number">86</span>, <span class="number">95</span>, <span class="number">144</span>, <span class="number">105</span>, <span class="number">126</span>, <span class="number">130</span>,<span class="number">126</span>, <span class="number">130</span>, <span class="number">126</span>, <span class="number">116</span>, <span class="number">123</span>, <span class="number">106</span>, <span class="number">112</span>, <span class="number">138</span>, <span class="number">123</span>, <span class="number">86</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">136</span>,<span class="number">123</span>, <span class="number">117</span>, <span class="number">119</span>, <span class="number">105</span>, <span class="number">137</span>, <span class="number">123</span>, <span class="number">128</span>, <span class="number">125</span>, <span class="number">104</span>, <span class="number">109</span>, <span class="number">134</span>, <span class="number">125</span>, <span class="number">127</span>,<span class="number">105</span>, <span class="number">120</span>, <span class="number">107</span>, <span class="number">129</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">132</span>, <span class="number">103</span>, <span class="number">136</span>, <span class="number">118</span>, <span class="number">102</span>, <span class="number">120</span>, <span class="number">114</span>,<span class="number">105</span>, <span class="number">115</span>, <span class="number">132</span>, <span class="number">145</span>, <span class="number">119</span>, <span class="number">121</span>, <span class="number">112</span>, <span class="number">139</span>, <span class="number">125</span>, <span class="number">138</span>, <span class="number">109</span>, <span class="number">132</span>, <span class="number">134</span>,<span class="number">156</span>, <span class="number">106</span>, <span class="number">117</span>, <span class="number">127</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">139</span>, <span class="number">119</span>, <span class="number">140</span>, <span class="number">83</span>, <span class="number">110</span>, <span class="number">102</span>,<span class="number">123</span>,<span class="number">107</span>, <span class="number">143</span>, <span class="number">115</span>, <span class="number">136</span>, <span class="number">118</span>, <span class="number">139</span>, <span class="number">123</span>, <span class="number">112</span>, <span class="number">118</span>, <span class="number">125</span>, <span class="number">109</span>, <span class="number">119</span>, <span class="number">133</span>,<span class="number">112</span>, <span class="number">114</span>, <span class="number">122</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">123</span>, <span class="number">116</span>, <span class="number">131</span>, <span class="number">127</span>, <span class="number">115</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">135</span>,<span class="number">115</span>, <span class="number">146</span>, <span class="number">137</span>, <span class="number">116</span>, <span class="number">103</span>, <span class="number">144</span>, <span class="number">83</span>, <span class="number">123</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">154</span>,<span class="number">136</span>, <span class="number">100</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">106</span>, <span class="number">129</span>, <span class="number">126</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">141</span>,<span class="number">120</span>, <span class="number">117</span>, <span class="number">106</span>, <span class="number">149</span>, <span class="number">122</span>, <span class="number">122</span>, <span class="number">110</span>, <span class="number">118</span>, <span class="number">127</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">126</span>,<span class="number">114</span>, <span class="number">140</span>, <span class="number">103</span>, <span class="number">130</span>, <span class="number">141</span>, <span class="number">117</span>, <span class="number">106</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">114</span>, <span class="number">133</span>, <span class="number">137</span>, <span class="number">92</span>,<span class="number">121</span>, <span class="number">112</span>, <span class="number">146</span>, <span class="number">97</span>, <span class="number">137</span>, <span class="number">105</span>, <span class="number">98</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">81</span>, <span class="number">97</span>, <span class="number">139</span>, <span class="number">113</span>,<span class="number">134</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">110</span>, <span class="number">137</span>, <span class="number">137</span>, <span class="number">111</span>, <span class="number">104</span>, <span class="number">117</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">101</span>, <span class="number">110</span>,<span class="number">105</span>, <span class="number">129</span>, <span class="number">137</span>, <span class="number">112</span>, <span class="number">120</span>, <span class="number">113</span>, <span class="number">133</span>, <span class="number">112</span>, <span class="number">83</span>, <span class="number">94</span>, <span class="number">146</span>, <span class="number">133</span>, <span class="number">101</span>,<span class="number">131</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">84</span>, <span class="number">137</span>, <span class="number">115</span>, <span class="number">122</span>, <span class="number">106</span>, <span class="number">144</span>, <span class="number">109</span>, <span class="number">123</span>, <span class="number">116</span>, <span class="number">111</span>,<span class="number">111</span>, <span class="number">133</span>, <span class="number">150</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置组距</span></span><br><span class="line"><span class="attribute">bin_width</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算组数</span></span><br><span class="line"><span class="attribute">num_bins</span> = (max(a) - min(a)) // bin_width</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制直方图(density将y轴设置为频率分布直方图)</span></span><br><span class="line"><span class="attribute">plt</span>.hist(a, num_bins, density=True)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴的刻度</span></span><br><span class="line"><span class="attribute">plt</span>.xticks(range(min(a), max(a) + bin_width, bin_width))</span><br><span class="line"></span><br><span class="line"><span class="attribute">plt</span>.grid()</span><br><span class="line"></span><br><span class="line"><span class="attribute">plt</span>.show()</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/python/DataAnalysis/image-20230117132426522.png" alt="image-20230117132426522"></p><h4 id="直方图更多应用场景"><a href="#直方图更多应用场景" class="headerlink" title="直方图更多应用场景"></a>直方图更多应用场景</h4><ul><li>用户的年龄分布状态</li><li>一段时间内用户点击次数的分布状态</li><li>用户活跃时间的分布状态</li></ul><h3 id="4-matplotlib更多的图形样式"><a href="#4-matplotlib更多的图形样式" class="headerlink" title="4.matplotlib更多的图形样式"></a>4.matplotlib更多的图形样式</h3><p>matplotlib支持的图形是非常多的，如果有其他的需求，我们可以查看一下url地址：<a href="http://matplotlib.org/gallery/index.html">http://matplotlib.org/gallery/index.html</a></p><h3 id="5-更多的绘图工具"><a href="#5-更多的绘图工具" class="headerlink" title="5.更多的绘图工具"></a>5.更多的绘图工具</h3><p>plotly:可视化工具中的github,相比于matplotlib更加简单,图形更加漂亮,同时兼容matplotlib和pandas</p><p>使用用法:简单,照着文档写即可</p><p>文档地址: <em><a href="https://plot.ly/python/">https://plot.ly/python/</a></em></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序介绍</title>
      <link href="/posts/8fc29b6c.html"/>
      <url>/posts/8fc29b6c.html</url>
      
        <content type="html"><![CDATA[<h1 id="小程序与普通网页开发的区别"><a href="#小程序与普通网页开发的区别" class="headerlink" title="小程序与普通网页开发的区别"></a>小程序与普通网页开发的区别</h1><ol><li><p>运行环境不同</p><p>网页运行在浏览器环境中</p><p>小程序运行在微信环境中</p></li><li><p>API 不同</p></li></ol><p>​ 由于运行环境的不同，所以小程序中， 无法调用 DOM 和 BOM 的 API。 但是，小程序中可以调用微信环境提供 的各种 API，例如：</p><ul><li>地理定位</li><li>扫码</li><li>支付</li></ul><ol><li>开发模式不同</li></ol><p>网页的开发模式：浏览器 + 代码编辑器 小程序有自己的一套标准开发模式：</p><ul><li>申请小程序开发账号</li><li>安装小程序开发者工具</li><li>创建和配置小程序项目</li></ul><h1 id="注册小程序开发帐号"><a href="#注册小程序开发帐号" class="headerlink" title="注册小程序开发帐号"></a>注册小程序开发帐号</h1><h2 id="1-点击注册按钮"><a href="#1-点击注册按钮" class="headerlink" title="1.点击注册按钮"></a>1.点击注册按钮</h2><p>使用浏览器打开 <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a> 网址，点击右上角的“立即注册”即可进入到小程序开发账号 的注册流程，主要流程截图如下:</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230327105851703.png" alt="image-20230327105851703"></p><h2 id="2-选择注册账号的类型"><a href="#2-选择注册账号的类型" class="headerlink" title="2. 选择注册账号的类型"></a><strong>2.</strong> <strong>选择注册账号的类型</strong></h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230327105943856.png" alt="image-20230327105943856"></p><h2 id="3-填写账号信息"><a href="#3-填写账号信息" class="headerlink" title="3. 填写账号信息"></a><strong>3.</strong> <strong>填写账号信息</strong></h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230327110018675.png" alt="image-20230327110018675"></p><h2 id="4-点击链接激活账号"><a href="#4-点击链接激活账号" class="headerlink" title="4. 点击链接激活账号"></a><strong>4.</strong> <strong>点击链接激活账号</strong></h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230327110135807.png" alt="image-20230327110135807"></p><h2 id="5-选择主体类型"><a href="#5-选择主体类型" class="headerlink" title="5. 选择主体类型"></a><strong>5.</strong> <strong>选择主体类型</strong></h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230327110209683.png" alt="image-20230327110209683"></p><h2 id="6-获取小程序的-AppID"><a href="#6-获取小程序的-AppID" class="headerlink" title="6. 获取小程序的 AppID"></a><strong>6.</strong> <strong>获取小程序的</strong> <strong>AppID</strong></h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230327110244967.png" alt="image-20230327110244967"></p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h2 id="1-了解微信开发者工具"><a href="#1-了解微信开发者工具" class="headerlink" title="1. 了解微信开发者工具"></a><strong>1.</strong> <strong>了解微信开发者工具</strong></h2><p>微信开发者工具是官方推荐使用的小程序开发工具，它提供的主要功能如下：</p><ol><li>快速创建小程序项目</li><li>代码的查看和编辑</li><li>对小程序功能进行调试</li><li>小程序的预览和发布</li></ol><h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a><strong>2.</strong> <strong>下载</strong></h2><p>下载和安装最新的稳定版（Stable Build）的微信开发者工具，下载页面的链接如下：</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a></p><h2 id="3-界面的5个组成部分"><a href="#3-界面的5个组成部分" class="headerlink" title="3.界面的5个组成部分"></a>3.<strong>界面的5个组成部分</strong></h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230327110609160.png" alt="image-20230327110609160"></p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><h2 id="1-项目的基本组成结构"><a href="#1-项目的基本组成结构" class="headerlink" title="1.项目的基本组成结构"></a>1.<strong>项目的基本组成结构</strong></h2><ol><li>pages 用来存放所有小程序的页面</li><li>utils 用来存放工具性质的模块（例如：格式化时间的自定义模块）</li><li>app.js 小程序项目的入口文件</li><li>app.json 小程序项目的全局配置文件</li><li>app.wxss 小程序项目的全局样式文件</li><li>project.config.json 项目的配置文件</li><li>sitemap.json 用来配置小程序及其页面是否允许被微信索引</li></ol><h2 id="2-小程序页面的组成部分"><a href="#2-小程序页面的组成部分" class="headerlink" title="2. 小程序页面的组成部分"></a><strong>2.</strong> <strong>小程序页面的组成部分</strong></h2><p>小程序官方建议把所有小程序的页面，都存放在<strong>pages目录</strong>中，以<strong>单独的文件夹</strong>存在</p><p>其中，每个页面由 4 个基本文件组成，它们分别是：</p><ol><li>js 文件（页面的脚本文件，存放页面的数据、事件处理函数等）</li><li>json 文件（当前页面的配置文件，配置窗口的外观、表现等）</li><li>wxml 文件（页面的模板结构文件）</li><li>wxss 文件（当前页面的样式表文件）</li></ol><h3 id="1-JSON配置文件的作用"><a href="#1-JSON配置文件的作用" class="headerlink" title="1. JSON配置文件的作用"></a><strong>1. JSON配置文件的作用</strong></h3><p>==JSON 是一种数据格式==，在实际开发中，JSON 总是以==配置文件==的形式出现。小程序项目中也不例外：通过不同的 .json 配置文件，可以对小程序项目进行不同级别的配置。</p><p>小程序项目中有 4 种 json 配置文件，分别是：</p><ol><li>项目根目录中的 app.json 配置文件</li><li>项目根目录中的 project.config.json 配置文件</li><li>项目根目录中的 sitemap.json 配置文件</li><li>每个页面文件夹中的 .json 配置文件</li></ol><h3 id="2-app-json文件"><a href="#2-app-json文件" class="headerlink" title="2. app.json文件"></a><strong>2. app.json文件</strong></h3><p>app.json 是当前小程序的==全局配置==，包括了小程序的==所有页面路径、窗口外观、界面表现、底部 tab== 等。</p><p>4 个配置项的作用：</p><ol><li>pages：用来记录当前小程序所有页面的路径</li><li>window：全局定义小程序所有页面的背景色、文字颜色等</li><li>style：全局定义小程序组件所使用的样式版本</li><li>sitemapLocation：用来指明 sitemap.json 的位置</li></ol><h3 id="3-project-config-json文件"><a href="#3-project-config-json文件" class="headerlink" title="3. project.config.json文件"></a><strong>3. project.config.json文件</strong></h3><p>project.config.json 是项目配置文件，用来记录我们对小程序开发工具所做的个性化配置，例如：</p><ol><li>setting 中保存了编译相关的配置</li><li>projectname 中保存的是项目名称</li><li>appid 中保存的是小程序的账号 ID</li></ol><h3 id="4-sitemap-json文件"><a href="#4-sitemap-json文件" class="headerlink" title="4. sitemap.json文件"></a><strong>4.</strong> <strong>sitemap.json文件</strong></h3><p>微信现已开放==小程序内搜索==，效果类似于 PC 网页的 SEO。sitemap.json 文件用来==配置小程序页面是否允许微信索引==。</p><p>当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中。</p><p>sitemap 的索引提示是默认开启的，如需要关闭 sitemap 的索引提示，可在小程序项目配置文件==project.config.json==的==setting==中配置字段==checkSiteMap== 为==false==</p><h3 id="5-页面的-json配置文件"><a href="#5-页面的-json配置文件" class="headerlink" title="5. 页面的.json配置文件"></a><strong>5.</strong> <strong>页面的.json配置文件</strong></h3><p>小程序中的每一个页面，可以使用 .json 文件来对本页面的窗口外观进行配置，==页面中的配置项会覆盖 app.json 的 window 中相同的配置项==。</p><h3 id="6-新建小程序页面"><a href="#6-新建小程序页面" class="headerlink" title="6. 新建小程序页面"></a><strong>6.</strong> <strong>新建小程序页面</strong></h3><p>只需要在 app.json -&gt; pages 中新增页面的存放路径，小程序开发者工具即可帮我们自动创建对应的页面文件</p><h3 id="7-修改项目首页"><a href="#7-修改项目首页" class="headerlink" title="7. 修改项目首页"></a><strong>7.</strong> <strong>修改项目首页</strong></h3><p>只需要调整 ==app.json -&gt; pages== 数组中页面路径的前后顺序，即可修改项目的首页。小程序会把排在第一位的页面，当作项目首页进行渲染</p><h2 id="3-WXML模板"><a href="#3-WXML模板" class="headerlink" title="3.WXML模板"></a><strong>3.WXML模板</strong></h2><p><strong>什么是WXML</strong></p><p>WXML（WeiXin Markup Language）是小程序框架设计的一套==标签语言，用来构建小程序页面的结构==，其作用类似于网页开发中的 HTML。</p><p><strong>WXML和HTML的区别</strong></p><blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="number">1.</span>标签名称不同</span><br><span class="line">   lHTML （<span class="keyword">div</span>, span, img, <span class="keyword">a</span>）</span><br><span class="line">   lWXML（view, <span class="keyword">text</span>, image, navigator）</span><br><span class="line">&gt;<span class="number">2.</span>属性节点不同</span><br><span class="line">   &lt;<span class="keyword">a</span> href=<span class="string">&quot;#&quot;</span>&gt;超链接&lt;/<span class="keyword">a</span>&gt;</span><br><span class="line">   &lt;navigator url=<span class="string">&quot;/pages/home/home&quot;</span>&gt;&lt;/navigator&gt;</span><br><span class="line">&gt;<span class="number">3.</span>提供了类似于 Vue 中的模板语法</span><br><span class="line">   数据绑定</span><br><span class="line">   列表渲染</span><br><span class="line">   条件渲染</span><br></pre></td></tr></table></figure></blockquote><h2 id="4-WXSS样式"><a href="#4-WXSS样式" class="headerlink" title="4.WXSS样式"></a>4.<strong>WXSS样式</strong></h2><blockquote><p>什么是WXSS</p></blockquote><p>WXSS (WeiXin Style Sheets)是一套==样式语言==，用于描述 WXML 的组件样式，类似于网页开发中的 CSS。</p><blockquote><p>WXSS和CSS的区别</p></blockquote><ol><li><p>新增了 rpx 尺寸单位</p><ul><li>CSS 中需要手动进行像素单位换算，例如 rem</li><li>WXSS 在底层支持新的尺寸单位 rpx，在不同大小的屏幕上小程序会自动进行换算</li></ul></li><li><p>提供了全局的样式和局部样式</p><ul><li>项目根目录中的 app.wxss 会作用于所有小程序页面</li><li>局部页面的 .wxss 样式仅对当前页面生效</li></ul></li><li><p>WXSS 仅支持部分 CSS 选择器</p><ul><li><p>.class 和 #id</p></li><li><p>element</p></li><li><p>并集选择器、后代选择器</p></li><li><p>::after 和 ::before 等伪类选择器</p></li></ul></li></ol><h2 id="5-JS逻辑交互"><a href="#5-JS逻辑交互" class="headerlink" title="5.JS逻辑交互"></a>5.<strong>JS逻辑交互</strong></h2><blockquote><p>小程序中的.js文件</p></blockquote><p>一个项目仅仅提供界面展示是不够的，在小程序中，我们通过 .js 文件来处理用户的操作。例如：响应用户的点击、获取用户的位置等等。</p><blockquote><p>小程序中.js文件的分类</p></blockquote><p>小程序中的 JS 文件分为三大类，分别是：</p><ol><li>app.js<ul><li>是==整个小程序项目的入口文件==，通过调用 ==App() 函数==来启动整个小程序</li></ul></li><li>页面的 .js 文件<ul><li>是==页面的入口文件==，通过调用 ==Page() 函数==来创建并运行页面</li></ul></li><li>普通的 .js 文件<ul><li>是==普通的功能模块文件==，用来封装==公共的函数或属性==供页面使用</li></ul></li></ol><h1 id="宿主环境"><a href="#宿主环境" class="headerlink" title="宿主环境"></a>宿主环境</h1><h2 id="1-什么是宿主环境"><a href="#1-什么是宿主环境" class="headerlink" title="1. 什么是宿主环境"></a><strong>1.</strong> <strong>什么是宿主环境</strong></h2><p>宿主环境（host environment）指的是程序运行所==必须的依赖环境==。例如：</p><p>Android 系统和 iOS 系统是两个不同的宿主环境。安卓版的微信 App 是不能在 iOS 环境下运行的，所以，Android 是安卓软件的宿主环境，==脱离了宿主环境的软件是没有任何意义的！==</p><h2 id="2-小程序的宿主环境"><a href="#2-小程序的宿主环境" class="headerlink" title="2. 小程序的宿主环境"></a><strong>2.</strong> <strong>小程序的宿主环境</strong></h2><p>手机微信是小程序的宿主环境</p><p>小程序==借助宿主环境提供的能力==，可以完成许多普通网页无法完成的功能，例如：</p><p>微信扫码、微信支付、微信登录、地理定位、etc…</p><h2 id="3-小程序中组件的分类"><a href="#3-小程序中组件的分类" class="headerlink" title="3.小程序中组件的分类"></a>3.小程序中组件的分类</h2><p>小程序中的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方把小程序的组件分为了 9 大类，分别是：</p><ol><li>视图容器</li><li>基础内容</li><li>表单组件</li><li>导航组件</li><li>媒体组件</li><li>map 地图组件</li><li>canvas 画布组件</li><li>开放能力</li><li>无障碍访问</li></ol><h3 id="1-常用的视图容器类组件"><a href="#1-常用的视图容器类组件" class="headerlink" title="1.常用的视图容器类组件"></a>1.常用的视图容器类组件</h3><p>1.view</p><ul><li><p>普通视图区域</p></li><li><p>类似于 HTML 中的 div，是一个块级元素</p></li><li><p>常用来实现页面的布局效果</p></li></ul><p>2.scroll-view</p><ul><li><p>可滚动的视图区域</p></li><li><p>常用来实现滚动列表效果</p><!-- scroll-y属性：允许纵向滚动 --><!-- scroll-x属性：允许横向滚动 --><!-- 注意：使用纵向滚动时，必须给scroll-view一个固定高度 --></li></ul><p>3.swiper 和 swiper-item</p><ul><li>轮播图容器组件 和 轮播图 item 组件</li></ul><div class="table-container"><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>indicator-dots</td><td>boolean</td><td>false</td><td>是否显示面板指示点</td></tr><tr><td>indicator-color</td><td>color</td><td>rgba(0,  0, 0, .3)</td><td>指示点颜色</td></tr><tr><td>indicator-active-color</td><td>color</td><td>#000000</td><td>当前选中的指示点颜色</td></tr><tr><td>autoplay</td><td>boolean</td><td>false</td><td>是否自动切换</td></tr><tr><td>interval</td><td>number</td><td>5000</td><td>自动切换时间间隔</td></tr><tr><td>circular</td><td>boolean</td><td>false</td><td>是否采用衔接滑动</td></tr></tbody></table></div><h3 id="2-常用的基础内容组件"><a href="#2-常用的基础内容组件" class="headerlink" title="2.常用的基础内容组件"></a>2.常用的基础内容组件</h3><p>1.text</p><ul><li>文本组件</li><li>类似于 HTML 中的 span 标签，是一个行内元素</li></ul><p>2.rich-text</p><ul><li>富文本组件</li><li>支持把 HTML 字符串渲染为 WXML 结构</li></ul><p>通过 text 组件的 selectable 属性，实现长按选中文本内容的效果</p><p>通过 rich-text 组件的 nodes 属性节点，把 HTML 字符串渲染为对应的 UI 结构</p><h3 id="3-其它常用组件"><a href="#3-其它常用组件" class="headerlink" title="3.其它常用组件"></a>3.<strong>其它常用组件</strong></h3><p>1.button</p><ul><li>按钮组件</li><li>功能比 HTML 中的 button 按钮丰富</li><li>通过 open-type 属性可以调用微信提供的各种功能（客服、转发、获取用户授权、获取用户信息等）</li><li>通过type属性指定按钮颜色类型</li><li>通过size属性 指定按钮尺寸</li><li>plain镂空按钮</li></ul><p>2.image</p><ul><li>图片组件</li><li>image 组件默认宽度约 300px、高度约 240px</li></ul><p>3.navigator</p><ul><li>页面导航组件</li><li>类似于 HTML 中的 a 链接</li></ul><p>image 组件的 mode 属性用来指定图片的裁剪和缩放模式，常用的 mode 属性值</p><div class="table-container"><table><thead><tr><th><strong>mode</strong> <strong>值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>scaleToFill</td><td>（默认值）缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</td></tr><tr><td>aspectFit</td><td>缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。</td></tr><tr><td>aspectFill</td><td>缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。</td></tr><tr><td>widthFix</td><td>缩放模式，宽度不变，高度自动变化，保持原图宽高比不变</td></tr><tr><td>heightFix</td><td>缩放模式，高度不变，宽度自动变化，保持原图宽高比不变</td></tr></tbody></table></div><h2 id="4-API"><a href="#4-API" class="headerlink" title="4.API"></a>4.<strong>API</strong></h2><h3 id="1-小程序API概述"><a href="#1-小程序API概述" class="headerlink" title="1. 小程序API概述"></a><strong>1.</strong> <strong>小程序API概述</strong></h3><p><strong>小程序中的 API 是由宿主环境提供的，</strong>通过这些丰富的小程序 API，开发者可以方便的调用微信提供的能力，例如：获取用户信息、本地存储、支付功能等。</p><h3 id="2-小程序API的3大分类"><a href="#2-小程序API的3大分类" class="headerlink" title="2. 小程序API的3大分类"></a><strong>2.</strong> <strong>小程序API的3大分类</strong></h3><p>1.事件监听 API</p><ul><li>特点：以 on 开头，用来监听某些事件的触发</li><li>举例：wx.onWindowResize(function callback) 监听窗口尺寸变化的事件</li></ul><p>2.同步 API</p><ul><li>特点1：以 Sync 结尾的 API 都是同步 API</li><li>特点2：同步 API 的执行结果，可以通过函数返回值直接获取，如果执行出错会抛出异常</li><li>举例：wx.setStorageSync(‘key’, ‘value’) 向本地存储中写入内容</li></ul><p>3.异步 API</p><ul><li>特点：类似于 jQuery 中的 $.ajax(options) 函数，需要通过 success、fail、complete 接收调用的结果</li><li>举例：wx.request() 发起网络数据请求，通过 success 回调函数接收数据</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>能够知道如何创建小程序项目</li></ol><ul><li>微信开发者工具的使用、appID 的获取</li></ul><ol><li>能够清楚小程序项目的基本组成结构</li></ol><ul><li>app.js、app.json、app.wxss、pages 文件夹</li></ul><ol><li>能够知道小程序页面由几部分组成</li></ol><ul><li>wxml、wxss、json、js</li></ul><ol><li>能够知道小程序中常见的组件如何使用</li></ol><ul><li>view、text、image</li></ul><ol><li>能够知道小程序如何进行协同开发和发布</li></ol><ul><li>成员管理、发布小程序、查看运营数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面导航</title>
      <link href="/posts/851324cd.html"/>
      <url>/posts/851324cd.html</url>
      
        <content type="html"><![CDATA[<h1 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h1><h2 id="1-什么是页面导航"><a href="#1-什么是页面导航" class="headerlink" title="1.什么是页面导航"></a>1.什么是页面导航</h2><p>页面导航指的是==页面之间的相互跳转。==例如，浏览器中实现页面导航的方式有如下两种：</p><ol><li><a> 链接</li><li>location.href</li></ol><h2 id="2-小程序中实现页面导航的两种方式"><a href="#2-小程序中实现页面导航的两种方式" class="headerlink" title="2.小程序中实现页面导航的两种方式"></a>2.小程序中实现页面导航的两种方式</h2><p>声明式导航</p><ul><li>在页面上声明一个 <navigator> 导航组件</li><li>通过点击 <navigator> 组件实现页面跳转</li></ul><p>编程式导航</p><ul><li>调用小程序的导航 API，实现页面的跳转</li></ul><h2 id="3-声明式导航"><a href="#3-声明式导航" class="headerlink" title="3.声明式导航"></a>3.声明式导航</h2><h3 id="1-导航到-tabBar-页面"><a href="#1-导航到-tabBar-页面" class="headerlink" title="1.导航到 tabBar 页面"></a>1.导航到 tabBar 页面</h3><p>==tabBar页面==指的是被配置为 tabBar 的页面。<br>在使用 <navigator> 组件跳转到指定的 tabBar 页面时，需要指定 ==url== 属性和 ==open-type== 属性，其中：</p><ul><li>url 表示要跳转的==页面的地址，==必须以 / 开头</li><li>open-type 表示==跳转的方式，==必须为 ==switchTab==</li></ul><p>示例代码如下：</p><blockquote><navigator url="/pages/message/message" open-type="switchTab">导航到消息页面</navigator></blockquote><h3 id="2-导航到非-tabBar-页面"><a href="#2-导航到非-tabBar-页面" class="headerlink" title="2.导航到非 tabBar 页面"></a>2.导航到非 tabBar 页面</h3><p>==非tabBar页面==指的是没有被配置为 tabBar 的页面。<br>在使用 <navigator> 组件跳转到普通的非 tabBar 页面时，则需要指定 ==url== 属性和 ==open-type== 属性，其中：<br>url 表示要跳转的==页面的地址==，必须以 / 开头<br>open-type 表示==跳转的方式==，必须为 ==navigate==<br>示例代码如下：</p><blockquote><navigator url="/pages/info/info" open-type="navigator">导航到info页面</navigator></blockquote><p>注意：为了简便，在导航到非 tabBar 页面时，==open-type=”navigate==” 属性==可以省略==。</p><h2 id="4-编程式导航"><a href="#4-编程式导航" class="headerlink" title="4.编程式导航"></a>4.编程式导航</h2><h3 id="1-导航到-tabBar-页面-1"><a href="#1-导航到-tabBar-页面-1" class="headerlink" title="1.导航到 tabBar 页面"></a>1.导航到 tabBar 页面</h3><p>调用 ==wx.switchTab(Object object)== 方法，可以跳转到 tabBar 页面。其中 Object ==参数对象==的属性列表如下：</p><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>是否为必选项</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转的tabBar页面的路径，路径后不能带参数</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table></div><p>示例代码如下：</p><blockquote><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面结构</span></span><br><span class="line">&lt;<span class="keyword">button</span> bindtap=<span class="string">&quot;gotoMessage&quot;</span>&gt;跳转到消息页面&lt;/<span class="keyword">button</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过编程式导航，跳转到message页面</span></span><br><span class="line">gotoMessage() &#123;</span><br><span class="line">  wx.switchTab(&#123;</span><br><span class="line">    url: <span class="string">&quot;/pages/message/message&quot;</span>,</span><br><span class="line">  &#125;)<span class="comment">;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-后退导航"><a href="#3-后退导航" class="headerlink" title="3.后退导航"></a>3.后退导航</h3><p>如果要后退到上一页面或多级页面，则需要指定 open-type 属性和 delta 属性，其中：</p><ul><li>==open-type== 的值必须是 ==navigateBack==，表示要进行后退导航</li><li>==delta== 的值必须是==数字==，表示要后退的层级</li></ul><p>示例代码如下：</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator <span class="attribute">open-type</span>=<span class="string">&quot;navigateBack&quot;</span> <span class="attribute">delta</span>=<span class="string">&quot;1&quot;</span>&gt;后退&lt;/navigator&gt;</span><br></pre></td></tr></table></figure></blockquote><p>注意：为了简便，如果只是后退到上一页面，则==可以省略 delta 属性==，因为其==默认值就是 1。==</p><h3 id="2-导航到非-tabBar-页面-1"><a href="#2-导航到非-tabBar-页面-1" class="headerlink" title="2.导航到非 tabBar 页面"></a>2.导航到非 tabBar 页面</h3><p>调用 ==wx.navigateTo(Object object)== 方法，可以跳转到非 tabBar 的页面。其中 Object ==参数对象==的属性列表如下：</p><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转的非tabBar页面的路径，路径后可以带参数</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table></div><p>示例代码如下：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面结构</span></span><br><span class="line">&lt;<span class="selector-tag">button</span> bindtap=<span class="string">&quot;gotoInfo&quot;</span>&gt;跳转到info页面&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过编程式导航,跳转到info页面</span></span><br><span class="line"><span class="function"><span class="title">gotoInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"> wx<span class="selector-class">.navigateTo</span>(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/pages/info/info&#x27;</span>,</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-后退导航-1"><a href="#3-后退导航-1" class="headerlink" title="3.后退导航"></a>3.后退导航</h3><p>调用 ==wx.navigateBack(Object object)== 方法，可以返回上一页面或多级页面。其中 Object ==参数对象==可选的属性列表如下：</p><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>delta</td><td>number</td><td>否</td><td>返回的页面数,如果delta大于现有的页面数,则返回到首页</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table></div><p>示例代码如下:</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面结构</span></span><br><span class="line">&lt;<span class="selector-tag">button</span> bindtap=<span class="string">&quot;goBack&quot;</span>&gt;后退&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编程式导航，后退到上一页面</span></span><br><span class="line"><span class="function"><span class="title">goBack</span><span class="params">()</span></span>&#123;</span><br><span class="line"> wx<span class="selector-class">.navigateBack</span>(&#123;</span><br><span class="line">  delta:<span class="number">1</span></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h2 id="5-导航传参"><a href="#5-导航传参" class="headerlink" title="5.导航传参"></a>5.导航传参</h2><h3 id="1-声明式导航传参"><a href="#1-声明式导航传参" class="headerlink" title="1.声明式导航传参"></a>1.声明式导航传参</h3><p>navigator 组件的 url 属性用来指定将要跳转到的页面的路径。同时，==路径的后面还可以携带参数：==</p><ul><li>==参数==与==路径==之间使用 ? 分隔</li><li>==参数键==与==参数值==用 = 相连</li><li>==不同参数==用 ==&amp;== 分隔</li></ul><p>代码示例如下：</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/info/info?name=zhangsan&amp;age=18&quot;</span>&gt;</span>跳转到info页面<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2-编程式导航传参"><a href="#2-编程式导航传参" class="headerlink" title="2.编程式导航传参"></a>2.编程式导航传参</h3><p>调用 ==wx.navigateTo(Object object)== 方法跳转页面时，也可以携带参数，代码示例如下：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面结构</span></span><br><span class="line">&lt;<span class="selector-tag">button</span> bindtap=<span class="string">&quot;gotoInfo2&quot;</span>&gt;跳转到info页面&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过编程式导航，跳转到info页面，并携带参数</span></span><br><span class="line"><span class="function"><span class="title">gotoInfo2</span><span class="params">()</span></span>&#123;</span><br><span class="line"> wx<span class="selector-class">.navigateTo</span>(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/pages/info/info?name=lisi&amp;age=20&#x27;</span>,</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-在-onLoad-中接收导航参数"><a href="#3-在-onLoad-中接收导航参数" class="headerlink" title="3.在 onLoad 中接收导航参数"></a>3.在 onLoad 中接收导航参数</h3><p>通过==声明式导航传参==或编==程式导航传参==所携带的参数，可以直接在 ==onLoad== 事件中直接获取到，示例代码如下：</p><blockquote><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">onLoad(<span class="keyword">options</span>) &#123;</span><br><span class="line"> console.<span class="built_in">log</span>(<span class="keyword">options</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h1 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h1><h2 id="1-下拉刷新事件"><a href="#1-下拉刷新事件" class="headerlink" title="1.下拉刷新事件"></a>1.下拉刷新事件</h2><h3 id="1-什么是下拉刷新"><a href="#1-什么是下拉刷新" class="headerlink" title="1.什么是下拉刷新"></a>1.什么是下拉刷新</h3><p>==下拉刷新==是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而==重新加载页面数据==的行为。</p><h3 id="2-启用下拉刷新"><a href="#2-启用下拉刷新" class="headerlink" title="2.启用下拉刷新"></a>2.启用下拉刷新</h3><p>启用下拉刷新有两种方式：</p><ol><li>全局开启下拉刷新</li></ol><ul><li>在 app.json 的 window 节点中，将 enablePullDownRefresh 设置为 true</li></ul><ol><li>局部开启下拉刷新</li></ol><ul><li>在页面的 .json 配置文件中，将 enablePullDownRefresh 设置为 true</li></ul><p>在实际开发中，推荐使用第 2 种方式，==为需要的页面单独开启下拉刷新的效果==。</p><h3 id="3-配置下拉刷新窗口的样式"><a href="#3-配置下拉刷新窗口的样式" class="headerlink" title="3.配置下拉刷新窗口的样式"></a>3.配置下拉刷新窗口的样式</h3><p>在全局或页面的 .json 配置文件中，通过 ==backgroundColor== 和 ==backgroundTextStyle== 来配置下拉刷新窗口的样式，其中：</p><ul><li>==backgroundColor== 用来配置下拉刷新==窗口的背景颜色==，仅支持16 进制的颜色值</li><li>==backgroundTextStyle== 用来配置下拉刷新 ==loading 的样式==，仅支持 dark 和 light</li></ul><h3 id="4-监听页面的下拉刷新事件"><a href="#4-监听页面的下拉刷新事件" class="headerlink" title="4.监听页面的下拉刷新事件"></a>4.监听页面的下拉刷新事件</h3><p>在页面的 .js 文件中，通过 ==onPullDownRefresh()== 函数即可监听当前页面的下拉刷新事件。<br>例如，在页面的 wxml 中有如下的 UI 结构，点击按钮可以让 count 值自增 +1：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面结构</span></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  count值是：&#123;&#123;count&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">button</span> bindtap=<span class="string">&quot;addCount&quot;</span>&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//+1按钮的点击事件处理函数</span></span><br><span class="line"><span class="function"><span class="title">addCount</span><span class="params">()</span></span>&#123;</span><br><span class="line"> this<span class="selector-class">.setData</span>(&#123;</span><br><span class="line">  count:this<span class="selector-class">.data</span><span class="selector-class">.count</span> + <span class="number">1</span></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><p>在触发页面的下拉刷新事件的时候，把 count 的值重置为 0，示例代码如下：</p><blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">onPullDownRefresh: <span class="keyword">function</span> <span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">// console.log(&quot;触发了message页面的下拉刷新&quot;);</span></span><br><span class="line"> <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">  count:<span class="number">0</span></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h3 id="5-停止下拉刷新的效果"><a href="#5-停止下拉刷新的效果" class="headerlink" title="5.停止下拉刷新的效果"></a>5.停止下拉刷新的效果</h3><p>当处理完下拉刷新后，下拉刷新的 loading 效果会一直显示，==不会主动消失==，所以需要手动隐藏下拉刷新的 loading 效果。此时，调用 ==wx.stopPullDownRefresh()== 可以停止当前页面的下拉刷新。示例代码如下：</p><blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">onPullDownRefresh: <span class="keyword">function</span> <span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">// console.log(&quot;触发了message页面的下拉刷新&quot;);</span></span><br><span class="line"> <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">  count:<span class="number">0</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">//当数据重置成功之后，调用此函数，关闭下拉刷新的效果</span></span><br><span class="line"> wx.stopPullDownRefresh()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h2 id="2-上拉触底事件"><a href="#2-上拉触底事件" class="headerlink" title="2.上拉触底事件"></a>2.上拉触底事件</h2><h3 id="1-什么是上拉触底"><a href="#1-什么是上拉触底" class="headerlink" title="1.什么是上拉触底"></a>1.什么是上拉触底</h3><p>==上拉触底==是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而==加载更多数据==的行为。</p><h3 id="2-监听页面的上拉触底事件"><a href="#2-监听页面的上拉触底事件" class="headerlink" title="2.监听页面的上拉触底事件"></a>2.监听页面的上拉触底事件</h3><p>在页面的 .js 文件中，通过 ==onReachBottom()== 函数即可监听当前页面的上拉触底事件。示例代码如下：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="title">onReachBottom</span><span class="params">()</span></span> &#123;</span><br><span class="line"> console<span class="selector-class">.log</span>(<span class="string">&quot;触发了上拉触底的事件&quot;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-配置上拉触底距离"><a href="#3-配置上拉触底距离" class="headerlink" title="3.配置上拉触底距离"></a>3.配置上拉触底距离</h3><p>上拉触底距离指的是==触发上拉触底事件时，滚动条距离页面底部的距离。==<br>可以在全局或页面的 .json 配置文件中，通过 ==onReachBottomDistance== 属性来配置上拉触底的距离。<br>小程序默认的触底距离是 50px，在实际开发中，可以根据自己的需求修改这个默认值。</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="1-什么是生命周期"><a href="#1-什么是生命周期" class="headerlink" title="1.什么是生命周期"></a>1.什么是生命周期</h2><p>==生命周期==（Life Cycle）是指一个对象从==创建 -&gt; 运行 -&gt; 销毁==的整个阶段，==强调的是一个时间段==。例如：</p><ul><li>张三==出生==，表示这个人==生命周期的开始==</li><li>张三==离世==，表示这个人==生命周期的结束==</li><li>中间张三的一生，就是张三的生命周期</li></ul><p>我们可以把每个小程序运行的过程，也概括为生命周期：</p><ul><li>小程序的==启动==，表示==生命周期的开始==</li><li>小程序的==关闭==，表示==生命周期的结束==</li><li>中间小程序运行的过程，就是小程序的生命周期</li></ul><h2 id="2-生命周期的分类"><a href="#2-生命周期的分类" class="headerlink" title="2.生命周期的分类"></a>2.生命周期的分类</h2><p>在小程序中，生命周期分为两类，分别是：</p><ol><li>应用生命周期</li></ol><ul><li>特指小程序从启动 -&gt; 运行 -&gt; 销毁的过程</li></ul><ol><li>页面生命周期</li></ol><ul><li>特指小程序中，每个页面的加载 -&gt; 渲染 -&gt; 销毁的过程</li></ul><p>其中，==页面==的生命周期==范围较小==，==应用程序==的生命周期==范围较大==，如图所示：</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230330165021373.png" alt="image-20230330165021373"></p><h2 id="3-什么是生命周期函数"><a href="#3-什么是生命周期函数" class="headerlink" title="3.什么是生命周期函数"></a>3.什么是生命周期函数</h2><p>==生命周期函数==：是由小程序框架提供的==内置函数==，会伴随着生命周期，==自动按次序执行==。</p><p>==生命周期函数的作用==：允许==在特定的时间点，执行某些特定的操作==。例如，页面刚加载的时候，可以在 onLoad 生命周期函数中初始化页面的数据。</p><p>注意：==生命周期==强调的是==时间段==，==生命周期函数==强调的是==时间点==。</p><h2 id="4-生命周期函数的分类"><a href="#4-生命周期函数的分类" class="headerlink" title="4.生命周期函数的分类"></a>4.生命周期函数的分类</h2><p>小程序中的生命周期函数分为两类，分别是：</p><ol><li>应用的生命周期函数</li></ol><ul><li>特指小程序从启动 -&gt; 运行 -&gt; 销毁期间依次调用的那些函数</li></ul><ol><li>页面的生命周期函数</li></ol><ul><li>特指小程序中，每个页面从加载 -&gt; 渲染 -&gt; 销毁期间依次调用的那些函数</li></ul><h2 id="5-应用的生命周期函数"><a href="#5-应用的生命周期函数" class="headerlink" title="5.应用的生命周期函数"></a>5.应用的生命周期函数</h2><p>小程序的==应用生命周期函数==需要在 ==app.js== 中进行声明</p><div class="table-container"><table><thead><tr><th>生命周期</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>小程序初始化完成时触发，全局只触发一次</td></tr><tr><td>onShow</td><td>小程序启动，或从后台进入前台显示时触发</td></tr><tr><td>onHide</td><td>小程序从前台进入后台时触发</td></tr><tr><td>onError</td><td>小程序发生脚本错误或 API 调用报错时触发</td></tr><tr><td>onPageNotFound</td><td>小程序要打开的页面不存在时触发</td></tr><tr><td>onUnhandledRejection()</td><td>小程序有未处理的 Promise 拒绝时触发</td></tr><tr><td>onThemeChange</td><td>系统切换主题时触发</td></tr></tbody></table></div><h2 id="6-页面的生命周期函数"><a href="#6-页面的生命周期函数" class="headerlink" title="6.页面的生命周期函数"></a>6.页面的生命周期函数</h2><p>小程序的==页面生命周期函数==需要在页面的 ==.js 文件==中进行声明</p><div class="table-container"><table><thead><tr><th>生命周期</th><th>说明</th><th>作用</th></tr></thead><tbody><tr><td>onLoad</td><td>生命周期回调—监听页面加载</td><td>发送请求获取数据</td></tr><tr><td>onShow</td><td>生命周期回调—监听页面显示</td><td>请求数据</td></tr><tr><td>onReady</td><td>生命周期回调—监听页面初次渲染完成</td><td>获取页面元素（少用）</td></tr><tr><td>onHide</td><td>生命周期回调—监听页面隐藏</td><td>终止任务，如定时器或者播放音乐</td></tr><tr><td>onUnload</td><td>生命周期回调—监听页面卸载</td><td>终止任务</td></tr></tbody></table></div><h1 id="WXS脚本"><a href="#WXS脚本" class="headerlink" title="WXS脚本"></a>WXS脚本</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-什么是wxs"><a href="#1-什么是wxs" class="headerlink" title="1.什么是wxs"></a>1.什么是wxs</h3><p>==WXS==（WeiXin Script）是==小程序独有的一套脚本语言==，结合 WXML，可以构建出页面的结构。</p><h3 id="2-wxs的应用场景"><a href="#2-wxs的应用场景" class="headerlink" title="2.wxs的应用场景"></a>2.wxs的应用场景</h3><p>==wxml中无法调用在页面的 .js 中定义的函数==，但是，wxml 中可以调用 wxs 中定义的函数。因此，小程序中 wxs 的==典型应用场景==就是“==过滤器==”。</p><h3 id="3-wxs和JavaScript的关系"><a href="#3-wxs和JavaScript的关系" class="headerlink" title="3.wxs和JavaScript的关系"></a>3.wxs和JavaScript的关系</h3><p>虽然 wxs 的语法类似于 JavaScript，但是 wxs 和 JavaScript 是完全不同的两种语言：</p><ol><li>wxs 有自己的数据类型</li></ol><div class="table-container"><table><thead><tr><th>number 数值类型</th><th>string 字符串类型</th><th>boolean 布尔类型</th><th>object 对象类型</th></tr></thead><tbody><tr><td>function 函数类型</td><td>array 数组类型</td><td>date 日期类型</td><td>regexp 正则</td></tr></tbody></table></div><ol><li>wxs 不支持类似于 ES6 及以上的语法形式</li></ol><ul><li>不支持：let、const、解构赋值、展开运算符、箭头函数、对象属性简写、etc…</li><li>支持：var 定义变量、普通 function 函数等类似于 ES5 的语法</li></ul><ol><li>wxs 遵循 CommonJS 规范</li></ol><ul><li>module 对象</li><li>require() 函数</li><li>module.exports 对象</li></ul><h2 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2.基础语法"></a>2.基础语法</h2><h3 id="1-内嵌-wxs-脚本"><a href="#1-内嵌-wxs-脚本" class="headerlink" title="1.内嵌 wxs 脚本"></a>1.内嵌 wxs 脚本</h3><p>wxs 代码可以编写在 wxml 文件中的 ==<wxs>== 标签内，就像 Javascript 代码可以编写在 html 文件中的 <script> 标签内一样。<br>wxml 文件中的每个 <wxs></wxs> 标签，==必须提供 module 属性==，用来指定==当前 wxs 的模块名称==，方便在 wxml 中访问模块中的成员：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-variable">&#123;&#123;<span class="name">m1.toUpper</span>(<span class="name">username</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">module</span>=<span class="string">&quot;m1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  //将文本转为大小写形式 zs - &gt; ZS</span></span><br><span class="line"><span class="language-xml">  module.exports.toUpper = function(str)&#123;</span></span><br><span class="line"><span class="language-xml">    return str.toUpperCase()</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2-定义外联的-wxs-脚本"><a href="#2-定义外联的-wxs-脚本" class="headerlink" title="2.定义外联的 wxs 脚本"></a>2.定义外联的 wxs 脚本</h3><p>wxs 代码还可以编写在==以 .wxs 为后缀名的文件内==，就像 javascript 代码可以编写在以 .js 为后缀名的文件中一样。示例代码如下：</p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">toLower</span>(str)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="type">str.toLowerCase()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"> toLower:toLower</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-使用外联的-wxs-脚本"><a href="#3-使用外联的-wxs-脚本" class="headerlink" title="3.使用外联的 wxs 脚本"></a>3.使用外联的 wxs 脚本</h3><p>在 wxml 中引入外联的 wxs 脚本时，必须为 <wxs> 标签添加 module 和 src 属性，其中：</p><ul><li>module 用来指定模块的名称</li><li>src 用来指定要引入的脚本的路径，且必须是相对路径</li></ul><p>示例代码如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   </span><span class="template-variable">&#123;&#123;<span class="name">m2.toLower</span>(<span class="name">country</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">&quot;../../utils/tools.wxs&quot;</span> <span class="attr">module</span>=<span class="string">&quot;m2&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h2 id="3-WXS的特点"><a href="#3-WXS的特点" class="headerlink" title="3.WXS的特点"></a>3.WXS的特点</h2><h3 id="1-与-JavaScript-不同"><a href="#1-与-JavaScript-不同" class="headerlink" title="1.与 JavaScript 不同"></a>1.与 JavaScript 不同</h3><p>为了降低 wxs（==WeiXin Script==）的学习成本， wxs 语言在设计时借大量鉴了 JavaScript 的语法。但是本质上，wxs 和 JavaScript 是完全不同的两种语言！</p><h3 id="2-不能作为组件的事件回调"><a href="#2-不能作为组件的事件回调" class="headerlink" title="2.不能作为组件的事件回调"></a>2.不能作为组件的事件回调</h3><p>wxs 典型的应用场景就是“==过滤器==”，==经常配合 Mustache 语法进行使用==，例如：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   </span><span class="template-variable">&#123;&#123;<span class="name">m2.toLower</span>(<span class="name">country</span>)&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>但是，在 wxs 中定义的函数==不能作为组件的事件回调函数==。例如，下面的用法是错误的：</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;m2.loLower&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3-隔离性"><a href="#3-隔离性" class="headerlink" title="3.隔离性"></a>3.隔离性</h3><p>==隔离性==指的是 wxs 的运行环境和其他 JavaScript 代码是隔离的。体现在如下两方面：</p><ol><li>wxs 不能调用 js 中定义的函数</li><li>wxs 不能调用小程序提供的 API</li></ol><h3 id="4-性能好"><a href="#4-性能好" class="headerlink" title="4.性能好"></a>4.性能好</h3><ul><li>在 ==iOS 设备==上，小程序内的 ==WXS== 会比 JavaScript 代码快 ==2 ~ 20 倍==</li><li>在 ==android 设备==上，二者的运行效率==无差异==</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>能够知道如何实现页面之间的导航跳转</li></ol><p>​ 声明式导航、编程式导航</p><ol><li>能够知道如何实现下拉刷新效果</li></ol><p>​ enablePullDownRefresh、==onPullDownRefresh==</p><ol><li>能够知道如何实现上拉加载更多效果</li></ol><p>​ onReachBottomDistance、==onReachBottom==</p><ol><li>能够知道小程序中常用的生命周期函数</li></ol><p>​ 应用生命周期函数：==onLaunch==, onShow, onHide<br>​ 页面生命周期函数：==onLoad==, onShow, ==onReady==, onHide, onUnload</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板与配置</title>
      <link href="/posts/a1bc99e2.html"/>
      <url>/posts/a1bc99e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="1-数据绑定"><a href="#1-数据绑定" class="headerlink" title="1.数据绑定"></a>1.数据绑定</h2><h3 id="1-数据绑定的基本原则"><a href="#1-数据绑定的基本原则" class="headerlink" title="1. 数据绑定的基本原则"></a><strong>1.</strong> 数据绑定的基本原则</h3><ol><li>在 data 中定义数据</li><li>在 WXML 中使用数据</li></ol><h3 id="2-在data中定义页面的数据"><a href="#2-在data中定义页面的数据" class="headerlink" title="2. 在data中定义页面的数据"></a><strong>2.</strong> 在data中定义页面的数据</h3><p>在页面对应的 .js 文件中，把数据定义到 data 对象中即可：</p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;Page(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">data:</span><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="comment">//字符串类型的数据</span></span><br><span class="line"><span class="symbol"> info:</span><span class="string">&quot;init data&quot;</span>,</span><br><span class="line"> <span class="comment">//数组类型的数据</span></span><br><span class="line"><span class="symbol"> msgList:</span>[<span class="punctuation">&#123;</span>msg:<span class="string">&quot;hello&quot;</span><span class="punctuation">&#125;</span>,<span class="punctuation">&#123;</span>msg:<span class="string">&quot;world&quot;</span><span class="punctuation">&#125;</span>]</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-Mustache-语法的格式"><a href="#3-Mustache-语法的格式" class="headerlink" title="3. Mustache 语法的格式"></a>3. Mustache 语法的格式</h3><p>把data中的数据绑定到页面中渲染，使用 ==Mustache 语法==（双大括号）将变量包起来即可。语法格式为：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">要绑定的数据名称</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-Mustache语法的应用场景"><a href="#4-Mustache语法的应用场景" class="headerlink" title="4. Mustache语法的应用场景"></a>4. Mustache语法的应用场景</h3><p>Mustache 语法的主要应用场景如下：</p><ul><li>绑定内容</li><li>绑定属性</li><li>运算（三元运算、算术运算等）</li></ul><h3 id="5-动态绑定属性"><a href="#5-动态绑定属性" class="headerlink" title="5.动态绑定属性"></a>5.动态绑定属性</h3><p>页面的数据如下：</p><blockquote><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"> <span class="attribute">data</span>:&#123;</span><br><span class="line">  imgSrc:&quot;https://ngc1224<span class="variable">.oss-cn-hangzhou</span><span class="variable">.aliyuncs</span><span class="variable">.com</span>/ProjectImg/1<span class="variable">.jpg</span>&quot;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>页面的结构如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">imgSrc</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="6-三元运算"><a href="#6-三元运算" class="headerlink" title="6. 三元运算"></a>6. 三元运算</h3><p>页面的数据如下：</p><blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="type">Page</span>(&#123;</span><br><span class="line"><span class="class"><span class="keyword">data</span>:&#123;</span></span><br><span class="line"><span class="class">    <span class="title">randomNum1</span>:<span class="type">Math</span>.<span class="title">random</span>() * 10,//生成10以内的随机数</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>页面的结构如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span><span class="template-variable">&#123;&#123;<span class="name">randomNum1</span> &gt;= <span class="number">5</span> ? <span class="string">&quot;数字大于或等于5&quot;</span>:<span class="string">&quot;数字小于5&quot;</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="7-算数运算"><a href="#7-算数运算" class="headerlink" title="7. 算数运算"></a>7. 算数运算</h3><p>页面的数据如下：</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"> data:&#123;</span><br><span class="line">     randomNum2:Math.<span class="built_in">random</span>().<span class="built_in">toFixed</span>(<span class="number">2</span>),//生成一个带两位数的随机数</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>页面的结构如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  生成100以内的随机数</span><span class="template-variable">&#123;&#123;<span class="name">randomNum2</span> * <span class="number">100</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h2 id="2-事件绑定"><a href="#2-事件绑定" class="headerlink" title="2.事件绑定"></a>2.事件绑定</h2><h3 id="1-什么是事件"><a href="#1-什么是事件" class="headerlink" title="1. 什么是事件"></a>1. 什么是事件</h3><p>事件是==渲染层到逻辑层的通讯方式==。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230328203837887.png" alt="image-20230328203837887"></p><h3 id="2-小程序中常用的事件"><a href="#2-小程序中常用的事件" class="headerlink" title="2. 小程序中常用的事件"></a>2. 小程序中常用的事件</h3><div class="table-container"><table><thead><tr><th><strong>类型</strong></th><th><strong>绑定方式</strong></th><th><strong>事件描述</strong></th></tr></thead><tbody><tr><td>tap</td><td>bindtap 或 bind:tap</td><td>手指触摸后马上离开，类似于 HTML 中的 click 事件</td></tr><tr><td>input</td><td>bindinput 或 bind:input</td><td>文本框的输入事件</td></tr><tr><td>change</td><td>bindchange 或 bind:change</td><td>状态改变时触发</td></tr></tbody></table></div><h3 id="3-事件对象的属性列表"><a href="#3-事件对象的属性列表" class="headerlink" title="3. 事件对象的属性列表"></a>3. 事件对象的属性列表</h3><p>当事件回调触发的时候，会收到一个事件对象 event，它的详细属性如下表所示：</p><div class="table-container"><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>type</td><td>String</td><td>事件类型</td></tr><tr><td>timeStamp</td><td>Integer</td><td>页面打开到触发事件所经过的毫秒数</td></tr><tr><td>target</td><td>Object</td><td>触发事件的组件的一些属性值集合</td></tr><tr><td>currentTarget</td><td>Object</td><td>当前组件的一些属性值集合</td></tr><tr><td>detail</td><td>Object</td><td>额外的信息</td></tr><tr><td>touches</td><td>Array</td><td>触摸事件，当前停留在屏幕中的触摸点信息的数组</td></tr><tr><td>changedTouches</td><td>Array</td><td>触摸事件，当前变化的触摸点信息的数组</td></tr></tbody></table></div><h3 id="4-target-和-currentTarget-的区别"><a href="#4-target-和-currentTarget-的区别" class="headerlink" title="4. target 和 currentTarget 的区别"></a>4. target 和 currentTarget 的区别</h3><p>==target== 是==触发该事件的源头组件==，而 ==currentTarget== 则是==当前事件所绑定的组件==。举例如下：</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230328204050656.png" alt="image-20230328204050656"></p><p>点击内部的按钮时，点击事件以==冒泡==的方式向外扩散，也会触发外层 view 的 tap 事件处理函数。此时，对于外层的 view 来说：</p><ul><li>e.target 指向的是触发事件的源头组件，因此，==e.target 是内部的按钮组件==</li><li>e.currentTarget 指向的是当前正在触发事件的那个组件，因此，==e.currentTarget 是当前的== view 组件</li></ul><h3 id="5-bindtap的语法格式"><a href="#5-bindtap的语法格式" class="headerlink" title="5.bindtap的语法格式"></a>5.bindtap的语法格式</h3><p>在小程序中，不存在 HTML 中的 onclick 鼠标点击事件，而是通过 ==tap 事件==来响应用户的触摸行为。</p><ol><li>通过 ==bindtap==，可以为组件绑定 tap 触摸事件，语法如下：</li></ol><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="attribute">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attribute">bindtap</span>=<span class="string">&quot;btnTapHandler&quot;</span>&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li>在页面的 .js 文件中定义对应的事件处理函数，事件参数通过形参 ==event（一般简写成 e）== 来接收：</li></ol><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="title function_">btnTapHandler</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line"> &#125;,</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-在事件处理函数中为-data-中的数据赋值"><a href="#6-在事件处理函数中为-data-中的数据赋值" class="headerlink" title="6. 在事件处理函数中为 data 中的数据赋值"></a>6. 在事件处理函数中为 data 中的数据赋值</h3><p>通过调用 ==this.setData(dataObject)== 方法，可以给页面 data 中的数据重新赋值，示例如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;CountChange&quot;</span>&gt;</span>count+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">Page</span>(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line"> count:<span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">CountChange</span><span class="params">()</span></span>&#123;</span><br><span class="line">    this<span class="selector-class">.setData</span>(&#123;</span><br><span class="line">     <span class="comment">//修改count的值</span></span><br><span class="line">       count:this<span class="selector-class">.data</span><span class="selector-class">.count</span> + <span class="number">1</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="7-事件传参"><a href="#7-事件传参" class="headerlink" title="7. 事件传参"></a>7. 事件传参</h3><p>小程序中的事件传参比较特殊，==不能在绑定事件的同时为事件处理函数传递参数==。例如，下面的代码将不能正常工作：</p><blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;button <span class="attribute">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attribute">bindtap</span>=<span class="string">&quot;btnHandler(123)&quot;</span>&gt;事件传参&lt;/button&gt;</span><br></pre></td></tr></table></figure></blockquote><p>因为小程序会把 bindtap 的属性值，统一当作事件名称来处理，相当于要调用一个名称为 <strong>btnHandler(123)</strong> 的事件处理函数。</p><p>可以为组件提供 data-<em>自定义属性传参，其中</em> 代表的是参数的名字，示例代码如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;CountChange2&quot;</span>  <span class="attr">data-info</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">2</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>count+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>最终：</p><ul><li>==info== 会被解析为==参数的名字==</li><li>数值 ==2== 会被解析为==参数的值==</li></ul><p>在事件处理函数中，通过 ==event.target.dataset.参数名== 即可获取到==具体参数的值==，示例代码如下：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">CountChange2</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">   this<span class="selector-class">.setData</span>(&#123;</span><br><span class="line">     count:this<span class="selector-class">.data</span><span class="selector-class">.count</span> + e<span class="selector-class">.target</span><span class="selector-class">.dataset</span><span class="selector-class">.info</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></blockquote><h3 id="8-bindinput-的语法格式"><a href="#8-bindinput-的语法格式" class="headerlink" title="8. bindinput 的语法格式"></a>8. bindinput 的语法格式</h3><p>通过 input 事件来响应文本框的输入事件，语法格式如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="comment">&lt;!-- 双向数据绑定 --&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">bindinput</span>=<span class="string">&quot;inputHandler&quot;</span> <span class="attr">value</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>在页面的 .js 文件中定义事件处理函数，通过==e.detail.value==可以获取文本框的值：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">Page</span>(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line"> msg:<span class="string">&quot;你好&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//input输入框的事件处理函数</span></span><br><span class="line"><span class="function"><span class="title">inputHandler</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">   this<span class="selector-class">.setData</span>(&#123;</span><br><span class="line">     msg:e<span class="selector-class">.detail</span><span class="selector-class">.value</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-条件渲染"><a href="#3-条件渲染" class="headerlink" title="3.条件渲染"></a>3.条件渲染</h2><h3 id="1-wx-if"><a href="#1-wx-if" class="headerlink" title="1. wx:if"></a>1. wx:if</h3><p>在小程序中，使用 ==wx:if=”“== 来判断是否需要渲染该代码块：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">condition</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>True<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>也可以用 ==wx:elif== 和 ==wx:else== 来添加 else 判断：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="comment">&lt;!-- 条件渲染 --&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">type</span> === <span class="number">1</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">type</span> === <span class="number">2</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>保密<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2-结合-lt-block-gt-标签使用-wx-if"><a href="#2-结合-lt-block-gt-标签使用-wx-if" class="headerlink" title="2. 结合 &lt;block&gt;标签使用 wx:if"></a>2. 结合 <code>&lt;block&gt;</code>标签使用 wx:if</h3><p>如果要==一次性控制多个组件的展示与隐藏==，可以使用一个 <code>&lt;block&gt;&lt;/block&gt;</code> 标签将多个组件包装起来，并在<code>&lt;block&gt;</code> 标签上使用 wx:if 控制属性，示例如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">false</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">view</span>&gt;</span>view1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span>view2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p><code>&lt;block&gt;</code>==并不是一个组件==，它只是一个包裹性质的容器，==不会在页面中做任何渲染==。</p><h3 id="3-hidden"><a href="#3-hidden" class="headerlink" title="3.hidden"></a>3.hidden</h3><p>在小程序中，直接使用 ==hidden=”“== 也能控制元素的显示与隐藏：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">flase</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>条件为True的时候隐藏元素，否则显示<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-wx-if-与-hidden-的对比"><a href="#4-wx-if-与-hidden-的对比" class="headerlink" title="4. wx:if 与 hidden 的对比"></a>4. wx:if 与 hidden 的对比</h3><p>1.运行方式不同</p><ul><li>wx:if 以==动态创建和移除元素==的方式，控制元素的展示与隐藏</li><li>hidden 以==切换样式==的方式（display: none/block;），控制元素的显示与隐藏</li></ul><p>2.使用建议</p><ul><li>==频繁切换==时，建议使用 <strong>hidden</strong></li><li>==控制条件复杂==时，建议使用 <strong>wx:if</strong> 搭配 wx:elif、wx:else 进行展示与隐藏的切换</li></ul><h2 id="4-列表渲染"><a href="#4-列表渲染" class="headerlink" title="4.列表渲染"></a>4.列表渲染</h2><h3 id="1-wx-for"><a href="#1-wx-for" class="headerlink" title="1. wx:for"></a>1. wx:for</h3><p>通过 wx:for 可以根据指定的数组，循环渲染重复的组件结构，语法示例如下：</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;Page(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">    arr1:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="comment">&lt;!-- 列表渲染 --&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">arr1</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> 索引是：</span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="language-xml">，item项是：</span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>默认情况下，当前循环项的==索引==用 ==index== 表示；==当前循环==项用 ==item== 表示。</p><h3 id="2-手动指定索引和当前项的变量名"><a href="#2-手动指定索引和当前项的变量名" class="headerlink" title="2. 手动指定索引和当前项的变量名*"></a>2. 手动指定索引和当前项的变量名*</h3><p>使用 ==wx:for-index== 可以指定==当前循环项的索引==的变量名</p><p>使用 ==wx:for-item== 可以指定==当前项==的变量名</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="comment">&lt;!-- 手动定义索引名和当前项的变量名 --&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">arr1</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;idx&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;val&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;idx&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> 索引是：</span><span class="template-variable">&#123;&#123;<span class="name">idx</span>&#125;&#125;</span><span class="language-xml">，item项是：</span><span class="template-variable">&#123;&#123;<span class="name">val</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3-wx-key-的使用"><a href="#3-wx-key-的使用" class="headerlink" title="3. wx:key 的使用"></a>3. wx:key 的使用</h3><p>类似于 Vue 列表渲染中的 ==:key==，小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的 key 值，从而==提高渲染的效率==，示例代码如下：</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title function_ invoke__">Page</span>(&#123;</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">userList</span>:[</span><br><span class="line">         &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;Java&quot;</span>&#125;,</span><br><span class="line">         &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;Python&quot;</span>&#125;,</span><br><span class="line">         &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;C#&quot;</span>&#125;,</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">userList</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h1 id="模板样式"><a href="#模板样式" class="headerlink" title="模板样式"></a>模板样式</h1><h2 id="1-rpx"><a href="#1-rpx" class="headerlink" title="1.rpx"></a>1.rpx</h2><h3 id="1-什么是-rpx-尺寸单位"><a href="#1-什么是-rpx-尺寸单位" class="headerlink" title="1. 什么是 rpx 尺寸单位"></a>1. 什么是 rpx 尺寸单位</h3><p><strong>rpx</strong>（responsive pixel）是微信小程序独有的，用来==解决屏适配的尺寸单位==。</p><h3 id="2-rpx-的实现原理"><a href="#2-rpx-的实现原理" class="headerlink" title="2. rpx 的实现原理"></a>2. rpx 的实现原理</h3><p>rpx 的实现原理：鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配，rpx 把所有设备的屏幕，在宽度上==等分为 750 份==（即：当前屏幕的总宽度750rpx）。</p><ul><li>在==较小==的设备上，==1rpx 所代表的宽度较小==</li><li>在==较大==的设备上，==1rpx 所代表的宽度较大==</li></ul><p>小程序在不同设备上运行的时候，会自动把 rpx 的样式单位换算成对应的像素单位来渲染，从而实现屏幕适配</p><h3 id="3-rpx-与-px-之间的单位换算"><a href="#3-rpx-与-px-之间的单位换算" class="headerlink" title="3. rpx 与 px 之间的单位换算*"></a>3. rpx 与 px 之间的单位换算*</h3><p>在 iPhone6 上，屏幕宽度为==375px==，共有 ==750 个物理像素==，等分为 ==750rpx==。则：</p><p>==750rpx = 375px = 750 物理像素==</p><p>  ==1rpx = 0.5px = 1物理像素==</p><div class="table-container"><table><thead><tr><th>设备</th><th>rpx换算px (屏幕宽度/750)</th><th>px换算rpx (750/屏幕宽度)</th></tr></thead><tbody><tr><td>iPhone5</td><td>1rpx = 0.42px</td><td>1px  = 2.34rpx</td></tr><tr><td>iPhone6</td><td>1rpx=0.5px</td><td>1px = 2rpx</td></tr><tr><td>iPhone6  Plus</td><td>1rpx = 0.552px</td><td>1px  = 1.81rpx</td></tr></tbody></table></div><p>官方建议：开发微信小程序时，设计师可以用 ==iPhone6== 作为==视觉稿的标准==。<br>开发举例：在 iPhone6 上如果要绘制==宽100px，高20px==的盒子，换算成rpx单位，宽高分别为 ==200rpx== 和 ==40rpx==。</p><h2 id="2-样式导入"><a href="#2-样式导入" class="headerlink" title="2.样式导入"></a>2.样式导入</h2><h3 id="1-什么是样式导入"><a href="#1-什么是样式导入" class="headerlink" title="1. 什么是样式导入"></a>1. 什么是样式导入</h3><p>使用 WXSS 提供的 ==@import== 语法，可以导入外联的样式表。</p><h3 id="2-import-的语法格式"><a href="#2-import-的语法格式" class="headerlink" title="2. @import 的语法格式"></a>2. @import 的语法格式</h3><p>==@import== 后跟需要导入的外联样式表的==相对路径==，用 ; 表示语句结束。示例如下：</p><blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* 导入其他样式表 */</span></span><br><span class="line">&gt;<span class="keyword">@import</span> <span class="string">&quot;/common/common.wxss&quot;</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-全局样式和局部样式"><a href="#3-全局样式和局部样式" class="headerlink" title="3.全局样式和局部样式"></a>3.全局样式和局部样式</h2><h3 id="1-全局样式"><a href="#1-全局样式" class="headerlink" title="1. 全局样式"></a>1. 全局样式</h3><p>定义在 ==app.wxss== 中的样式为==全局样式==，作用于每一个页面。</p><h3 id="2-局部样式"><a href="#2-局部样式" class="headerlink" title="2. 局部样式"></a>2. 局部样式</h3><p>在==页面的 .wxss== 文件中定义的样式为局部样式，只作用于当前页面。</p><p>注意：</p><ol><li>当局部样式和全局样式冲突时，根据==就近原则==，局部样式会覆盖全局样式</li><li>当局部样式的==权重大于或等于==全局样式的权重时，才会覆盖全局的样式</li></ol><h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><p><strong>全局配置文件及常用的配置项</strong></p><p>小程序根目录下的 ==app.json== 文件是小程序的==全局配置文件==。常用的配置项如下：<br>1.pages</p><ul><li>记录当前小程序所有页面的存放路径</li></ul><p>2.<strong>window</strong></p><ul><li>全局设置小程序窗口的外观</li></ul><p>3.<strong>tabBar</strong></p><ul><li>设置小程序底部的  tabBar 效果</li></ul><p>4.style</p><ul><li>是否启用新版的组件样式</li></ul><h2 id="1-window"><a href="#1-window" class="headerlink" title="1.window"></a>1.window</h2><h3 id="1-小程序窗口的组成部分"><a href="#1-小程序窗口的组成部分" class="headerlink" title="1. 小程序窗口的组成部分"></a>1. 小程序窗口的组成部分</h3><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230328213024758.png" alt="image-20230328213024758"></p><h3 id="2-window-节点常用的配置项"><a href="#2-window-节点常用的配置项" class="headerlink" title="2.window 节点常用的配置项"></a>2.window 节点常用的配置项</h3><div class="table-container"><table><thead><tr><th><strong>属性名</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>navigationBarTitleText</td><td>String</td><td>字符串</td><td>导航栏标题文字内容</td></tr><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜色，如 #000000</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色，仅支持 black / white</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否全局开启下拉刷新</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为px</td></tr></tbody></table></div><h2 id="2-tabBar"><a href="#2-tabBar" class="headerlink" title="2.tabBar"></a>2.tabBar</h2><h3 id="1-什么是-tabBar"><a href="#1-什么是-tabBar" class="headerlink" title="1. 什么是 tabBar"></a>1. 什么是 tabBar</h3><p>==tabBar== 是移动端应用常见的页面效果，==用于实现多页面的快速切换==。小程序中通常将其分为：</p><ul><li>底部 tabBar</li><li>顶部 tabBar</li></ul><p>注意：</p><ul><li>tabBar中只能配置==最少 2 个、最多 5 个== tab 页签</li><li>当渲染==顶部 tabBar== 时，==不显示 icon==，只显示文本</li></ul><h3 id="2-tabBar-的-6-个组成部分"><a href="#2-tabBar-的-6-个组成部分" class="headerlink" title="2. tabBar 的 6 个组成部分"></a>2. tabBar 的 6 个组成部分</h3><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230328213412819.png" alt="image-20230328213412819"></p><ol><li>backgroundColor：tabBar 的背景色</li><li>selectedIconPath：选中时的图片路径</li><li>borderStyle：tabBar 上边框的颜色</li><li>iconPath：未选中时的图片路径</li><li>selectedColor：tab 上的文字选中时的颜色</li><li>color：tab 上文字的默认（未选中）颜色</li></ol><h3 id="3-tabBar-节点的配置项"><a href="#3-tabBar-节点的配置项" class="headerlink" title="3. tabBar 节点的配置项"></a>3. tabBar 节点的配置项</h3><div class="table-container"><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>必填</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>tabBar 的位置，仅支持 bottom/top</td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabBar 上边框的颜色，仅支持 black/white</td></tr><tr><td>color</td><td>HexColor</td><td>否</td><td></td><td>tab 上文字的默认（未选中）颜色</td></tr><tr><td>selectedColor</td><td>HexColor</td><td>否</td><td></td><td>tab 上的文字选中时的颜色</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>否</td><td></td><td>tabBar 的背景色</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 页签的列表，  最少 2  个、最多  5 个 tab</td></tr></tbody></table></div><h3 id="4-每个-tab-项的配置选项"><a href="#4-每个-tab-项的配置选项" class="headerlink" title="4. 每个 tab 项的配置选项"></a>4. 每个 tab 项的配置选项</h3><div class="table-container"><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>必填</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，页面必须在 pages  中预先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上显示的文字</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>未选中时的图标路径；当 postion 为 top 时，不显示 icon</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图标路径；当 postion 为 top 时，不显示 icon</td></tr></tbody></table></div><h1 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h1><h2 id="1-页面配置文件的作用"><a href="#1-页面配置文件的作用" class="headerlink" title="1. 页面配置文件的作用"></a>1. 页面配置文件的作用</h2><p>小程序中，每个页面都有自己的 .json 配置文件，用来对当前页面的窗口外观、页面效果等进行配置。</p><h2 id="2-页面配置和全局配置的关系"><a href="#2-页面配置和全局配置的关系" class="headerlink" title="2. 页面配置和全局配置的关系"></a>2. 页面配置和全局配置的关系</h2><p>小程序中，app.json 中的 window 节点，可以==全局配置==小程序中==每个页面的窗口表现==。<br>如果某些小程序页面==想要拥有特殊的窗口表现==，此时，==“页面级别的 .json 配置文件”==就可以实现这种需求。<br>注意：当页面配置与全局配置==冲突==时，根据==就近原则==，最终的效果==以页面配置为准==。</p><h2 id="3-页面配置中常用的配置项"><a href="#3-页面配置中常用的配置项" class="headerlink" title="3. 页面配置中常用的配置项"></a>3. 页面配置中常用的配置项</h2><div class="table-container"><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>当前页面导航栏背景颜色，如 #000000</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>当前页面导航栏标题颜色，仅支持 black / white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>当前页面导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>当前页面窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>当前页面下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否为当前页面开启下拉刷新的效果</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为 px</td></tr></tbody></table></div><h1 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a>网络数据请求</h1><h2 id="1-小程序中网络数据请求的限制"><a href="#1-小程序中网络数据请求的限制" class="headerlink" title="1. 小程序中网络数据请求的限制"></a>1. 小程序中网络数据请求的限制</h2><p>出于==安全性==方面的考虑，小程序官方对==数据接口的请求==做出了如下两个限制：</p><ol><li>只能请求 ==HTTPS== 类型的接口</li><li>必须将==接口的域名==添加到==信任列表==中</li></ol><h2 id="2-配置-request-合法域名"><a href="#2-配置-request-合法域名" class="headerlink" title="2. 配置 request 合法域名"></a>2. 配置 request 合法域名</h2><p>需求描述：假设在自己的微信小程序中，希望请求 <a href="https://www.escook.cn/">https://www.escook.cn/</a> 域名下的接口<br>配置步骤：==登录微信小程序管理后台 -&gt; 开发 -&gt; 开发设置 -&gt; 服务器域名 -&gt; 修改 request 合法域名==</p><p>注意事项：</p><ol><li>域名只支持 https 协议</li><li>域名不能使用 IP 地址或 localhost</li><li>域名必须经过 ICP 备案</li><li>服务器域名一个月内最多可申请 5 次修改</li></ol><h2 id="3-发起-GET-请求"><a href="#3-发起-GET-请求" class="headerlink" title="3. 发起 GET 请求"></a>3. 发起 GET 请求</h2><p>调用微信小程序提供的 <strong>wx.request()</strong> 方法，可以发起 GET 数据请求，示例代码如下：</p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;wx.request(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">url:</span><span class="string">&quot;https://www.escook.cn/api/get&quot;</span>,<span class="comment">//请求的接口地址，必须基于https协议</span></span><br><span class="line"><span class="symbol">method:</span><span class="string">&quot;GET&quot;</span>,<span class="comment">//请求的方式</span></span><br><span class="line"><span class="symbol">data:</span><span class="punctuation">&#123;</span><span class="comment">//发送的服务器的数据</span></span><br><span class="line"><span class="symbol"> name:</span><span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line"><span class="symbol"> age:</span><span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span>,</span><br><span class="line"><span class="symbol">success:</span>(res) =&gt; <span class="punctuation">&#123;</span><span class="comment">//请求成功之后的回调函数</span></span><br><span class="line"> console.log(res)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure></blockquote><h2 id="4-发起-POST-请求"><a href="#4-发起-POST-请求" class="headerlink" title="4. 发起 POST 请求"></a>4. 发起 POST 请求</h2><p>调用微信小程序提供的wx.request()方法，可以发起 POST 数据请求，示例代码如下：</p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;wx.request(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">url:</span><span class="string">&quot;https://www.escook.cn/api/post&quot;</span>,<span class="comment">//请求的接口地址，必须基于https协议</span></span><br><span class="line"><span class="symbol">method:</span><span class="string">&quot;POST&quot;</span>,<span class="comment">//请求的方式</span></span><br><span class="line"><span class="symbol">data:</span><span class="punctuation">&#123;</span><span class="comment">//发送的服务器的数据</span></span><br><span class="line"><span class="symbol"> name:</span><span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line"><span class="symbol"> gender:</span><span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="punctuation">&#125;</span>,</span><br><span class="line"><span class="symbol">success:</span>(res) =&gt; <span class="punctuation">&#123;</span><span class="comment">//请求成功之后的回调函数</span></span><br><span class="line"> console.log(res)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure></blockquote><h2 id="5-在页面刚加载时请求数据"><a href="#5-在页面刚加载时请求数据" class="headerlink" title="5. 在页面刚加载时请求数据"></a>5. 在页面刚加载时请求数据</h2><p>在很多情况下，我们需要==在页面刚加载的时候，自动请求一些初始化的数据==。此时需要在页面的 onLoad 事件中调用获取数据的函数，示例代码如下：</p><h2 id="6-跳过-request-合法域名校验"><a href="#6-跳过-request-合法域名校验" class="headerlink" title="6. 跳过 request 合法域名校验"></a>6. 跳过 request 合法域名校验</h2><p>如果后端==仅仅提供了 http 协议的接口、暂时没有提供 https 协议的接口==。<br>此时为了不耽误开发的进度，我们可以在微信开发者工具中，临时开启==「开发环境不校验请求域名、TLS 版本及 HTTPS 证书」==选项，跳过 request 合法域名的校验。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230329133346140.png" alt="image-20230329133346140"></p><p>注意：<br>跳过 request 合法域名校验的选项，==仅限==在==开发与调试阶段==使用！</p><h2 id="7-关于跨域和-Ajax-的说明"><a href="#7-关于跨域和-Ajax-的说明" class="headerlink" title="7. 关于跨域和 Ajax 的说明"></a>7. 关于跨域和 Ajax 的说明</h2><p>跨域问题只存在于基于浏览器的 Web 开发中。由于==小程序的宿主环境==不是浏览器，而是==微信客户端==，所以小程序中==不存在跨域的问题==。<br>Ajax 技术的核心是依赖于浏览器中的 XMLHttpRequest 这个对象，由于==小程序的宿主环境是微信客户端==，所以小程序中==不能叫==做“发起 Ajax 请求”，而是叫做==“发起网络数据请求”==。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>能够使用 WXML 模板语法渲染页面结构</li></ol><ul><li>==wx:if==、wx:elif、wx:else、hidden、==wx:for==、==wx:key==</li></ul><ol><li>能够使用 WXSS 样式美化页面结构</li></ol><ul><li>==rpx 尺寸单位==、@import 样式导入、全局样式和局部样式</li></ul><ol><li>能够使用 app.json 对小程序进行全局性配置</li></ol><ul><li>pages、==window==、==tabBar==、style</li></ul><ol><li>能够使用 page.json 对小程序页面进行个性化配置</li></ol><ul><li>对单个页面进行个性化配置、==就近原则==</li></ul><ol><li>能够知道如何发起网络数据请求</li></ol><ul><li>==wx.request()== 方法、==onLoad()== 事件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序加强</title>
      <link href="/posts/5b941666.html"/>
      <url>/posts/5b941666.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><h2 id="1-组件的创建与引用"><a href="#1-组件的创建与引用" class="headerlink" title="1.组件的创建与引用"></a>1.组件的创建与引用</h2><h3 id="1-创建组件"><a href="#1-创建组件" class="headerlink" title="1.创建组件"></a>1.创建组件</h3><p>在项目的根目录中，鼠标右键，创建 ==components -&gt; test== 文件夹<br>在新建的 components -&gt; test 文件夹上，鼠标右键，点击“==新建 Component==”<br>键入组件的名称之后回车，会自动生成组件对应的 4 个文件，后缀名分别为 .js，.json， .wxml 和 .wxss</p><p>注意：为了保证目录结构的清晰，建议把不同的组件，存放到单独目录中，例如：</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230401165127076.png" alt="image-20230401165127076"></p><h3 id="2-引用组件"><a href="#2-引用组件" class="headerlink" title="2.引用组件"></a>2.引用组件</h3><p>组件的引用方式分为“==局部引用==”和“==全局引用==”，顾名思义：<br>局部引用：组件只能在当前被引用的页面内使用<br>全局引用：组件可以在每个小程序页面中使用</p><h3 id="3-局部引用组件"><a href="#3-局部引用组件" class="headerlink" title="3.局部引用组件"></a>3.局部引用组件</h3><p>在页面的 .json 配置文件中引用组件的方式，叫做“局部引用”。示例代码如下：</p><blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>在页面的 <span class="string">.json</span> 文件中，引入组件</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;my-test1&quot;</span>:<span class="string">&quot;/components/test/test&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span>在页面的 <span class="string">.wxml</span> 文件中，使用组件</span><br><span class="line">&lt;my-test1&gt;&lt;<span class="string">/my-test1</span>&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-全局引用组件"><a href="#4-全局引用组件" class="headerlink" title="4.全局引用组件"></a>4.全局引用组件</h3><p>在 app.json 全局配置文件中引用组件的方式，叫做“全局引用”。示例代码如下：</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//在 app.json 文件中，引入组件</span></span><br><span class="line">&gt;&#123;</span><br><span class="line"><span class="string">&quot;pages&quot;</span>:&#123;&#125;,</span><br><span class="line"><span class="string">&quot;window&quot;</span>:&#123;&#125;,</span><br><span class="line">   <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;my-test2&quot;</span>:<span class="string">&quot;/components/test2/test2&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//在页面的 .wxml 文件中，使用组件</span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">my-test2</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test2</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="5-全局引用-VS-局部引用"><a href="#5-全局引用-VS-局部引用" class="headerlink" title="5.全局引用 VS 局部引用"></a>5.全局引用 VS 局部引用</h3><p>根据组件的==使用频率==和==范围==，来选择合适的引用方式：<br>如果某组件==在多个页面中经常被用到==，建议进行“全局引用”<br>如果某组件只==在特定的页面中被用到==，建议进行“局部引用”</p><h3 id="6-组件和页面的区别"><a href="#6-组件和页面的区别" class="headerlink" title="6.组件和页面的区别"></a>6.组件和页面的区别</h3><p>从表面来看，组件和页面都是由 .js、.json、.wxml 和 .wxss 这四个文件组成的。但是，组件和页面的 .js 与 .json文件有明显的不同：<br>组件的 .json 文件中需要声明 ==”component”: true== 属性<br>组件的 .js 文件中调用的是 ==Component()== 函数<br>组件的事件处理函数需要定义到 ==methods== 节点中</p><h2 id="2-样式"><a href="#2-样式" class="headerlink" title="2.样式"></a>2.样式</h2><h3 id="1-组件样式隔离"><a href="#1-组件样式隔离" class="headerlink" title="1.组件样式隔离"></a>1.组件样式隔离</h3><p>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的 UI 结构，如图所示：</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230401180602648.png" alt="image-20230401180602648"></p><p>组件 A 的样式==不会影响==组件 C 的样式<br>组件 A 的样式==不会影响==小程序页面的样式<br>小程序页面的样式==不会影响==组件 A 和 C 的样式</p><p>好处：</p><ol><li>防止外界的样式影响组件内部的样式</li><li>防止组件的样式破坏外界的样式</li></ol><h3 id="2-组件样式隔离的注意点"><a href="#2-组件样式隔离的注意点" class="headerlink" title="2.组件样式隔离的注意点"></a>2.组件样式隔离的注意点</h3><p>app.wxss 中的全局样式对组件无效<br>只有 class 选择器会有样式隔离效果，id 选择器、属性选择器、标签选择器不受样式隔离的影响</p><p>建议：在==组件==和==引用组件的页面==中建议使用 class 选择器，==不要使用 id、属性、标签选择器==！</p><h3 id="3-修改组件的样式隔离选项"><a href="#3-修改组件的样式隔离选项" class="headerlink" title="3.修改组件的样式隔离选项"></a>3.修改组件的样式隔离选项</h3><p>默认情况下，自定义组件的==样式隔离特性==能够==防止组件内外样式互相干扰的问题==。但有时，我们希望在外界能够控制组件内部的样式，此时，可以通过 ==styleIsolation== 修改组件的样式隔离选项，用法如下：</p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//在组件的 .js 文件中新增如下配置</span></span><br><span class="line">&gt;Component(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">options:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol"> styleIsolation:</span><span class="string">&quot;isolated&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//或在组件的 .json 文件中新增如下配置</span></span><br><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">styleIsolation:</span><span class="string">&quot;isolated&quot;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-styleIsolation-的可选值"><a href="#4-styleIsolation-的可选值" class="headerlink" title="4.styleIsolation 的可选值"></a>4.styleIsolation 的可选值</h3><div class="table-container"><table><thead><tr><th>可选值</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>isolated</td><td>是</td><td>表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响</td></tr><tr><td>apply-hared</td><td>否</td><td>表示页面 wxss  样式将影响到自定义组件，但自定义组件  wxss  中指定的样式不会影响页面</td></tr><tr><td>shared</td><td>否</td><td>表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置了 apply-shared 或 shared 的自定义组件</td></tr></tbody></table></div><h2 id="3-数据、方法和属性"><a href="#3-数据、方法和属性" class="headerlink" title="3.数据、方法和属性"></a>3.数据、方法和属性</h2><h3 id="1-data-数据"><a href="#1-data-数据" class="headerlink" title="1.data 数据"></a>1.data 数据</h3><p>在小程序组件中，==用于组件模板渲染的==私有数据，需要定义到 ==data 节点==中，示例如下：</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(&#123;</span><br><span class="line">&gt;<span class="comment">/*</span></span><br><span class="line"><span class="comment">* 组件的初始化数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">data:&#123;</span><br><span class="line"> count:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-methods-方法"><a href="#2-methods-方法" class="headerlink" title="2.methods 方法"></a>2.methods 方法</h3><p>在小程序组件中，==事件处理函数==和==自定义方法==需要定义到 ==methods 节点==中，示例代码如下：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">Component</span>(&#123;</span><br><span class="line">methods:&#123;<span class="comment">//组件的方法列表【包含事件的处理函数和自定义方法】</span></span><br><span class="line"> <span class="built_in">addCount</span>()&#123;<span class="comment">//事件处理函数</span></span><br><span class="line">  this<span class="selector-class">.setData</span>(&#123;count:this<span class="selector-class">.data</span><span class="selector-class">.count</span> + <span class="number">1</span>&#125;)</span><br><span class="line">  this.<span class="built_in">_showCount</span>()<span class="comment">//通过 this 直接调用自定义方法</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="built_in">_showCount</span>()&#123;<span class="comment">//自定义方法建议以 _ 开头</span></span><br><span class="line">  wx<span class="selector-class">.showToast</span>(&#123;</span><br><span class="line">   title:<span class="string">&quot;count值为：&quot;</span> + this<span class="selector-class">.data</span><span class="selector-class">.count</span>,</span><br><span class="line">   <span class="attribute">icon</span>:<span class="string">&quot;none&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-properties-属性"><a href="#3-properties-属性" class="headerlink" title="3.properties 属性"></a>3.properties 属性</h3><p>在小程序组件中，properties 是组件的对外属性，==用来接收外界传递到组件中的数据==，示例代码如下：</p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//属性定义</span></span><br><span class="line"><span class="symbol">properties:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol"> max:</span><span class="punctuation">&#123;</span><span class="comment">//完整定义属性的方式【当需要指定属性默认值时，建议使用此方法】</span></span><br><span class="line"><span class="symbol">  type:</span> Number,<span class="comment">//属性值的数据类型</span></span><br><span class="line"><span class="symbol">  value:</span> <span class="number">10</span><span class="comment">//属性默认值</span></span><br><span class="line"> <span class="punctuation">&#125;</span>,</span><br><span class="line"><span class="symbol"> max:</span>Number<span class="comment">//简化定义属性的方式【不需指定属性默认值，可以使用简化方式】</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="params">&lt;my-test1 max=&quot;<span class="number">10</span>&quot;&gt;</span><span class="params">&lt;/my-test1&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-data-和-properties-的区别"><a href="#4-data-和-properties-的区别" class="headerlink" title="4.data 和 properties 的区别"></a>4.data 和 properties 的区别</h3><p>在小程序的组件中，properties 属性和 data 数据的用法相同，它们都是==可读可写==的，只不过：</p><ul><li>data 更倾向于==存储组件的私有数据==</li><li>properties 更倾向于==存储外界传递到组件中的数据==</li></ul><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(&#123;</span><br><span class="line">methods:&#123;</span><br><span class="line"> showInfo()&#123;</span><br><span class="line">  console.log(<span class="keyword">this</span>.<span class="keyword">data</span>)<span class="comment">//输出结果：&#123;count: 0, max: 10&#125;</span></span><br><span class="line">  console.log(<span class="keyword">this</span>.properties)<span class="comment">//输出结果：&#123;count: 0, max: 10&#125;</span></span><br><span class="line">  <span class="comment">//结果为true，证明 data 和 properties 属性【在本质上是一致的、都是可读可写的】</span></span><br><span class="line">  console.log(<span class="keyword">this</span>.<span class="keyword">data</span> === <span class="keyword">this</span>.properties)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="5-使用-setData-修改-properties-的值"><a href="#5-使用-setData-修改-properties-的值" class="headerlink" title="5.使用 setData 修改 properties 的值"></a>5.使用 setData 修改 properties 的值</h3><p>由于 ==data 数据==和 ==properties 属性==在本质上没有任何区别，因此 properties 属性的值也可以用于页面渲染，或使用 setData 为 properties 中的属性重新赋值，示例代码如下：</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//在组件的 .wxml 文件中使用 properties 属性的值</span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>max属性的值为：&#123;&#123;max&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="title class_">Component</span>(&#123;</span><br><span class="line"><span class="attr">properties</span>:&#123;<span class="attr">max</span>: <span class="title class_">Number</span>&#125;,<span class="comment">//定义属性</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line"> <span class="title function_">addCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;<span class="attr">max</span>: <span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">max</span> + <span class="number">1</span>&#125;)<span class="comment">//使用setData修改属性的值</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h2 id="4-数据监听"><a href="#4-数据监听" class="headerlink" title="4.数据监听"></a>4.数据监听</h2><h3 id="1-什么是数据监听"><a href="#1-什么是数据监听" class="headerlink" title="1.什么是数据监听"></a>1.什么是数据监听</h3><p>数据监听器用于==监听和响应任何属性和数据字段的变化，从而执行特定的操作==。它的作用类似于 vue 中的 watch 侦听器。在小程序组件中，数据监听器的基本语法格式如下：</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(&#123;</span><br><span class="line">observers:&#123;</span><br><span class="line"> &quot;字段<span class="selector-tag">A</span>,字段<span class="selector-tag">B</span>&quot;:<span class="built_in">function</span>(字段A的新值，字段B的新值)&#123;</span><br><span class="line">  //do something</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-数据监听器的基本用法"><a href="#2-数据监听器的基本用法" class="headerlink" title="2.数据监听器的基本用法"></a>2.数据监听器的基本用法</h3><p>组件的 UI 结构如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;//组件的 UI 结构</span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">n1</span>&#125;&#125;</span><span class="language-xml"> + </span><span class="template-variable">&#123;&#123;<span class="name">n2</span>&#125;&#125;</span><span class="language-xml"> = </span><span class="template-variable">&#123;&#123;<span class="name">sum</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">buntton</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;addN1&quot;</span>&gt;</span>n1自增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">buntton</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;addN2&quot;</span>&gt;</span>n2自增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>组件的 .js 文件代码如下：</p><blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(&#123;</span><br><span class="line"><span class="keyword">data</span>:&#123;n1: <span class="number">0</span>,n2: <span class="number">0</span>&#125;,<span class="comment">//数据节点</span></span><br><span class="line">methods:&#123;<span class="comment">//方法列表</span></span><br><span class="line"> addN1()&#123;<span class="keyword">this</span>.setData(&#123;n1: <span class="keyword">this</span>.<span class="keyword">data</span>.n1 + <span class="number">1</span>&#125;)&#125;,</span><br><span class="line"> addN2()&#123;<span class="keyword">this</span>.setData(&#123;n2: <span class="keyword">this</span>.<span class="keyword">data</span>.n2 + <span class="number">1</span>&#125;)&#125;</span><br><span class="line">&#125;,</span><br><span class="line">obeserver:&#123;<span class="comment">//数据监听节点</span></span><br><span class="line"> <span class="string">&quot;n1,n2&quot;</span>:function(n1,n2)&#123;<span class="comment">//监听 n1 和 n2 数据的变化</span></span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;sum: n1 + n2&#125;)<span class="comment">//通过监听器，自动计算 sum 的值</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-监听对象属性的变化"><a href="#3-监听对象属性的变化" class="headerlink" title="3.监听对象属性的变化"></a>3.监听对象属性的变化</h3><p>数据监听器支持监听对象中==单个==或==多个属性==的变化，示例语法如下：</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(&#123;</span><br><span class="line">observers:&#123;</span><br><span class="line"> &quot;对象.属性<span class="selector-tag">A</span>,对象.属性<span class="selector-tag">B</span>&quot;:<span class="built_in">function</span>(属性A的新值,属性B的新值)&#123;</span><br><span class="line">  //触发此监听器的 <span class="number">3</span> 种情况</span><br><span class="line">  //【为属性<span class="selector-tag">A</span>赋值】使用 setData 设置 this<span class="selector-class">.data</span>.对象.属性 <span class="selector-tag">A</span> 时触发</span><br><span class="line">  //【为属性<span class="selector-tag">B</span>赋值】使用 setData 设置 this<span class="selector-class">.data</span>.对象.属性 <span class="selector-tag">B</span> 时触发</span><br><span class="line">  //【直接为对象赋值】使用 setData 设置 this<span class="selector-class">.data</span>.对象 时触发</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-监听对象中指定属性的变化"><a href="#4-监听对象中指定属性的变化" class="headerlink" title="4.监听对象中指定属性的变化"></a>4.监听对象中指定属性的变化</h3><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attr">observers</span>:&#123;</span><br><span class="line"><span class="comment">//监听对象子属性的变化</span></span><br><span class="line"><span class="string">&quot;对象.属性,对象.属性,对象.属性&quot;</span>: <span class="keyword">function</span>(<span class="params">新值<span class="number">1</span>,新值<span class="number">2</span>,新值<span class="number">3</span></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line"> <span class="comment">//为 data 中重新赋值</span></span><br><span class="line"> 属性:<span class="string">`<span class="subst">$&#123;新值<span class="number">1</span>&#125;</span>,<span class="subst">$&#123;新值<span class="number">2</span>&#125;</span>,<span class="subst">$&#123;新值<span class="number">3</span>&#125;</span>`</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="5-监听对象中所有属性的变化"><a href="#5-监听对象中所有属性的变化" class="headerlink" title="5.监听对象中所有属性的变化"></a>5.监听对象中所有属性的变化</h3><p>如果某个对象中需要被监听的属性太多，为了方便，可以使用==通配符 **== 来==监听==对象中==所有属性的变化==，示例代码如下：</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attr">observers</span>:&#123;</span><br><span class="line"><span class="comment">//使用通配符 ** 监听对象上所有属性的变化</span></span><br><span class="line"><span class="string">&quot;对象.**&quot;</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">  属性:<span class="string">`<span class="subst">$&#123;obj.r&#125;</span>,<span class="subst">$&#123;obj.g&#125;</span>,<span class="subst">$&#123;obj.b&#125;</span>`</span></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="5-纯数据字段"><a href="#5-纯数据字段" class="headerlink" title="5.纯数据字段"></a>5.纯数据字段</h2><h3 id="1-什么是纯数据字段"><a href="#1-什么是纯数据字段" class="headerlink" title="1.什么是纯数据字段"></a>1.什么是纯数据字段</h3><p>概念：==纯数据字段==指的是那些==不用于界面渲染的 data 字段==。</p><p>应用场景：例如有些情况下，某些 data 中的字段==既不会展示在界面上==，==也不会传递给其他组件==，仅仅在当前组件内部使用。带有这种特性的 data 字段适合被设置为纯数据字段。</p><p>好处：纯数据字段==有助于提升页面更新的性能==。</p><h3 id="2-使用规则"><a href="#2-使用规则" class="headerlink" title="2.使用规则"></a>2.使用规则</h3><p>在 Component 构造器的 options 节点中，指定 ==pureDataPattern== 为一个==正则表达式==，字段名符合这个正则表达式的字段将成为纯数据字段，示例代码如下：</p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">options:</span><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="comment">//指定所有 _ 开头的数据字段为纯数据字段</span></span><br><span class="line"><span class="symbol"> pureDataPattern:</span>/^_/</span><br><span class="line"><span class="punctuation">&#125;</span>,</span><br><span class="line"><span class="symbol">data:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol"> a:</span>true,<span class="comment">//普通字段</span></span><br><span class="line"><span class="symbol"> _b:</span>true<span class="comment">//纯数据字段</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure></blockquote><h2 id="6-组件的生命周期"><a href="#6-组件的生命周期" class="headerlink" title="6.组件的生命周期"></a>6.组件的生命周期</h2><h3 id="1-组件全部的生命周期函数"><a href="#1-组件全部的生命周期函数" class="headerlink" title="1.组件全部的生命周期函数"></a>1.组件全部的生命周期函数</h3><p>小程序组件可用的全部生命周期如下表所示：</p><div class="table-container"><table><thead><tr><th>生命周期函数</th><th>参数</th><th>描述说明</th></tr></thead><tbody><tr><td>created</td><td>无</td><td>在组件实例刚刚被创建时执行</td></tr><tr><td>attached</td><td>无</td><td>在组件实例进入页面节点树时执行</td></tr><tr><td>ready</td><td>无</td><td>在组件在视图层布局完成后执行</td></tr><tr><td>moved</td><td>无</td><td>在组件实例被移动到节点树另一个位置时执行</td></tr><tr><td>detached</td><td>无</td><td>在组件实例被从页面节点树移除时执行</td></tr><tr><td>error</td><td>Object Error</td><td>每当组件方法抛出错误时执行</td></tr></tbody></table></div><h3 id="2-组件主要的生命周期函数"><a href="#2-组件主要的生命周期函数" class="headerlink" title="2.组件主要的生命周期函数"></a>2.组件主要的生命周期函数</h3><p>在小程序组件中，最重要的生命周期函数有 3 个，分别是 ==created、attached、detached==。它们各自的特点如下：</p><ol><li>组件实例==刚被创建好==的时候，created 生命周期函数会被触发</li></ol><ul><li>此时还不能调用 setData</li><li>通常在这个生命周期函数中，只应该用于给组件的 this 添加一些自定义的属性字段</li></ul><ol><li>在组件==完全初始化完毕、进入页面节点树后==， attached 生命周期函数会被触发</li></ol><ul><li>此时， this.data 已被初始化完毕</li><li>这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行（例如发请求获取初始数据）</li></ul><ol><li>在组件==离开页面节点树后==， detached 生命周期函数会被触发</li></ol><ul><li>退出一个页面时，会触发页面内每个自定义组件的 detached 生命周期函数</li><li>此时适合做一些清理性质的工作</li></ul><h3 id="3-lifetimes-节点"><a href="#3-lifetimes-节点" class="headerlink" title="3.lifetimes 节点"></a>3.lifetimes 节点</h3><p>在小程序组件中，生命周期函数可以直接定义在 Component 构造器的第一级参数中，可以在 ==lifetimes== 字段内进行声明==（这是推荐的方式，其优先级最高）==。示例代码如下：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">Component</span>(&#123;</span><br><span class="line"><span class="comment">//推荐用法</span></span><br><span class="line">lifetimes:&#123;</span><br><span class="line"> <span class="built_in">attached</span>()&#123;&#125;,<span class="comment">//在组件实例进入页面节点树时执行</span></span><br><span class="line"> <span class="built_in">detached</span>()&#123;&#125;,<span class="comment">//在组件实例被从页面节点树移除时执行</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//旧定义方式</span></span><br><span class="line"><span class="function"><span class="title">attached</span><span class="params">()</span></span>&#123;&#125;,<span class="comment">//在组件实例进入页面节点树时执行</span></span><br><span class="line"><span class="function"><span class="title">detached</span><span class="params">()</span></span>&#123;&#125;,<span class="comment">//在组件实例被从页面节点树移除时执行</span></span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h2 id="7-组件所在页面的生命周期"><a href="#7-组件所在页面的生命周期" class="headerlink" title="7.组件所在页面的生命周期"></a>7.组件所在页面的生命周期</h2><h3 id="1-什么是组件所在页面的生命周期"><a href="#1-什么是组件所在页面的生命周期" class="headerlink" title="1.什么是组件所在页面的生命周期"></a>1.什么是组件所在页面的生命周期</h3><p>有时，==自定义组件的行为依赖于页面状态的变化==，此时就需要用到==组件所在页面的生命周期==。<br>例如：每当触发页面的 show 生命周期函数的时候，我们希望能够重新生成一个随机的 RGB 颜色值。<br>在自定义组件中，组件所在页面的生命周期函数有如下 3 个，分别是：</p><div class="table-container"><table><thead><tr><th><strong>生命周期函数</strong></th><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>show</td><td>无</td><td>组件所在的页面被展示时执行</td></tr><tr><td>hide</td><td>无</td><td>组件所在的页面被隐藏时执行</td></tr><tr><td>resize</td><td>Object Size</td><td>组件所在的页面尺寸变化时执行</td></tr></tbody></table></div><h3 id="2-pageLifetimes-节点"><a href="#2-pageLifetimes-节点" class="headerlink" title="2.pageLifetimes 节点"></a>2.pageLifetimes 节点</h3><p>组件所在页面的生命周期函数，需要定义在 pageLifetimes 节点中，示例代码如下：</p><blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(&#123;</span><br><span class="line"><span class="attr">pageLifetimes</span>:&#123;</span><br><span class="line"> <span class="attr">show</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="comment">//页面被展示</span></span><br><span class="line"> hide:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="comment">//页面被隐藏</span></span><br><span class="line"> <span class="built_in">resize</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//页面尺寸变化</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h2 id="8-插槽"><a href="#8-插槽" class="headerlink" title="8.插槽"></a>8.插槽</h2><h3 id="1-什么是插槽"><a href="#1-什么是插槽" class="headerlink" title="1.什么是插槽"></a>1.什么是插槽</h3><p>在自定义组件的 wxml 结构中，可以提供一个 ==<slot>== 节点（插槽），用于承载组件使用者提供的 wxml 结构。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230402123008216.png" alt="image-20230402123008216"></p><h3 id="2-单个插槽"><a href="#2-单个插槽" class="headerlink" title="2.单个插槽"></a>2.单个插槽</h3><p>在小程序中，默认每个自定义组件中只允许使用一个 <slot> 进行占位，这种个数上的限制叫做单个插槽。</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 组件的封装者 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>这是组件的内容节点<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 对于不确定的内容，可以使用&lt;slot&gt;进行占位，具体的内容由组件的使用者决定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">&lt;!-- 组件的使用者 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="3-启用多个插槽"><a href="#3-启用多个插槽" class="headerlink" title="3.启用多个插槽"></a>3.启用多个插槽</h3><p>在小程序的自定义组件中，需要使用多 <slot> 插槽时，可以在组件的 .js 文件中，通过如下方式进行启用。<br>示例代码如下：</p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;Component(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">options:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol"> multipleSlots:</span> true<span class="comment">//在组件定义时的选项中启用多个 slot 支持</span></span><br><span class="line"><span class="punctuation">&#125;</span>,</span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-定义多个插槽"><a href="#4-定义多个插槽" class="headerlink" title="4.定义多个插槽"></a>4.定义多个插槽</h3><p>可以在组件的 .wxml 中使用多个 <slot> 标签，以不同的 ==name== 来区分不同的插槽。示例代码如下：</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 组件模板 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name 为 before 的第一个 slot 插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;before&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>这是一段固定的文本内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- name 为 adter 的第二个 slot 插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;after&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>在使用==带有多个插槽的自定义组件==时，需要用 ==slot 属性==来将节点插入到不同的 <slot> 中。示例代码如下：</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">&lt;!-- 引用组件的页面模板 --&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这部分内容将被放置在组件&lt;slot name=&quot;before&quot;&gt;的位置上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;before&quot;</span>&gt;</span>这是插入到组件slot name=&quot;before&quot;中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 这部分内容将被放置在组件&lt;slot name=&quot;after&quot;&gt;的位置上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;after&quot;</span>&gt;</span>这是插入到组件slot name=&quot;after&quot;中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="9-父子组件之间的通信"><a href="#9-父子组件之间的通信" class="headerlink" title="9.父子组件之间的通信"></a>9.父子组件之间的通信</h2><h3 id="1-父子组件之间通信的-3-种方式"><a href="#1-父子组件之间通信的-3-种方式" class="headerlink" title="1.父子组件之间通信的 3 种方式"></a>1.父子组件之间通信的 3 种方式</h3><ol><li>属性绑定</li></ol><ul><li>用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容的数据</li></ul><ol><li>事件绑定</li></ol><ul><li>用于子组件向父组件传递数据，可以传递任意数据</li></ul><ol><li>获取组件实例</li></ol><ul><li>父组件还可以通过 this.selectComponent() 获取子组件实例对象</li><li>这样就可以直接访问子组件的任意数据和方法</li></ul><h3 id="2-属性绑定"><a href="#2-属性绑定" class="headerlink" title="2.属性绑定"></a>2.属性绑定</h3><p>==属性绑定==用于实现==父向子传值==，而且==只能传递普通类型的数据==，无法将方法传递给子组件。父组件的示例代码如下：</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;//父组件的 data 节点</span></span><br><span class="line"><span class="language-xml">&gt;data:&#123;</span></span><br><span class="line"><span class="language-xml">count: 0</span></span><br><span class="line"><span class="language-xml">&gt;&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;//父组件的 wxml 结构</span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">my-test3</span> <span class="attr">count</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span>----------<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span>父组件中，count值为:</span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>子组件在 ==properties== 节点中==声明对应的属性并使用==。示例代码如下：</p><blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//子组件的 properties 节点</span></span><br><span class="line">&gt;properties:&#123;</span><br><span class="line"><span class="attr">count</span>:<span class="built_in">Number</span></span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//子组件的 wxml 结构</span></span><br><span class="line">&gt;&lt;<span class="built_in">text</span>&gt;子组件中，<span class="built_in">count</span>值为：&#123;&#123;<span class="built_in">count</span>&#125;&#125;&lt;/<span class="built_in">text</span>&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-事件绑定"><a href="#3-事件绑定" class="headerlink" title="3.事件绑定"></a>3.事件绑定</h3><p>==事件绑定==用于实现==子向父传值==，可以传递任何类型的数据。使用步骤如下：</p><ol><li>在==父组件==的 js 中，定义一个函数，这个函数==即将==通过自定义事件的形式，传递给子组件</li><li>在==父组件==的 wxml 中，通过自定义事件的形式，将步骤 1 中定义的函数引用，传递给子组件</li><li>在==子组件==的 js 中，通过调用 ==this.triggerEvent(‘自定义事件名称’, { /<em>参数对象</em>/ })== ，将数据发送到父组件</li><li>在==父组件==的 js 中，通过 ==e.detail== 获取到子组件传递过来的数据</li></ol><p>步骤1：在==父组件==的 js 中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//在父组件中定义 syncCount 方法</span></span><br><span class="line">&gt;<span class="comment">//将来，这个方法会被传递给子组件，供子组件进行调用</span></span><br><span class="line">&gt;<span class="title function_">syncCount</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;syncCount&quot;</span>)</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>步骤2：在==父组件==的 wxml 中，通过==自定义事件==的形式，将步骤 1 中定义的函数引用，传递给子组件。</p><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;<span class="comment">&lt;!-- 使用bind:自定义事件名称（推荐：结构清晰） --&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">my-test3</span> <span class="attr">count</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">bind:sync</span>=<span class="string">&quot;syncCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="comment">&lt;!-- 或在 bind 后面直接写上自定义事件名称 --&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">my-test3</span> <span class="attr">count</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">bindsync</span>=<span class="string">&quot;syncCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test3</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><p>步骤3：在==子组件==的 js 中，通过调用 ==this.triggerEvent(‘自定义事件名称’, { /<em>参数对象</em>/ })== ，将数据发送到父组件。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//子组件的 wxml 结构</span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>子组件中，count值为：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//子组件的 js 代码</span></span><br><span class="line">&gt;<span class="attr">methods</span>:&#123;</span><br><span class="line"><span class="title function_">addCount</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&quot;sync&quot;</span>,&#123;<span class="attr">value</span>:<span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">count</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>步骤4：在==父组件==的 js 中，通过 ==e.detail== 获取到子组件传递过来的数据。</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">syncCount</span>(e)&#123;</span><br><span class="line">this<span class="selector-class">.setData</span>(&#123;</span><br><span class="line"> count:e<span class="selector-class">.detail</span><span class="selector-class">.value</span></span><br><span class="line">&#125;)</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-获取组件实例"><a href="#4-获取组件实例" class="headerlink" title="4.获取组件实例"></a>4.获取组件实例</h3><p>可在父组件里调用 ==this.selectComponent(“id或class选择器”)== ，获取子组件的实例对象，从而直接访问子组件的任意数据和方法。调用时需要传入一个==选择器==，例如 this.selectComponent(“.my-component”)。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//wxml 结构</span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">my-test5</span> <span class="attr">count</span>=<span class="string">&quot;&#123;&#123;count&#125;&#125;&quot;</span> <span class="attr">bind:sync</span>=<span class="string">&quot;syncCount&quot;</span> <span class="attr">class</span>=<span class="string">&quot;customA&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test5</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;getChild&quot;</span>&gt;</span>获取子组件的实例对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="title function_">getChild</span>(<span class="params"></span>)&#123;<span class="comment">//按钮的 tap 事件处理函数</span></span><br><span class="line"><span class="comment">//切记下面参数不能传递标签选择器&quot;my-test3&quot;，不然返回的是 null</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="variable language_">this</span>.<span class="title function_">selectComponent</span>(<span class="string">&quot;.customA&quot;</span>)<span class="comment">//也可以传递 id 选择器 #cA</span></span><br><span class="line">child.<span class="title function_">setData</span>(&#123;<span class="comment">//调用子组件的的 setData 方法</span></span><br><span class="line"> <span class="attr">count</span>:child.<span class="property">properties</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">child.<span class="title function_">addCount</span>()<span class="comment">//调用子组件的 addCount 方法</span></span><br><span class="line">&gt;&#125;,</span><br></pre></td></tr></table></figure></blockquote><h2 id="10-behaviors"><a href="#10-behaviors" class="headerlink" title="10.behaviors"></a>10.behaviors</h2><h3 id="1-什么是-behaviors"><a href="#1-什么是-behaviors" class="headerlink" title="1.什么是 behaviors"></a>1.什么是 behaviors</h3><p>behaviors 是小程序中，==用于实现组件间代码共享==的特性，类似于 Vue.js 中的 “mixins”。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230402131520301.png" alt="image-20230402131520301"></p><h3 id="2-behaviors-的工作方式"><a href="#2-behaviors-的工作方式" class="headerlink" title="2.behaviors 的工作方式"></a>2.behaviors 的工作方式</h3><p>每个 behavior 可以包含一组==属性、数据、生命周期函数和方法==。组件引用它时，它的属性、数据和方法==会被合并到组件中==。<br>每个组件可以引用多个 behavior，behavior 也可以引用其它 behavior。</p><h3 id="3-创建-behavior"><a href="#3-创建-behavior" class="headerlink" title="3.创建 behavior"></a>3.创建 behavior</h3><p>调用 ==Behavior(Object object)== 方法即可创建一个==共享的 behavior 实例对象==，供所有的组件使用：</p><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//调用 Behavior() 方法，创建实例对象</span></span><br><span class="line">&gt;<span class="comment">//并使用 module.exports 将 behavior 实例对象共享出去</span></span><br><span class="line">&gt;module.<span class="attr">exports</span> <span class="operator">=</span> Behavior(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//属性节点</span></span><br><span class="line"><span class="symbol">properties:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>,</span><br><span class="line"><span class="comment">//私有数据节点</span></span><br><span class="line"><span class="symbol">data:</span><span class="punctuation">&#123;</span>username:<span class="string">&quot;zhangsan&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//事件处理函数和自定义方法节点</span></span><br><span class="line"><span class="symbol">methods:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-导入并使用-behavior"><a href="#4-导入并使用-behavior" class="headerlink" title="4.导入并使用 behavior"></a>4.导入并使用 behavior</h3><p>在组件中，使用 ==require()== 方法导入需要的 behavior，==挂载后即可访问 behavior 中的数据或方法==，示例代码如下：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//1.使用require()导入需要的自定义behavior模块</span></span><br><span class="line">&gt;const myBehavior = <span class="built_in">require</span>(<span class="string">&quot;../../behaviors/my-behavios&quot;</span>)</span><br><span class="line">&gt;<span class="built_in">Component</span>(&#123;</span><br><span class="line"><span class="comment">//2.将导入的behavior实例对象，挂载到behaviors数组节点中，即可生效</span></span><br><span class="line">behaviors:<span class="selector-attr">[myBehavior]</span>,</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="5-behavior-中所有可用的节点"><a href="#5-behavior-中所有可用的节点" class="headerlink" title="5.behavior 中所有可用的节点"></a>5.behavior 中所有可用的节点</h3><div class="table-container"><table><thead><tr><th>可用的节点</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>properties</td><td>Object Map</td><td>否</td><td>同组件的属性</td></tr><tr><td>data</td><td>Object</td><td>否</td><td>同组件的数据</td></tr><tr><td>methods</td><td>Object</td><td>否</td><td>同自定义组件的方法</td></tr><tr><td>behaviors</td><td>String Array</td><td>否</td><td>引入其它的 behavior</td></tr><tr><td>created</td><td>Function</td><td>否</td><td>生命周期函数</td></tr><tr><td>attached</td><td>Function</td><td>否</td><td>生命周期函数</td></tr><tr><td>ready</td><td>Function</td><td>否</td><td>生命周期函数</td></tr><tr><td>moved</td><td>Function</td><td>否</td><td>生命周期函数</td></tr><tr><td>detached</td><td>Function</td><td>否</td><td>生命周期函数</td></tr></tbody></table></div><h3 id="6-同名字段的覆盖和组合规则"><a href="#6-同名字段的覆盖和组合规则" class="headerlink" title="6.同名字段的覆盖和组合规则"></a>6.同名字段的覆盖和组合规则</h3><p>组件和它引用的 behavior 中==可以包含同名的字段==，此时可以参考如下 3 种同名时的处理规则：<br>同名的数据字段 (==data==)<br>同名的属性 (==properties==) 或方法 (==methods==)<br>同名的==生命周期函数==</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>能够创建并引用组件</li></ol><ul><li>==全局引用==、局部引用、==usingComponents==</li></ul><ol><li>能够知道如何修改组件的样式隔离选项</li></ol><ul><li>options -&gt; ==styleIsolation==（ isolated, apply-shared, ==shared==）</li></ul><ol><li>能够知道如何定义和使用数据监听器</li></ol><ul><li>==observers==</li></ul><ol><li>能够知道如何定义和使用纯数据字段</li></ol><ul><li>options -&gt; ==pureDataPattern==</li></ul><ol><li>能够知道实现组件父子通信有哪3种方式</li></ol><ul><li>属性绑定、==事件绑定==、this.selectComponent(‘id或class选择器’)</li></ul><ol><li>能够知道如何定义和使用behaviors</li></ol><ul><li>调用 ==Behavior()== 构造器方法</li></ul><h1 id="使用npm包"><a href="#使用npm包" class="headerlink" title="使用npm包"></a>使用npm包</h1><h2 id="1-小程序对-npm-的支持与限制"><a href="#1-小程序对-npm-的支持与限制" class="headerlink" title="1.小程序对 npm 的支持与限制"></a>1.小程序对 npm 的支持与限制</h2><p>目前，小程序中已经支持使用 npm 安装第三方包，从而来提高小程序的开发效率。但是，在小程序中使用 npm 包有如下 3 个限制：</p><ol><li>不支持依赖于 ==Node.js== 内置库的包</li><li>不支持依赖于==浏览器内置对象==的包</li><li>不支持依赖于 ==C++ 插件==的包</li></ol><h2 id="2-Vant-Weapp"><a href="#2-Vant-Weapp" class="headerlink" title="2.Vant Weapp"></a>2.Vant Weapp</h2><h3 id="1-什么是-Vant-Weapp"><a href="#1-什么是-Vant-Weapp" class="headerlink" title="1.什么是 Vant Weapp"></a>1.什么是 Vant Weapp</h3><p>Vant Weapp 是有赞前端团队开源的一套==小程序 UI 组件库==，助力开发者快速搭建小程序应用。它所使用的是 ==MIT 开源许可协议==，对商业使用比较友好。<br>官方文档地址 <a href="https://youzan.github.io/vant-weapp">https://youzan.github.io/vant-weapp</a></p><h3 id="2-安装-Vant-组件库"><a href="#2-安装-Vant-组件库" class="headerlink" title="2.安装 Vant 组件库"></a>2.安装 Vant 组件库</h3><p>在小程序项目中，安装 Vant 组件库主要分为如下 3 步：</p><ol><li><p>通过 npm 安装</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 通过 npm 安装</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">npm i vant-weapp -S --production</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="comment"># 通过 yarn 安装</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">yarn add vant-weapp --production</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>构建 npm 包</p><p>打开微信开发者工具，点击 ==工具 -&gt; 构建 npm==，构建完成后，即可引入组件</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230404110532900.png" alt="image-20230404110532900"  /></p></li><li><p>修改 app.json</p><p>以 Button 组件为例，只需要在app.json或index.json中配置 Button 对应的路径即可。</p></li></ol><p>官方参考文档：<a href="https://vant-contrib.gitee.io/vant-weapp/0.x/#/intro">https://vant-contrib.gitee.io/vant-weapp/0.x/#/intro</a></p><h3 id="3-使用-Vant-组件"><a href="#3-使用-Vant-组件" class="headerlink" title="3.使用 Vant 组件"></a>3.使用 Vant 组件</h3><p>安装完 Vant 组件库之后，可以在 ==app.json== 的 ==usingComponents== 节点中引入需要的组件，即可在 wxml 中直接使用组件。示例代码如下：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">// app.json</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&quot;usingComponents&quot;</span>: &#123;</span></span><br><span class="line"> &quot;van-button&quot;: &quot;@vant/weapp/button/index&quot;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">//页面的 .wxml 结构</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&lt;vant-button <span class="built_in">type</span>=<span class="string">&quot;primary&quot;</span>&gt;按钮&lt;/vant-button&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-定制全局主题样式"><a href="#4-定制全局主题样式" class="headerlink" title="4.定制全局主题样式"></a>4.定制全局主题样式</h3><p>Vant Weapp 使用 ==CSS 变量==来实现定制主题。 关于 CSS 变量的基本用法，参考 MDN 文档：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties</a></p><h3 id="5-定制全局主题样式"><a href="#5-定制全局主题样式" class="headerlink" title="5.定制全局主题样式"></a>5.定制全局主题样式</h3><p>在 ==app.wxss== 中，写入 CSS 变量，即可对全局生效：</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/*app.wxss*/</span></span><br><span class="line">&gt;page&#123;</span><br><span class="line"><span class="comment">/*订制警告按钮的背景颜色和边框颜色*/</span></span><br><span class="line"><span class="attr">--button-danger-background-color</span>:<span class="number">#C00000</span>;</span><br><span class="line"><span class="attr">--button-danger-border-color</span>:<span class="number">#D60000</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>所有可用的==颜色变量==，请参考 Vant 官方提供的配置文件：<br><a href="https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less">https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less</a></p><h2 id="3-API-Promise化"><a href="#3-API-Promise化" class="headerlink" title="3.API Promise化"></a>3.API Promise化</h2><h3 id="1-基于回调函数的异步-API-的缺点"><a href="#1-基于回调函数的异步-API-的缺点" class="headerlink" title="1.基于回调函数的异步 API 的缺点"></a>1.基于回调函数的异步 API 的缺点</h3><p>默认情况下，小程序官方提供的==异步 API== 都是==基于回调函数==实现的，例如，网络请求的 API 需要按照如下的方式调用：</p><blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;wx.request(&#123;</span><br><span class="line">method:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">url:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">data:&#123;&#125;,</span><br><span class="line">success:<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;,<span class="regexp">//</span>请求成功的回调函数</span><br><span class="line">fail:<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;,<span class="regexp">//</span>请求失败的回调函数</span><br><span class="line">complete:<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>缺点：容易造成==回调地狱==的问题，代码的==可读性、维护性==差！</p><h3 id="2-什么是-API-Promise-化"><a href="#2-什么是-API-Promise-化" class="headerlink" title="2.什么是 API Promise 化"></a>2.什么是 API Promise 化</h3><p>==API Promise化==，指的是==通过额外的配置==，将官方提供的、基于回调函数的异步 API，==升级改造为基于 Promise 的异步 API==，从而提高代码的可读性、维护性，避免回调地狱的问题。</p><h3 id="3-实现-API-Promise-化"><a href="#3-实现-API-Promise-化" class="headerlink" title="3.实现 API Promise 化"></a>3.实现 API Promise 化</h3><p>在小程序中，实现 API Promise 化主要依赖于 ==miniprogram-api-promise== 这个第三方的 npm 包。它的安装和使用步骤如下：</p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install <span class="comment">--save miniprogram-api-promise</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">//在小程序入口文件中(app.js)，只需调用一次 promisifyAll() 方法</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">//即可实现异步 API 的 promise 化</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">import &#123;promisifyAll&#125; from <span class="string">&quot;miniprogram-api-promise&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">const wxp = wx.p = &#123;&#125;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">//promisify all wx<span class="string">&#x27;s api</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">promisifyAll(wx,wxp)</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-调用-Promise-化之后的异步-API"><a href="#4-调用-Promise-化之后的异步-API" class="headerlink" title="4.调用 Promise 化之后的异步 API"></a>4.调用 Promise 化之后的异步 API</h3><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//页面 .wxml 结构</span></span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;getInfo&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">//在页面的 .js 文件中，定义对应的 tap 事件处理函数</span></span><br><span class="line">&gt;<span class="keyword">async</span> <span class="title function_">getInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">data</span>: res&#125; = <span class="keyword">await</span> wx.<span class="property">p</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line"> <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line"> <span class="attr">url</span>:<span class="string">&quot;https://www.escook.cn/api/get&quot;</span>,</span><br><span class="line"> <span class="attr">data</span>:&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&gt;&#125;,</span><br></pre></td></tr></table></figure></blockquote><h1 id="全局数据共享"><a href="#全局数据共享" class="headerlink" title="全局数据共享"></a>全局数据共享</h1><h2 id="1-什么是全局数据共享"><a href="#1-什么是全局数据共享" class="headerlink" title="1.什么是全局数据共享"></a>1.什么是全局数据共享</h2><p>==全局数据共享==（又叫做：状态管理）是为了解决==组件之间数据共享==的问题。<br>开发中常用的全局数据共享方案有：Vuex、Redux、MobX 等。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230404120612048.png" alt="image-20230404120612048"></p><h2 id="2-小程序中的全局数据共享方案"><a href="#2-小程序中的全局数据共享方案" class="headerlink" title="2.小程序中的全局数据共享方案"></a>2.小程序中的全局数据共享方案</h2><p>在小程序中，可使用 ==mobx-miniprogram== 配合 ==mobx-miniprogram-bindings== 实现全局数据共享。其中：</p><ul><li>mobx-miniprogram 用来==创建 Store 实例对象==</li><li>mobx-miniprogram-bindings 用来==把 Store 中的共享数据或方法，绑定到组件或页面中使用==</li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230404120719684.png" alt="image-20230404120719684"></p><h2 id="3-MobX"><a href="#3-MobX" class="headerlink" title="3.MobX"></a>3.MobX</h2><h3 id="1-安装-MobX-相关的包"><a href="#1-安装-MobX-相关的包" class="headerlink" title="1.安装 MobX 相关的包"></a>1.安装 MobX 相关的包</h3><p>在项目中运行如下的命令，安装 MobX 相关的包：</p><blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install <span class="comment">--save mobx-miniprogram mobx-miniprogram-bindings</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="2-创建-MobX-的-Store-实例"><a href="#2-创建-MobX-的-Store-实例" class="headerlink" title="2.创建 MobX 的 Store 实例"></a>2.创建 MobX 的 Store 实例</h3><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> &#123; observable,action &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-miniprogram&quot;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">observable</span>(&#123;</span><br><span class="line"><span class="comment">//数据字段</span></span><br><span class="line"><span class="attr">numA</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">numB</span>:<span class="number">2</span>,</span><br><span class="line"><span class="comment">//计算属性</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">sum</span>()&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">numA</span> + <span class="variable language_">this</span>.<span class="property">numB</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//actions 方法，用来修改 store 中的数据</span></span><br><span class="line"><span class="attr">updateNum1</span>: <span class="title function_">action</span>(<span class="keyword">function</span> (<span class="params">step</span>)&#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">numA</span> += step</span><br><span class="line">&#125;),</span><br><span class="line"><span class="attr">updateNum2</span>: <span class="title function_">action</span>(<span class="keyword">function</span> (<span class="params">step</span>)&#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">numB</span> += step</span><br><span class="line">&#125;)</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-将-Store-中的成员绑定到页面中"><a href="#3-将-Store-中的成员绑定到页面中" class="headerlink" title="3.将 Store 中的成员绑定到页面中"></a>3.将 Store 中的成员绑定到页面中</h3><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//页面的 .js 文件</span></span><br><span class="line">&gt;<span class="keyword">import</span> &#123; createStoreBindings &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-miniprogram-bindings&quot;</span></span><br><span class="line">&gt;<span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&quot;../../store/store&quot;</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="title class_">Page</span>(&#123;</span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;<span class="comment">//生命周期函数--监听页面的加载</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">storeBindings</span> = <span class="title function_">createStoreBindings</span>(<span class="variable language_">this</span>,&#123;</span><br><span class="line">       store,<span class="comment">//要绑定的数据仓库</span></span><br><span class="line">       <span class="attr">fields</span>:[<span class="string">&quot;numA&quot;</span>,<span class="string">&quot;numB&quot;</span>,<span class="string">&quot;sum&quot;</span>],</span><br><span class="line">       <span class="attr">actions</span>:[<span class="string">&quot;updateNum1&quot;</span>]</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line">   <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//生命周期函数--监听页面卸载</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">storeBindings</span>.<span class="property">detroyStoreBindings</span></span><br><span class="line"> &#125;</span><br><span class="line">&gt;&#125;)</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-在页面上使用-Store-中的成员"><a href="#4-在页面上使用-Store-中的成员" class="headerlink" title="4.在页面上使用 Store 中的成员"></a>4.在页面上使用 Store 中的成员</h3><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;//页面的 .wxml 结构</span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span><span class="template-variable">&#123;&#123;<span class="name">numA</span>&#125;&#125;</span><span class="language-xml"> + </span><span class="template-variable">&#123;&#123;<span class="name">numB</span>&#125;&#125;</span><span class="language-xml"> = </span><span class="template-variable">&#123;&#123;<span class="name">sum</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler1&quot;</span> <span class="attr">data-step</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">1</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>numA + 1<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler1&quot;</span>  <span class="attr">data-step</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">-1</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>numA - 1<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;//按钮 tap 事件的处理函数</span></span><br><span class="line"><span class="language-xml">&gt;btnHandler1(e)&#123;</span></span><br><span class="line"><span class="language-xml">this.updateNum1(e.target.dataset.step)</span></span><br><span class="line"><span class="language-xml">&gt;&#125;,</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="5-将-Store-中的成员绑定到组件中"><a href="#5-将-Store-中的成员绑定到组件中" class="headerlink" title="5.将 Store 中的成员绑定到组件中"></a>5.将 Store 中的成员绑定到组件中</h3><blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="title class_">import</span> <span class="punctuation">&#123;</span> storeBindingsBehavior <span class="punctuation">&#125;</span> from <span class="string">&quot;mobx-miniprogram-bindings&quot;</span></span><br><span class="line">&gt;<span class="title class_">import</span> <span class="punctuation">&#123;</span> store <span class="punctuation">&#125;</span> from <span class="string">&quot;../../store/store&quot;</span></span><br><span class="line"></span><br><span class="line">&gt;Component(<span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">behaviors:</span>[storeBindingsBehavior],<span class="comment">//通过 storeBindingsBehavior 来实现自动绑定</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">storeBindings:</span><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="comment">//数据源</span></span><br><span class="line"> store,<span class="comment">//指定要绑定的 Store</span></span><br><span class="line"><span class="symbol"> fields:</span><span class="punctuation">&#123;</span><span class="comment">//指定要绑定的字段数据</span></span><br><span class="line"><span class="symbol"> numA:</span> () =&gt; store.numA,<span class="comment">//绑定字段的第 1 种方式</span></span><br><span class="line"><span class="symbol"> numB:</span> (store) =&gt; store.numB,<span class="comment">//绑定字段的第 2 种方式</span></span><br><span class="line"><span class="symbol"> sum:</span> <span class="string">&quot;sum&quot;</span><span class="comment">//绑定字段的第 3 种方式</span></span><br><span class="line"><span class="punctuation">&#125;</span>,</span><br><span class="line"><span class="symbol">actions:</span><span class="punctuation">&#123;</span><span class="comment">//指定要绑定的方法</span></span><br><span class="line"><span class="symbol">updateNum2:</span><span class="string">&quot;updateNum2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>,</span><br><span class="line">&gt;<span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-在组件中使用-Store-中的成员"><a href="#6-在组件中使用-Store-中的成员" class="headerlink" title="6.在组件中使用 Store 中的成员"></a>6.在组件中使用 Store 中的成员</h3><blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&gt;//组件的 .wxml 结构</span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> </span><span class="template-variable">&#123;&#123;<span class="name">numA</span>&#125;&#125;</span><span class="language-xml"> + </span><span class="template-variable">&#123;&#123;<span class="name">numB</span>&#125;&#125;</span><span class="language-xml"> = </span><span class="template-variable">&#123;&#123;<span class="name">sum</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler2&quot;</span> <span class="attr">data-step</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">1</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>numB + 1<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler2&quot;</span>  <span class="attr">data-step</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">-1</span>&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>numB - 1<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&gt;//组件的方法列表</span></span><br><span class="line"><span class="language-xml">&gt;methods: &#123;</span></span><br><span class="line"><span class="language-xml">btnHandler2(e)&#123;</span></span><br><span class="line"><span class="language-xml">this.updateNum2(e.target.dataset.step)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">&gt;&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h1><h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h2><h3 id="1-什么是分包"><a href="#1-什么是分包" class="headerlink" title="1.什么是分包"></a>1.什么是分包</h3><p>分包指的是把一个==完整的小程序项目==，按照需求==划分为不同的子包==，在构建时打包成不同的分包，用户在使用时==按需进行加载==。</p><h3 id="2-分包的好处"><a href="#2-分包的好处" class="headerlink" title="2.分包的好处"></a>2.分包的好处</h3><p>对小程序进行分包的好处主要有以下两点：</p><ul><li>可以==优化小程序首次启动的下载时间==</li><li>在==多团队共同开发==时可以更好的==解耦协作==</li></ul><h3 id="3-分包前项目的构成"><a href="#3-分包前项目的构成" class="headerlink" title="3.分包前项目的构成"></a>3.分包前项目的构成</h3><p>分包前，小程序项目中==所有的页面==和==资源==都被打包到了一起，导致整个==项目体积过大==，影响小程序==首次启动的下载时间==。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230404123250719.png" alt="image-20230404123250719"></p><h3 id="4-分包后项目的构成"><a href="#4-分包后项目的构成" class="headerlink" title="4.分包后项目的构成"></a>4.分包后项目的构成</h3><p>分包后，小程序项目由 ==1 个主包== + ==多个分包==组成：</p><ul><li>主包：一般只包含项目的==启动页面==或 ==TabBar 页面==、以及所有分包都需要用到的一些==公共资源==</li><li>分包：只包含和当前分包有关的页面和私有资源</li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230404123809851.png" alt="image-20230404123809851"></p><h3 id="5-分包的加载规则"><a href="#5-分包的加载规则" class="headerlink" title="5.分包的加载规则"></a>5.分包的加载规则</h3><ol><li>在小程序启动时，默认会==下载主包==并==启动主包内页面==</li></ol><ul><li>tabBar 页面需要放到主包中</li></ul><ol><li>当用户进入分包内某个页面时，==客户端会把对应分包下载下来==，下载完成后再进行展示</li></ol><ul><li>非 tabBar 页面可以按照功能的不同，划分为不同的分包之后，进行按需下载</li></ul><h3 id="6-分包的体积限制"><a href="#6-分包的体积限制" class="headerlink" title="6.分包的体积限制"></a>6.分包的体积限制</h3><p>目前，小程序分包的大小有以下两个限制：</p><ul><li>整个小程序所有分包大小不超过 ==16M==（主包 + 所有分包）</li><li>单个分包/主包大小不能超过 ==2M==</li></ul><h2 id="2-使用分包"><a href="#2-使用分包" class="headerlink" title="2.使用分包"></a>2.使用分包</h2><h3 id="1-配置方法"><a href="#1-配置方法" class="headerlink" title="1.配置方法"></a>1.配置方法</h3><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230404124556665.png" alt="image-20230404124556665"></p><p>在 app.json 的 subpackages 节点中声明分包的结构</p><blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#123;</span><br><span class="line"> <span class="string">&quot;pages&quot;</span>: [<span class="comment">//主页的所有页面</span></span><br><span class="line">   <span class="string">&quot;pages/home/home&quot;</span>,</span><br><span class="line">   <span class="string">&quot;pages/message/message&quot;</span>,</span><br><span class="line">   <span class="string">&quot;pages/contact/contact&quot;</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="string">&quot;subPackages&quot;</span>: [<span class="comment">//通过 subpackages 节点，声明分包的结构</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;root&quot;</span>:<span class="string">&quot;pkgA&quot;</span>,<span class="comment">//第一个分包的根目录</span></span><br><span class="line">     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;p1&quot;</span>,</span><br><span class="line">     <span class="string">&quot;pages&quot;</span>: [<span class="comment">//当下分包下，所有页面的相对存放路径</span></span><br><span class="line">       <span class="string">&quot;pages/cat/cat&quot;</span>,</span><br><span class="line">       <span class="string">&quot;pages/dog/dog&quot;</span></span><br><span class="line">     ]</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;root&quot;</span>: <span class="string">&quot;pkgB&quot;</span>,<span class="comment">//第一个分包的根目录</span></span><br><span class="line">     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;p2&quot;</span>,<span class="comment">//分包的别名</span></span><br><span class="line">     <span class="string">&quot;pages&quot;</span>: [<span class="comment">//当下分包下，所有页面的相对存放路径</span></span><br><span class="line">       <span class="string">&quot;pages/apple/apple&quot;</span></span><br><span class="line">     ],</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-打包原则"><a href="#2-打包原则" class="headerlink" title="2.打包原则"></a>2.打包原则</h3><ol><li>小程序会按 ==subpackages== 的配置进行分包，subpackages 之外的目录将被打包到主包中</li><li>主包也可以有自己的 pages（即最外层的 pages 字段）</li><li>tabBar 页面必须在主包内</li><li>分包之间不能互相嵌套</li></ol><h3 id="3-引用原则"><a href="#3-引用原则" class="headerlink" title="3.引用原则"></a>3.引用原则</h3><ol><li>主包==无法引用==分包内的私有资源</li><li>分包之间==不能相互引用==私有资源</li><li>分包==可以引用==主包内的公共资源</li></ol><h2 id="3-独立分包"><a href="#3-独立分包" class="headerlink" title="3.独立分包"></a>3.独立分包</h2><h3 id="1-什么是独立分包"><a href="#1-什么是独立分包" class="headerlink" title="1.什么是独立分包"></a>1.什么是独立分包</h3><p>独立分包==本质上也是分包==，只不过它比较特殊，==可以独立于主包和其他分包而单独运行==。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/WeChat/image-20230404125419949.png" alt="image-20230404125419949"></p><h3 id="2-独立分包和普通分包的区别"><a href="#2-独立分包和普通分包的区别" class="headerlink" title="2.独立分包和普通分包的区别"></a>2.独立分包和普通分包的区别</h3><p>最主要的区别：==是否依赖于主包才能运行==</p><ul><li>普通分包必须依赖于主包才能运行</li><li>独立分包可以在不下载主包的情况下，独立运行</li></ul><h3 id="3-独立分包的应用场景"><a href="#3-独立分包的应用场景" class="headerlink" title="3.独立分包的应用场景"></a>3.独立分包的应用场景</h3><p>开发者可以按需，将某些==具有一定功能独立性的页面==配置到==独立分包==中。原因如下：</p><ul><li>当小程序从普通的分包页面启动时，需要首先下载主包</li><li>而独立分包==不依赖主包==即可运行，==可以很大程度上提升分包页面的启动速度==</li></ul><p>注意：一个小程序中可以有多个独立分包。</p><h3 id="4-独立分包的配置方法"><a href="#4-独立分包的配置方法" class="headerlink" title="4.独立分包的配置方法"></a>4.独立分包的配置方法</h3><p>通过 independent 声明独立分包</p><blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="string">&quot;subPackages&quot;</span>: [</span><br><span class="line">&gt;&#123;</span><br><span class="line">     <span class="string">&quot;root&quot;</span>: <span class="string">&quot;moduleB&quot;</span>,</span><br><span class="line">     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;p2&quot;</span>,</span><br><span class="line">     <span class="string">&quot;pages&quot;</span>: [</span><br><span class="line">       <span class="string">&quot;pages/apple/apple&quot;</span></span><br><span class="line">     ],</span><br><span class="line">     <span class="string">&quot;independent&quot;</span>: <span class="literal">true</span><span class="comment">//通过此节点，声明当前 moudleB 分包为“独立分包”</span></span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></blockquote><h3 id="5-引用原则"><a href="#5-引用原则" class="headerlink" title="5.引用原则"></a>5.引用原则</h3><p>独立分包和普通分包以及主包之间，是==相互隔绝==的，==不能相互引用彼此的资源==！例如：</p><ol><li>主包==无法引用==独立分包内的私有资源</li><li>独立分包之间，==不能相互引用==私有资源</li><li>独立分包和普通分包之间，==不能相互引用==私有资源</li><li>==特别注意==：独立分包中不能引用主包内的公共资源</li></ol><h2 id="4-分包预下载"><a href="#4-分包预下载" class="headerlink" title="4.分包预下载"></a>4.分包预下载</h2><h3 id="1-什么是分包预下载"><a href="#1-什么是分包预下载" class="headerlink" title="1.什么是分包预下载"></a>1.什么是分包预下载</h3><p>分包预下载指的是：在进入小程序的某个页面时，==由框架自动预下载可能需要的分包==，从而提升进入后续分包页面时的启动速度。</p><h3 id="2-配置分包的预下载"><a href="#2-配置分包的预下载" class="headerlink" title="2.配置分包的预下载"></a>2.配置分包的预下载</h3><p>==预下载分包的行为，会在进入指定的页面时触发==。在 app.json 中，使用 ==preloadRule== 节点定义分包的预下载规则，示例代码如下：</p><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#123;</span><br><span class="line"><span class="string">&quot;preloadRule&quot;</span>:&#123;<span class="comment">//分包预下载的规则</span></span><br><span class="line"> <span class="string">&quot;pages/contact/contact&quot;</span>:&#123;<span class="comment">//触发分包下载的页面路径</span></span><br><span class="line">  <span class="comment">//network 表示在指定的网络模式下进行预下载</span></span><br><span class="line">           <span class="comment">//可选值为：all（不限网络）和 wifi（仅 wifi 模式下进行预下载）</span></span><br><span class="line">           <span class="comment">//默认值为：wifi</span></span><br><span class="line">           <span class="string">&quot;network&quot;</span>:<span class="string">&quot;all&quot;</span>,</span><br><span class="line">           <span class="comment">//packages 表示进入页面后，预下载哪些分包</span></span><br><span class="line">           <span class="comment">//可以通过 root 或 name 指定下载哪些分包</span></span><br><span class="line">           <span class="string">&quot;packages&quot;</span>:<span class="selector-attr">[<span class="string">&quot;pkgA&quot;</span>]</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-分包预下载的限制"><a href="#3-分包预下载的限制" class="headerlink" title="3.分包预下载的限制"></a>3.分包预下载的限制</h3><p>同一个分包中的页面享有==共同的预下载大小限额 2M==</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git代码版本控制工具</title>
      <link href="/posts/2f1c38e6.html"/>
      <url>/posts/2f1c38e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git代码版本控制工具"><a href="#Git代码版本控制工具" class="headerlink" title="Git代码版本控制工具"></a>Git代码版本控制工具</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>了解Git基本概念</li><li>能够概述git工作流程</li><li>能够使用Git常用命令</li><li>熟悉Git代码托管服务</li><li>能够使用idea操作git  </li></ul><h2 id="1-Git工作流程图"><a href="#1-Git工作流程图" class="headerlink" title="1.Git工作流程图"></a>1.Git工作流程图</h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1669967222031.png" alt="1669967222031"></p><p> 命令如下：</p><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区  </li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于 fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库  </li></ol><h2 id="2-Git安装与常用命令"><a href="#2-Git安装与常用命令" class="headerlink" title="2.Git安装与常用命令"></a>2.Git安装与常用命令</h2><p>git命令例子都是在Git Bash中演示的，会用到一些基本的linux命令：</p><ul><li>ls/ll 查看当前目录</li><li>cat 查看文件内容</li><li>touch 创建文件</li><li>vi vi编辑器</li></ul><h3 id="2-1Git环境配置"><a href="#2-1Git环境配置" class="headerlink" title="2.1Git环境配置"></a>2.1Git环境配置</h3><h4 id="2-1-1下载与安装"><a href="#2-1-1下载与安装" class="headerlink" title="2.1.1下载与安装"></a>2.1.1下载与安装</h4><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1669967771686.png" alt="1669967771686"></p><p>下载完后可以获得该文件</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1669968392959.png" alt="1669968392959"></p><p>当鼠标右键时出现这两个时代表安装成功</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1669968883225.png" alt="1669968883225"></p><ul><li>Git GUI：Git提供的图形界面工具</li><li>Git Bash：Git提供的命令行工具</li></ul><p>安装后第一件事情是配置用户名和email地址。因为每次Git提交的时候都会使用该用户的信息</p><h4 id="2-1-2基本配置"><a href="#2-1-2基本配置" class="headerlink" title="2.1.2基本配置"></a>2.1.2基本配置</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 打开Git <span class="keyword">Bash</span></span><br><span class="line"><span class="keyword"></span><span class="number">2</span>. 设置用户信息</span><br><span class="line"><span class="comment">#配置用户名</span></span><br><span class="line">git <span class="built_in">config</span> --global user.name <span class="string">&quot;NGC1224&quot;</span></span><br><span class="line"><span class="comment">#配置email地址</span></span><br><span class="line">git <span class="built_in">config</span> --global user.email <span class="string">&quot;1393362079@qq.com&quot;</span></span><br><span class="line"><span class="comment">#查看配置信息</span></span><br><span class="line">git <span class="built_in">config</span> --global user.name</span><br><span class="line">git <span class="built_in">config</span> --global user.email</span><br></pre></td></tr></table></figure><h4 id="2-1-3为常用指令配置别名（可选）"><a href="#2-1-3为常用指令配置别名（可选）" class="headerlink" title="2.1.3为常用指令配置别名（可选）"></a>2.1.3为常用指令配置别名（可选）</h4><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li><p>打开用户目录，创建 .bashrc 文件</p><p>部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行 <code>touch ~/.bashrc</code></p></li><li><p>在 .bashrc 文件中输入如下内容：  </p></li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于输出git提交日志</span></span><br><span class="line"><span class="keyword">alias</span> git-log=&#x27;git log <span class="params">--pretty=oneline</span> <span class="params">--all</span> <span class="params">--graph</span> <span class="params">--abbrev-commit</span>&#x27;</span><br><span class="line"><span class="comment">#用于输出当前目录所有文件及基本信息</span></span><br><span class="line"><span class="keyword">alias</span> ll=&#x27;<span class="keyword">ls</span> -al&#x27;</span><br></pre></td></tr></table></figure><h4 id="2-1-4解决GitBash乱码问题"><a href="#2-1-4解决GitBash乱码问题" class="headerlink" title="2.1.4解决GitBash乱码问题"></a>2.1.4解决GitBash乱码问题</h4><ol><li>打开GitBash执行下面命令</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol><li>${git_home}/etc/bash.bashrc 文件最后加入下面两行</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">LANG</span>=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">LC_ALL</span>=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-2获取本地仓库"><a href="#2-2获取本地仓库" class="headerlink" title="2.2获取本地仓库"></a>2.2获取本地仓库</h3><ol><li>在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库</li><li>进入这个目录中，点击右键打开Git bash窗口</li><li>执行命令git init</li><li>如果创建成功后可在文件夹下看到隐藏的.git目录。</li></ol><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1669970789949.png" alt="1669970789949"></p><h3 id="2-3基础操作指令"><a href="#2-3基础操作指令" class="headerlink" title="2.3基础操作指令"></a>2.3基础操作指令</h3><p> Git工作目录下对于文件的<strong>修改</strong>(增加、删除、更新)会存在几个状态，这些<strong>修改</strong>的状态会随着我们执行Git 的命令而发生变化。  </p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1669970949480.png" alt="1669970949480"></p><p> 如何使用命令来控制这些状态之间的转换：</p><ol><li><p>git add (工作区 —&gt; 暂存区)</p></li><li><p>git commit (暂存区 —&gt; 本地仓库)</p></li></ol><h4 id="2-3-1查看修改的状态"><a href="#2-3-1查看修改的状态" class="headerlink" title="2.3.1查看修改的状态"></a>2.3.1查看修改的状态</h4><ul><li>作用：查看的修改的状态（暂存区、工作区）</li><li>命令形式：git status</li></ul><h4 id="2-3-2添加到工作区到暂存区（add）"><a href="#2-3-2添加到工作区到暂存区（add）" class="headerlink" title="2.3.2添加到工作区到暂存区（add）"></a>2.3.2添加到工作区到暂存区（add）</h4><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令形式：git add 单个文件名|通配符<ul><li>将所有修改加入暂存区：git add .</li></ul></li></ul><h4 id="2-3-3提交暂存区到本地仓库（commit）"><a href="#2-3-3提交暂存区到本地仓库（commit）" class="headerlink" title="2.3.3提交暂存区到本地仓库（commit）"></a>2.3.3提交暂存区到本地仓库（commit）</h4><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：git commit -m ‘注释内容’</li></ul><h4 id="2-3-4查看提交日志-log"><a href="#2-3-4查看提交日志-log" class="headerlink" title="2.3.4查看提交日志(log)"></a>2.3.4查看提交日志(log)</h4><p>在21.3中配置的别名 git-log 就包含了这些参数，所以后续可以直接使用指令 <code>git-log</code></p><ul><li>作用:查看提交记录</li><li>命令形式：git log [option]<ul><li>options<ul><li>—all 显示所有分支</li><li>—pretty=oneline 将提交信息显示为一行</li><li>—abbrev-commit 使得输出的commitId更简短</li><li>—graph 以图的形式显示  </li></ul></li></ul></li></ul><h4 id="2-3-5-版本回退"><a href="#2-3-5-版本回退" class="headerlink" title="2.3.5 版本回退"></a>2.3.5 版本回退</h4><ul><li>作用：版本切换</li><li>命令形式：git reset —hard commitID<ul><li>commitID 可以使用 git-log 或 git log 指令查看</li></ul></li><li>如何查看已经删除的记录?<ul><li>git reflog</li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h4 id="2-3-6-添加文件至忽略列表"><a href="#2-3-6-添加文件至忽略列表" class="headerlink" title="2.3.6 添加文件至忽略列表"></a>2.3.6 添加文件至忽略列表</h4><p> 一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动 生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录 中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># no .a files</span></span><br><span class="line">*<span class="string">.a</span></span><br><span class="line"><span class="comment"># but do track lib.a, even though you&#x27;re ignoring .a files above</span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="comment"># only ignore the TODO file in the current directory, not subdir/TODO</span></span><br><span class="line"><span class="string">/TODO</span></span><br><span class="line"><span class="comment"># ignore all files in the build/ directory</span></span><br><span class="line">build/</span><br><span class="line"><span class="comment"># ignore doc/notes.txt, but not doc/server/arch.txt</span></span><br><span class="line">doc/*<span class="string">.txt</span></span><br><span class="line"><span class="comment"># ignore all .pdf files in the doc/ directory</span></span><br><span class="line">doc/**/*<span class="string">.pdf</span></span><br></pre></td></tr></table></figure><h4 id="练习-基础操作"><a href="#练习-基础操作" class="headerlink" title="练习:基础操作"></a>练习:基础操作</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#####################仓库初始化######################</span><br><span class="line"># 创建目录（git_test01）并在目录下打开gitbash</span><br><span class="line">略</span><br><span class="line"># 初始化git仓库</span><br><span class="line">git init</span><br><span class="line">#####################创建文件并提交#####################</span><br><span class="line"># 目录下创建文件 file01.txt</span><br><span class="line">略</span><br><span class="line"># 将修改加入暂存区</span><br><span class="line">git add .</span><br><span class="line"># 将修改提交到本地仓库，提交记录内容为：commit <span class="number">001</span></span><br><span class="line">git commit -m <span class="string">&#x27;commit 001&#x27;</span></span><br><span class="line"># 查看日志</span><br><span class="line">git log</span><br><span class="line">####################修改文件并提交######################</span><br><span class="line"># 修改file01的内容为：count=<span class="number">1</span></span><br><span class="line">略</span><br><span class="line"># 将修改加入暂存区</span><br><span class="line">git add .</span><br><span class="line"># # 将修改提交到本地仓库，提交记录内容为：update file01</span><br><span class="line">git commit --m <span class="string">&#x27;update file01&#x27;</span></span><br><span class="line"># 查看日志</span><br><span class="line">git log</span><br><span class="line"># 以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line">####################将最后一次修改还原##################</span><br><span class="line"># 查看提交记录</span><br><span class="line">git-log</span><br><span class="line"># 找到倒数第<span class="number">2</span>次提交的commitID</span><br><span class="line">略</span><br><span class="line"># 版本回退</span><br><span class="line">git reset commitID --hard</span><br></pre></td></tr></table></figure><h3 id="2-4-分支"><a href="#2-4-分支" class="headerlink" title="2.4 分支"></a>2.4 分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><h4 id="2-4-1-查看本地分支"><a href="#2-4-1-查看本地分支" class="headerlink" title="2.4.1 查看本地分支"></a>2.4.1 查看本地分支</h4><ul><li>命令：git branch</li></ul><h4 id="2-4-2-创建本地分支"><a href="#2-4-2-创建本地分支" class="headerlink" title="2.4.2 创建本地分支"></a>2.4.2 创建本地分支</h4><ul><li>命令：git branch 分支名</li></ul><h4 id="2-4-3-切换分支-checkout"><a href="#2-4-3-切换分支-checkout" class="headerlink" title="2.4.3 切换分支(checkout)"></a>2.4.3 切换分支(checkout)</h4><ul><li><p>命令：git checkout 分支名</p><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p></li><li><p>命令：git checkout -b 分支名</p></li></ul><h4 id="2-4-4合并分支-merge"><a href="#2-4-4合并分支-merge" class="headerlink" title="2.4.4合并分支(merge)"></a>2.4.4合并分支(merge)</h4><p> 一个分支上的提交可以合并到另一个分支</p><ul><li>命令：git merge 分支名称</li></ul><h4 id="2-4-5-删除分支"><a href="#2-4-5-删除分支" class="headerlink" title="2.4.5 删除分支"></a>2.4.5 删除分支</h4><p><strong>不能删除当前分支，只能删除其他分支</strong></p><p>git branch -d b1 删除分支时，需要做各种检查</p><p>git branch -D b1 不做任何检查，强制删除</p><h4 id="2-4-6解决冲突"><a href="#2-4-6解决冲突" class="headerlink" title="2.4.6解决冲突"></a>2.4.6解决冲突</h4><p> 当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解 决冲突，解决冲突步骤如下：</p><ol><li><p>处理文件中冲突的地方</p></li><li><p>将解决完冲突的文件加入暂存区(add)</p></li><li><p>提交到仓库(commit)</p><p>冲突部分的内容处理如下所示：</p></li></ol><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670066126459.png" alt="1670066126459"></p><h4 id="2-4-7-开发中分支使用原则与流程"><a href="#2-4-7-开发中分支使用原则与流程" class="headerlink" title="2.4.7 开发中分支使用原则与流程"></a>2.4.7 开发中分支使用原则与流程</h4><p> 几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离 开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>开发中，一般有如下分支使用原则与流程：</p><ul><li><p>​ master （生产） 分支</p><p>​ 线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</p></li><li><p>​ develop（开发）分支</p><p>是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线 要求，都可以 在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</p></li><li><p>​ feature/xxxx分支</p><p>从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完 成后合并到develop分支。</p></li><li><p>​ hotfix/xxxx分支，</p><p>​ 从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、 develop分支。</p><p>​ 还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等 等。  </p></li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1669975444796.png" alt="1669975444796"></p><h4 id="练习-分支操作"><a href="#练习-分支操作" class="headerlink" title="练习:分支操作"></a>练习:分支操作</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">###########################创建并切换到dev01分支，在dev01分支提交</span><br><span class="line"># [master]创建分支dev01</span><br><span class="line">git branch dev01</span><br><span class="line"># [master]切换到dev01</span><br><span class="line">git checkout dev01</span><br><span class="line"># [dev01]创建文件file02.txt</span><br><span class="line">略</span><br><span class="line"># [dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;add file02 on dev&#x27;</span></span><br><span class="line"># [dev01]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line">###########################切换到master分支，将dev01合并到master分支</span><br><span class="line"># [dev01]切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"># [master]合并dev01到master分支</span><br><span class="line">git merge dev01</span><br><span class="line"># [master]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"># [master]查看文件变化(目录下也出现了file02.txt)</span><br><span class="line">略</span><br><span class="line">##########################删除dev01分支</span><br><span class="line"># [master]删除dev01分支</span><br><span class="line">git branch -d dev01</span><br><span class="line"># [master]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Git远程仓库"><a href="#3-Git远程仓库" class="headerlink" title="3. Git远程仓库"></a>3. Git远程仓库</h2><h3 id="3-1、常用的托管服务-远程仓库"><a href="#3-1、常用的托管服务-远程仓库" class="headerlink" title="3.1、常用的托管服务[远程仓库]"></a>3.1、常用的托管服务[远程仓库]</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库</span><br><span class="line">呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</span><br><span class="line"> gitHub（ 地址：https:<span class="comment">//github.com/ ）是一个面向开源及私有软件项目的托管平台，因为只支持</span></span><br><span class="line">Git 作为唯一的版本库格式进行托管，故名gitHub</span><br><span class="line"> 码云（地址： https:<span class="comment">//gitee.com/ ）是国内的一个代码托管平台，由于服务器在国内，所以相比于</span></span><br><span class="line">GitHub，码云速度会更快</span><br><span class="line"> GitLab （地址： https:<span class="comment">//about.gitlab.com/ ）是一个用于仓库管理系统的开源项目，使用Git作</span></span><br><span class="line">为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2、注册码云"><a href="#3-2、注册码云" class="headerlink" title="3.2、注册码云"></a>3.2、注册码云</h3><p> 要想使用码云的相关服务，需要注册账号（地址： <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670831789362.png" alt="1670831789362"></p><h3 id="3-3、创建远程仓库"><a href="#3-3、创建远程仓库" class="headerlink" title="3.3、创建远程仓库"></a>3.3、创建远程仓库</h3><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670832230648.png" alt="1670832230648"></p><p> 仓库创建完成后可以看到仓库地址，如下图所示:</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670832452481.png" alt="1670832452481"></p><h3 id="3-4、配置SSH公钥"><a href="#3-4、配置SSH公钥" class="headerlink" title="3.4、配置SSH公钥"></a>3.4、配置SSH公钥</h3><ul><li>生成SSH公钥<ul><li>ssh-keygen -t rsa</li><li>不断回车<ul><li>如果公钥已经存在，则自动覆盖</li></ul></li></ul></li><li>Gitee设置账户共公钥<ul><li>获取公钥<ul><li>cat ~/.ssh/id_rsa.pub  </li></ul></li></ul></li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670833584225.png" alt="1670833584225"></p><ul><li>验证是否配置成功</li><li>ssh -T <a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x65;&#101;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#x65;&#101;&#46;&#x63;&#x6f;&#109;</a>  </li></ul><h3 id="3-5、操作远程仓库"><a href="#3-5、操作远程仓库" class="headerlink" title="3.5、操作远程仓库"></a>3.5、操作远程仓库</h3><h4 id="3-5-1、添加远程仓库"><a href="#3-5-1、添加远程仓库" class="headerlink" title="3.5.1、添加远程仓库"></a>3.5.1、添加远程仓库</h4><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><ul><li>命令： git remote add &lt;远端名称&gt; &lt;仓库路径&gt;<ul><li>远端名称，默认是origin，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此URL</li><li>例如: git remote add origin <a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#103;&#105;&#x74;&#64;&#x67;&#105;&#116;&#101;&#x65;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#x67;&#105;&#116;&#101;&#x65;&#46;&#99;&#x6f;&#109;</a>:NGC-1224/ngc2002.git</li></ul></li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670834714489.png" alt="1670834714489"></p><h4 id="3-5-2、查看远程仓库"><a href="#3-5-2、查看远程仓库" class="headerlink" title="3.5.2、查看远程仓库"></a>3.5.2、查看远程仓库</h4><ul><li>命令：git remote</li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670834795088.png" alt="1670834795088"></p><h4 id="3-5-3、推送到远程仓库"><a href="#3-5-3、推送到远程仓库" class="headerlink" title="3.5.3、推送到远程仓库"></a>3.5.3、推送到远程仓库</h4><ul><li><p>命令：git push [-f] [—set-upstream] [远端名称 [本地分支名][:远端分支名] ]</p><ul><li>如果远程分支名和本地分支名称相同，则可以只写本地分支<ul><li>git push origin master</li></ul></li><li>-f 表示强制覆盖</li><li><code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。<ul><li><code>git push --set-upstream origin master</code></li></ul></li><li>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。<ul><li>git push 将master分支推送到已关联的远端分支。</li></ul></li></ul><p>查询远程仓库</p></li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670835552409.png" alt="1670835552409"></p><h4 id="3-5-4、本地分支与远程分支的关联关系"><a href="#3-5-4、本地分支与远程分支的关联关系" class="headerlink" title="3.5.4、本地分支与远程分支的关联关系"></a>3.5.4、本地分支与远程分支的关联关系</h4><p>查看关联关系我们可以使用 <code>git branch -vv</code>命令</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670835630022.png" alt="1670835630022"></p><h4 id="3-5-5、从远程仓库克隆"><a href="#3-5-5、从远程仓库克隆" class="headerlink" title="3.5.5、从远程仓库克隆"></a>3.5.5、从远程仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><ul><li>命令: git clone &lt;仓库路径&gt; [本地目录]<ul><li>本地目录可以省略，会自动生成一个目录</li></ul></li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670836210649.png" alt="1670836210649"></p><h4 id="3-5-6、从远程仓库中抓取和拉取"><a href="#3-5-6、从远程仓库中抓取和拉取" class="headerlink" title="3.5.6、从远程仓库中抓取和拉取"></a>3.5.6、从远程仓库中抓取和拉取</h4><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本 地，再进行操作。</p><ul><li>抓取 命令：git fetch [remote name] [branch name]<ul><li><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</strong></li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul></li><li><p>拉取 命令：git pull [remote name] [branch name]</p><ul><li><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。  </li></ul><p>1.在test这个本地仓库进行一次提交并推送到远程仓库</p></li></ul><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670837111712.png" alt="1670837111712"></p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670837144278.png" alt="1670837144278"></p><ol><li>在另一个仓库将远程提交的代码拉取到本地仓库</li></ol><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670837371050.png" alt="1670837371050"></p><h4 id="3-5-7、解决合并冲突"><a href="#3-5-7、解决合并冲突" class="headerlink" title="3.5.7、解决合并冲突"></a>3.5.7、解决合并冲突</h4><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要 推送到远程仓库，此时B用户晚于A用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支</strong>,如下图所示。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670837469715.png" alt="1670837469715"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong></p><h3 id="练习：远程仓库操作"><a href="#练习：远程仓库操作" class="headerlink" title="练习：远程仓库操作"></a>练习：远程仓库操作</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">##########################<span class="number">1</span>-将本地仓库推送到远程仓库</span><br><span class="line"># 完成<span class="number">3.1</span>、<span class="number">3.2</span>、<span class="number">3.3</span>、<span class="number">3.4</span>的操作</span><br><span class="line">略</span><br><span class="line"># [git_test01]添加远程仓库</span><br><span class="line">git remote add origin git@gitee.com<span class="comment">/**/</span>**.git</span><br><span class="line"># [git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span><br><span class="line">git push --set-upstream origin master</span><br><span class="line">###########################<span class="number">2</span>-将远程仓库克隆到本地</span><br><span class="line"># 将远程仓库克隆到本地git_test02目录下</span><br><span class="line">git clone git@gitee.com<span class="comment">/**/</span>**.git git_test02</span><br><span class="line"># [git_test02]以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line">###########################<span class="number">3</span>-将本地修改推送到远程仓库</span><br><span class="line"># [git_test01]创建文件file03.txt</span><br><span class="line">略</span><br><span class="line"># [git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file03</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;add file03&#x27;</span></span><br><span class="line"># [git_test01]将master分支的修改推送到远程仓库</span><br><span class="line">git push origin master</span><br><span class="line">###########################<span class="number">4</span>-将远程仓库的修改更新到本地</span><br><span class="line"># [git_test02]将远程仓库修改再拉取到本地</span><br><span class="line">git pull</span><br><span class="line"># 以精简的方式显示提交记录</span><br><span class="line">git-log</span><br><span class="line"># 查看文件变化(目录下也出现了file03.txt)</span><br><span class="line">略</span><br></pre></td></tr></table></figure><h2 id="4、在Idea中使用Git"><a href="#4、在Idea中使用Git" class="headerlink" title="4、在Idea中使用Git"></a>4、在Idea中使用Git</h2><h3 id="4-1、在Idea中配置Git"><a href="#4-1、在Idea中配置Git" class="headerlink" title="4.1、在Idea中配置Git"></a>4.1、在Idea中配置Git</h3><p> 安装好IntelliJ IDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安 装位置则需要手动配置下Git的路径。选择File→Settings打开设置窗口，找到Version Control下的git选 项：</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670838515530.png" alt="1670838515530"></p><p>点击Test按钮,现在执行成功，配置完成</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670838643331.png" alt="1670838643331"></p><h3 id="4-2、在Idea中操作Git"><a href="#4-2、在Idea中操作Git" class="headerlink" title="4.2、在Idea中操作Git"></a>4.2、在Idea中操作Git</h3><p>场景：本地已经有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员 继续一起协作开发。</p><h4 id="4-2-1、创建项目远程仓库（参考3-3）"><a href="#4-2-1、创建项目远程仓库（参考3-3）" class="headerlink" title="4.2.1、创建项目远程仓库（参考3.3）"></a>4.2.1、创建项目远程仓库（参考3.3）</h4><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670838762889.png" alt="1670838762889"></p><h4 id="4-2-2、初始化本地仓库"><a href="#4-2-2、初始化本地仓库" class="headerlink" title="4.2.2、初始化本地仓库"></a>4.2.2、初始化本地仓库</h4><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670839629127.png" alt="1670839629127"></p><h4 id="4-2-3、设置远程仓库"><a href="#4-2-3、设置远程仓库" class="headerlink" title="4.2.3、设置远程仓库"></a>4.2.3、设置远程仓库</h4><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670839992128.png" alt="1670839992128"></p><h4 id="4-2-4、提交到本地仓库"><a href="#4-2-4、提交到本地仓库" class="headerlink" title="4.2.4、提交到本地仓库"></a>4.2.4、提交到本地仓库</h4><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670840110445.png" alt="1670840110445"></p><h4 id="4-2-5、推送到远程仓库"><a href="#4-2-5、推送到远程仓库" class="headerlink" title="4.2.5、推送到远程仓库"></a>4.2.5、推送到远程仓库</h4><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670840314064.png" alt="1670840314064"></p><h4 id="4-2-6、克隆远程仓库到本地"><a href="#4-2-6、克隆远程仓库到本地" class="headerlink" title="4.2.6、克隆远程仓库到本地"></a>4.2.6、克隆远程仓库到本地</h4><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670840883147.png" alt="1670840883147"></p><h4 id="4-2-7、创建分支"><a href="#4-2-7、创建分支" class="headerlink" title="4.2.7、创建分支"></a>4.2.7、创建分支</h4><p>常规的方式</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670850766725.png" alt="1670850766725"></p><p>更好的方式</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670850902547.png" alt="1670850902547"></p><h4 id="4-2-8、切换分支及其他分支相关操作"><a href="#4-2-8、切换分支及其他分支相关操作" class="headerlink" title="4.2.8、切换分支及其他分支相关操作"></a>4.2.8、切换分支及其他分支相关操作</h4><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670850951558.png" alt="1670850951558"></p><h2 id="IDEA集成GitBash作为Terminal"><a href="#IDEA集成GitBash作为Terminal" class="headerlink" title="IDEA集成GitBash作为Terminal"></a>IDEA集成GitBash作为Terminal</h2><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/Git/1670852342096.png" alt="1670852342096"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的安装</title>
      <link href="/posts/7fea3019.html"/>
      <url>/posts/7fea3019.html</url>
      
        <content type="html"><![CDATA[<h1 id="python的下载与安装"><a href="#python的下载与安装" class="headerlink" title="python的下载与安装"></a>python的下载与安装</h1><p>到该链接下载自己需要的python版本<br><a href="https://registry.npmmirror.com/binary.html?path=python/">https://registry.npmmirror.com/binary.html?path=python/</a></p><p>下载图中标注的安装包</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231007102926691.png" alt="image-20231007102926691"></p><p>双击打开文件，选择自定义安装</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231007103335881.png" alt="image-20231007103335881"></p><p>默认选择，点击next，选择自己想要安装的位置（建议创建一个文件来放），再点击install安装就可以了</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231007103444648.png" alt="image-20231007103444648"></p><p>检查是否安装成功，在cmd中输入以下命令，出现对应的版本号即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br><span class="line">pip -V</span><br></pre></td></tr></table></figure><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231007103857944.png" alt="image-20231007103857944"></p><h1 id="切换pip镜像源"><a href="#切换pip镜像源" class="headerlink" title="切换pip镜像源"></a>切换pip镜像源</h1><p>由于默认是访问国外的服务器比较慢，可以使用中国的镜像源，可以直接在cmd执行以下命令来更换，同时升级pip的版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="keyword">set</span> <span class="keyword">global</span>.<span class="built_in">index</span>-url https://pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br><span class="line"><span class="keyword">python</span> -<span class="keyword">m</span> pip install --upgrade pip</span><br></pre></td></tr></table></figure><h1 id="pycharm配置python解释器"><a href="#pycharm配置python解释器" class="headerlink" title="pycharm配置python解释器"></a>pycharm配置python解释器</h1><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231007105139605.png" alt="image-20231007105139605"></p><blockquote><p>1为项目的存放路径和项目名（尽量别用中文）</p><p>2、3为项目的环境，2为虚拟环境的解释器，3为系统安装的解释器</p></blockquote><h2 id="环境的介绍"><a href="#环境的介绍" class="headerlink" title="环境的介绍"></a>环境的介绍</h2><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><p>如果你选择New Environment using 新建项目，则在你pycharm的workspace里新建的项目文件夹里会给你创建一个vevn文件夹，这个文件夹里会将你的Base interpreter指定的python编译器复制一遍放进去</p><p>这样我们这个项目的编译器就是用的此项目文件夹下的编译器，不是我python安装的路径下的编译器。所以使用pip install 进行安装的site-packages都不能在这个项目中使用，因为安装的包都放在Python安装路径下的site-packages里。</p><p>如果我们想在新建的项目中使用以前pip进行安装的包（如果是用New Environment using新建的项目），需要勾选inherit global site-packages选项，就能在项目中使用之前安装的包。</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231007110423009.png" alt="image-20231007110423009"></p><p>可以看到之前安装的包在虚拟环境中没有，需要自己重新安装</p><h3 id="系统的解释器"><a href="#系统的解释器" class="headerlink" title="系统的解释器"></a>系统的解释器</h3><p>选择自己python安装位置下的路径下的python.exe</p><p><img src="https://ngc1224.oss-cn-hangzhou.aliyuncs.com/TyporaImg/image-20231007112816876.png" alt="image-20231007112816876"></p><p>可以看到自己之前安装的都在</p><blockquote><p><strong>新手学习建议</strong>：使用第二种方式新建项目 则是使用python安装路径下的编译器，这样我们pip安装的包就在可以在新建的项目中使用，而且不会将编译器复制一遍。新建出来的项目结构非常简单</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Markdown语法自带格式"><a href="#1-Markdown语法自带格式" class="headerlink" title="1.Markdown语法自带格式"></a>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块"><a href="#1-1-代码块" class="headerlink" title="1.1 代码块"></a>1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题"><a href="#1-2-多级标题" class="headerlink" title="1.2 多级标题"></a>1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式"><a href="#1-3-文字样式" class="headerlink" title="1.3 文字样式"></a>1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><font size = 5>5号字</font><font face="黑体">黑体</font><font color=blue>蓝色</font><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用"><a href="#1-4-引用" class="headerlink" title="1.4 引用"></a>1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>….</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线"><a href="#1-5-分割线" class="headerlink" title="1.5 分割线"></a>1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以"><a href="#1-6-列表-跟空格都可以" class="headerlink" title="1.6 列表(*,+,-跟空格都可以)"></a>1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表"><a href="#1-6-1-无序列表" class="headerlink" title="1.6.1 无序列表"></a>1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li><p>…</p></li><li><p>Java</p></li><li>Python</li><li><p>…</p></li><li><p>Java</p></li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表"><a href="#1-6-2-有序列表" class="headerlink" title="1.6.2 有序列表"></a>1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>1.<br>2.<br>3.<br>4.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片"><a href="#1-7-图片" class="headerlink" title="1.7 图片"></a>1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格"><a href="#1-8-表格" class="headerlink" title="1.8 表格"></a>1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="table-container"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式"><a href="#1-9-公式" class="headerlink" title="1.9 公式"></a>1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><script type="math/tex; mode=display">\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-Butterfly外挂标签"><a href="#2-Butterfly外挂标签" class="headerlink" title="2.Butterfly外挂标签"></a>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text"><a href="#2-1-行内文本样式-text" class="headerlink" title="2.1 行内文本样式 text"></a>2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span"><a href="#2-2-行内文本-span" class="headerlink" title="2.2 行内文本 span"></a>2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p"><a href="#2-3-段落文本-p" class="headerlink" title="2.3 段落文本 p"></a>2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note"><a href="#2-4-引用note" class="headerlink" title="2.4 引用note"></a>2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><div class="table-container"><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table></div><p>2.外部icon</p><div class="table-container"><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip"><a href="#2-5-上标标签-tip" class="headerlink" title="2.5 上标标签 tip"></a>2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima"><a href="#2-6-动态标签-anima" class="headerlink" title="2.6 动态标签 anima"></a>2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>   1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox"><a href="#2-7-复选列表-checkbox" class="headerlink" title="2.7 复选列表 checkbox"></a>2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio"><a href="#2-8-单选列表-radio" class="headerlink" title="2.8 单选列表 radio"></a>2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline"><a href="#2-9-时间轴-timeline" class="headerlink" title="2.9 时间轴 timeline"></a>2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link"><a href="#2-10-链接卡片-link" class="headerlink" title="2.10 链接卡片 link"></a>2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="<https://akilar.top/posts/615e2dec/>"><div class="left"><img src="<https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico>"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url"><https://akilar.top/posts/615e2dec/></p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns"><a href="#2-11-按钮-btns" class="headerlink" title="2.11 按钮 btns"></a>2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='<https://xaoxuu.com>' title='xaoxuu'><img src='<https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png>'>xaoxuu</a><a class="button" href='<https://xaoxuu.com>' title='xaoxuu'><img src='<https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png>'>xaoxuu</a><a class="button" href='<https://xaoxuu.com>' title='xaoxuu'><img src='<https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png>'>xaoxuu</a><a class="button" href='<https://xaoxuu.com>' title='xaoxuu'><img src='<https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png>'>xaoxuu</a><a class="button" href='<https://xaoxuu.com>' title='xaoxuu'><img src='<https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png>'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard"><a href="#2-12-github卡片-ghcard" class="headerlink" title="2.12 github卡片 ghcard"></a>2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><div class="table-container"><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><p>2.仓库信息卡片</p><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage"><a href="#2-13-github徽标-ghbdage" class="headerlink" title="2.13 github徽标 ghbdage"></a>2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速>" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=<https://metroui.org.ua/index.html&"></object>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=<https://github.com/>&"></object><p>3.拓展参数，支持shields的API的全部参数内容</p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=<https://vercel.com/&style=social&logoWidth=20>"></object>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites"><a href="#2-14-网站卡片-sites" class="headerlink" title="2.14 网站卡片 sites"></a>2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="<https://fomalhaut1998.com>"><div class="img"><img src="<https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg>"/></div><div class="info"><img src="<https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png>"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="<https://inkss.cn>"><div class="img"><img src="<https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg>"/></div><div class="info"><img src="<https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg>"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="<https://blog.mhuig.top>"><div class="img"><img src="<https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png>"/></div><div class="info"><img src="<https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png>"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="<https://colsrch.top>"><div class="img"><img src="<https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png>"/></div><div class="info"><img src="<https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg>"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="<https://linhk1606.github.io>"><div class="img"><img src="<https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png>"/></div><div class="info"><img src="<https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png>"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage"><a href="#2-15-行内图片-inlineimage" class="headerlink" title="2.15 行内图片 inlineimage"></a>2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="<https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif>" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="<https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif>" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image"><a href="#2-16-单张图片-image" class="headerlink" title="2.16 单张图片 image"></a>2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="<https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg>" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="<https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg>" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="<https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg>" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="<https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg>" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio"><a href="#2-17-音频-audio" class="headerlink" title="2.17 音频 audio"></a>2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3>' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video"><a href="#2-18-视频-video" class="headerlink" title="2.18 视频 video"></a>2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='<https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov>' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery"><a href="#2-19-相册-gallery" class="headerlink" title="2.19 相册 gallery"></a>2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><div class="table-container"><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table></div><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding"><a href="#2-20-折叠框-folding" class="headerlink" title="2.20 折叠框 folding"></a>2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab"><a href="#2-21-分栏-tab" class="headerlink" title="2.21 分栏 tab"></a>2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem"><a href="#2-22-诗词标签-poem" class="headerlink" title="2.22 诗词标签 poem"></a>2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon"><a href="#2-23-阿里图标-icon" class="headerlink" title="2.23 阿里图标 icon"></a>2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow"><a href="#2-24-特效标签wow" class="headerlink" title="2.24 特效标签wow"></a>2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress"><a href="#2-25-进度条-progress" class="headerlink" title="2.25  进度条 progress"></a>2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation"><a href="#2-26-注释-notation" class="headerlink" title="2.26 注释 notation"></a>2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble"><a href="#2-27-气泡注释-bubble" class="headerlink" title="2.27 气泡注释 bubble"></a>2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span>&lt;/span&gt;，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局”，用来为盒状模型提供最大的灵活性”</span>&lt;/span&gt;，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span>&lt;/span&gt;，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span>&lt;/span&gt;写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span>&lt;/span&gt;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference"><a href="#2-28-引用文献-reference" class="headerlink" title="2.28 引用文献 reference"></a>2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;，Butterfly主题<span class="hidden-anchor" id="referto_[3]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;</p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[7]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[8]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;<span class="hidden-anchor" id="referto_[9]">&lt;/span&gt;<sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span>&lt;/span&gt;&lt;/span&gt;</p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/jq.qq.com/?_wv=1027&k=pGLB2C0N%3E">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/hexo.io/zh-cn/docs/%3E">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/butterfly.js.org/posts/21cfbf15/%3E">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/volantis.js.org/v5/tag-plugins/%3E">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/volantis.js.org/tag-plugins/%3E">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89%3E">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/lovelijunyi.gitee.io/posts/c898.html%3E">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/github.com/l-lin/font-awesome-animation%3E">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="/%3Chttps:/www.antmoe.com/posts/3b43914f/%3E">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示"><a href="#2-29-PDF展示" class="headerlink" title="2.29 PDF展示"></a>2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;&amp;lt;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&amp;gt;&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件"><a href="#2-30-Hexo-tag-map-插件" class="headerlink" title="2.30 Hexo-tag-map 插件"></a>2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="table-container"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table></div><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div>&lt;/div&gt;<script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><br></p><p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><br></p><p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><br></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块"><a href="#2-31-隐藏块" class="headerlink" title="2.31 隐藏块"></a>2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
